--- Begin `a-schema`.target_table createLoadTable ---
CREATE TABLE IF NOT EXISTS `flow_temp_load_table_shard-range_0_target_table` (
	key1 BIGINT NOT NULL,
	key2 BOOLEAN NOT NULL
);
--- End `a-schema`.target_table createLoadTable ---

--- Begin `a-schema`.target_table createStoreTable ---
CREATE TABLE IF NOT EXISTS `flow_temp_store_table_shard-range_0_target_table` (
	key1 BIGINT NOT NULL,
	key2 BOOLEAN NOT NULL,
	boolean BOOLEAN,
	integer BIGINT,
	number DOUBLE,
	string STRING,
	flow_document STRING NOT NULL
);
--- End `a-schema`.target_table createStoreTable ---

--- Begin `a-schema`.target_table loadQuery ---
SELECT 0, `a-schema`.target_table.flow_document
	FROM `a-schema`.target_table
	JOIN `flow_temp_load_table_shard-range_0_target_table` AS r
	ON `a-schema`.target_table.key1 = r.key1 AND `a-schema`.target_table.key2 = r.key2
--- End `a-schema`.target_table loadQuery ---

--- Begin `a-schema`.target_table truncateLoadTable ---
TRUNCATE TABLE `flow_temp_load_table_shard-range_0_target_table`;
--- End `a-schema`.target_table truncateLoadTable ---

--- Begin `a-schema`.target_table truncateStoreTable ---
TRUNCATE TABLE `flow_temp_store_table_shard-range_0_target_table`;
--- End `a-schema`.target_table truncateStoreTable ---

--- Begin `a-schema`.target_table dropLoadTable ---
DROP TABLE IF EXISTS `flow_temp_load_table_shard-range_0_target_table`
--- End `a-schema`.target_table dropLoadTable ---

--- Begin `a-schema`.target_table dropStoreTable ---
DROP TABLE IF EXISTS `flow_temp_store_table_shard-range_0_target_table`
--- End `a-schema`.target_table dropStoreTable ---

--- Begin `a-schema`.target_table mergeInto ---
	MERGE INTO `a-schema`.target_table AS l
	USING `flow_temp_store_table_shard-range_0_target_table` AS r
	ON l.key1 = r.key1::BIGINT AND l.key2 = r.key2::BOOLEAN
	AND r._metadata_file_name IN (%s)
	WHEN MATCHED AND r.flow_document <=> NULL THEN
		DELETE
	WHEN MATCHED THEN
		UPDATE SET l.boolean = r.boolean::BOOLEAN, l.integer = r.integer::BIGINT, l.number = r.number::DOUBLE, l.string = r.string::STRING, l.flow_document = r.flow_document
	WHEN NOT MATCHED THEN
		INSERT (key1, key2, boolean, integer, number, string, flow_document)
		VALUES (r.key1::BIGINT, r.key2::BOOLEAN, r.boolean::BOOLEAN, r.integer::BIGINT, r.number::DOUBLE, r.string::STRING, r.flow_document::STRING);
--- End `a-schema`.target_table mergeInto ---

--- Begin `a-schema`.target_table copyIntoDirect ---
	COPY INTO `a-schema`.target_table FROM (
    SELECT
		key1::BIGINT, key2::BOOLEAN, boolean::BOOLEAN, integer::BIGINT, number::DOUBLE, string::STRING, flow_document::STRING
  FROM 'test-staging-path'
	)
  FILEFORMAT = JSON
  FILES = (%s)
  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )
	COPY_OPTIONS ( 'mergeSchema' = 'true' )
  ;
--- End `a-schema`.target_table copyIntoDirect ---

--- Begin `a-schema`.target_table copyIntoStore ---
	COPY INTO `flow_temp_store_table_shard-range_0_target_table` FROM (
    SELECT
		_metadata.file_name as _metadata_file_name,
		key1::BIGINT, key2::BOOLEAN, boolean::BOOLEAN, integer::BIGINT, number::DOUBLE, string::STRING, flow_document::STRING
    FROM 'test-staging-path'
	)
  FILEFORMAT = JSON
  FILES = (%s)
  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'primitivesAsString' = 'true', 'ignoreMissingFiles' = 'false' )
	COPY_OPTIONS ( 'mergeSchema' = 'true' )
  ;
--- End `a-schema`.target_table copyIntoStore ---

--- Begin `a-schema`.target_table copyIntoLoad ---
	COPY INTO `flow_temp_load_table_shard-range_0_target_table` FROM (
    SELECT
      key1::BIGINT, key2::BOOLEAN
    FROM 'test-staging-path'
  )
  FILEFORMAT = JSON
  FILES = (%s)
  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )
	COPY_OPTIONS ( 'mergeSchema' = 'true' )
  ;
--- End `a-schema`.target_table copyIntoLoad ---

--- Begin `a-schema`.target_table createTargetTable ---
CREATE TABLE IF NOT EXISTS `a-schema`.target_table (
  key1 BIGINT NOT NULL COMMENT 'auto-generated projection of JSON at: /key1 with inferred types: [integer]',
  key2 BOOLEAN NOT NULL COMMENT 'auto-generated projection of JSON at: /key2 with inferred types: [boolean]',
  boolean BOOLEAN COMMENT 'auto-generated projection of JSON at: /boolean with inferred types: [boolean]',
  integer BIGINT COMMENT 'auto-generated projection of JSON at: /integer with inferred types: [integer]',
  number DOUBLE COMMENT 'auto-generated projection of JSON at: /number with inferred types: [number]',
  string STRING COMMENT 'auto-generated projection of JSON at: /string with inferred types: [string]',
  flow_document STRING NOT NULL COMMENT 'auto-generated projection of JSON at:  with inferred types: [object]'
) COMMENT 'Generated for materialization test/sqlite of collection key/value';
--- End `a-schema`.target_table createTargetTable ---

--- Begin `a-schema`.target_table replaceTargetTable ---
CREATE OR REPLACE TABLE `a-schema`.target_table (
  key1 BIGINT NOT NULL COMMENT 'auto-generated projection of JSON at: /key1 with inferred types: [integer]',
  key2 BOOLEAN NOT NULL COMMENT 'auto-generated projection of JSON at: /key2 with inferred types: [boolean]',
  boolean BOOLEAN COMMENT 'auto-generated projection of JSON at: /boolean with inferred types: [boolean]',
  integer BIGINT COMMENT 'auto-generated projection of JSON at: /integer with inferred types: [integer]',
  number DOUBLE COMMENT 'auto-generated projection of JSON at: /number with inferred types: [number]',
  string STRING COMMENT 'auto-generated projection of JSON at: /string with inferred types: [string]',
  flow_document STRING NOT NULL COMMENT 'auto-generated projection of JSON at:  with inferred types: [object]'
) COMMENT 'Generated for materialization test/sqlite of collection key/value';
--- End `a-schema`.target_table replaceTargetTable ---

--- Begin `default`.`Delta Updates` createLoadTable ---
CREATE TABLE IF NOT EXISTS `flow_temp_load_table_shard-range_1_Delta Updates` (
	`theKey` STRING NOT NULL
);
--- End `default`.`Delta Updates` createLoadTable ---

--- Begin `default`.`Delta Updates` createStoreTable ---
CREATE TABLE IF NOT EXISTS `flow_temp_store_table_shard-range_1_Delta Updates` (
	`theKey` STRING NOT NULL,
	`aValue` BIGINT
);
--- End `default`.`Delta Updates` createStoreTable ---

--- Begin `default`.`Delta Updates` loadQuery ---
SELECT -1, ""
--- End `default`.`Delta Updates` loadQuery ---

--- Begin `default`.`Delta Updates` truncateLoadTable ---
TRUNCATE TABLE `flow_temp_load_table_shard-range_1_Delta Updates`;
--- End `default`.`Delta Updates` truncateLoadTable ---

--- Begin `default`.`Delta Updates` truncateStoreTable ---
TRUNCATE TABLE `flow_temp_store_table_shard-range_1_Delta Updates`;
--- End `default`.`Delta Updates` truncateStoreTable ---

--- Begin `default`.`Delta Updates` dropLoadTable ---
DROP TABLE IF EXISTS `flow_temp_load_table_shard-range_1_Delta Updates`
--- End `default`.`Delta Updates` dropLoadTable ---

--- Begin `default`.`Delta Updates` dropStoreTable ---
DROP TABLE IF EXISTS `flow_temp_store_table_shard-range_1_Delta Updates`
--- End `default`.`Delta Updates` dropStoreTable ---

--- Begin `default`.`Delta Updates` mergeInto ---
	MERGE INTO `default`.`Delta Updates` AS l
	USING `flow_temp_store_table_shard-range_1_Delta Updates` AS r
	ON l.`theKey` = r.`theKey`::STRING
	AND r._metadata_file_name IN (%s)
	WHEN MATCHED THEN
		UPDATE SET l.`aValue` = r.`aValue`::BIGINT
	WHEN NOT MATCHED THEN
		INSERT (`theKey`, `aValue`)
		VALUES (r.`theKey`::STRING, r.`aValue`::BIGINT);
--- End `default`.`Delta Updates` mergeInto ---

--- Begin `default`.`Delta Updates` copyIntoDirect ---
	COPY INTO `default`.`Delta Updates` FROM (
    SELECT
		`theKey`::STRING, `aValue`::BIGINT
  FROM 'test-staging-path'
	)
  FILEFORMAT = JSON
  FILES = (%s)
  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )
	COPY_OPTIONS ( 'mergeSchema' = 'true' )
  ;
--- End `default`.`Delta Updates` copyIntoDirect ---

--- Begin `default`.`Delta Updates` copyIntoStore ---
	COPY INTO `flow_temp_store_table_shard-range_1_Delta Updates` FROM (
    SELECT
		_metadata.file_name as _metadata_file_name,
		`theKey`::STRING, `aValue`::BIGINT
    FROM 'test-staging-path'
	)
  FILEFORMAT = JSON
  FILES = (%s)
  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'primitivesAsString' = 'true', 'ignoreMissingFiles' = 'false' )
	COPY_OPTIONS ( 'mergeSchema' = 'true' )
  ;
--- End `default`.`Delta Updates` copyIntoStore ---

--- Begin `default`.`Delta Updates` copyIntoLoad ---
	COPY INTO `flow_temp_load_table_shard-range_1_Delta Updates` FROM (
    SELECT
      `theKey`::STRING
    FROM 'test-staging-path'
  )
  FILEFORMAT = JSON
  FILES = (%s)
  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )
	COPY_OPTIONS ( 'mergeSchema' = 'true' )
  ;
--- End `default`.`Delta Updates` copyIntoLoad ---

--- Begin `default`.`Delta Updates` createTargetTable ---
CREATE TABLE IF NOT EXISTS `default`.`Delta Updates` (
  `theKey` STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /theKey with inferred types: [string]',
  `aValue` BIGINT COMMENT 'A super-awesome value.
auto-generated projection of JSON at: /aValue with inferred types: [integer]'
) COMMENT 'Generated for materialization test/sqlite of collection delta/updates';
--- End `default`.`Delta Updates` createTargetTable ---

--- Begin `default`.`Delta Updates` replaceTargetTable ---
CREATE OR REPLACE TABLE `default`.`Delta Updates` (
  `theKey` STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /theKey with inferred types: [string]',
  `aValue` BIGINT COMMENT 'A super-awesome value.
auto-generated projection of JSON at: /aValue with inferred types: [integer]'
) COMMENT 'Generated for materialization test/sqlite of collection delta/updates';
--- End `default`.`Delta Updates` replaceTargetTable ---

--- Begin alter table add columns ---
ALTER TABLE `a-schema`.target_table ADD COLUMN
	first_new_column STRING,
	second_new_column BOOL;
--- End alter table add columns ---

--- Begin target_table_no_values_materialized mergeInto ---
	MERGE INTO ``.target_table_no_values_materialized AS l
	USING `flow_temp_store_table_shard-range_2_target_table_no_values_materialized` AS r
	ON l.key1 = r.key1::BIGINT AND l.key2 = r.key2::BOOLEAN
	AND r._metadata_file_name IN (%s)
	WHEN MATCHED AND r.flow_document <=> NULL THEN
		DELETE
	WHEN MATCHED THEN
		UPDATE SET l.flow_document = r.flow_document
	WHEN NOT MATCHED THEN
		INSERT (key1, key2, flow_document)
		VALUES (r.key1::BIGINT, r.key2::BOOLEAN, r.flow_document::STRING);
--- End target_table_no_values_materialized mergeInto ---


