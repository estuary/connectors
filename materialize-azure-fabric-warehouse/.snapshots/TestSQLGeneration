--- Begin "a-warehouse"."a-schema".key_value createTargetTable ---

CREATE TABLE "a-warehouse"."a-schema".key_value (
	key1 BIGINT,
	key2 BIT,
	"key!binary" VARBINARY(MAX),
	"array" VARCHAR(MAX),
	"binary" VARBINARY(MAX),
	"boolean" BIT,
	flow_published_at DATETIME2(6),
	"integer" BIGINT,
	"integerGt64Bit" DECIMAL(38,0),
	"integerWithUserDDL" DECIMAL(20),
	multiple VARCHAR(MAX),
	number FLOAT,
	"numberCastToString" VARCHAR(MAX),
	"object" VARCHAR(MAX),
	string VARCHAR(MAX),
	"stringInteger" DECIMAL(38,0),
	"stringInteger39Chars" VARCHAR(MAX),
	"stringInteger66Chars" VARCHAR(MAX),
	"stringNumber" FLOAT,
	flow_document VARCHAR(MAX)
);
--- End "a-warehouse"."a-schema".key_value createTargetTable ---

--- Begin "a-warehouse"."a-schema".delta_updates createTargetTable ---

CREATE TABLE "a-warehouse"."a-schema".delta_updates (
	"theKey" VARCHAR(MAX),
	"aValue" BIGINT,
	flow_published_at DATETIME2(6)
);
--- End "a-warehouse"."a-schema".delta_updates createTargetTable ---

--- Begin alter table add columns ---

ALTER TABLE "a-warehouse"."a-schema".key_value ADD
	first_new_column STRING,
	second_new_column BOOL;
--- End alter table add columns ---

--- Begin Fence Update ---
UPDATE "path"."to".checkpoints
	SET   "checkpoint" = 'AAECAwQFBgcICQ=='
	WHERE materialization = 'some/Materialization'
	AND   key_begin = 1122867
	AND   key_end   = 4293844428
	AND   fence     = 123;
--- End Fence Update ---

--- Begin "a-warehouse"."a-schema".key_value storeCopyIntoFromStagedQuery ---
CREATE TABLE flow_temp_table_store_0 (
	key1 BIGINT,
	key2 BIT,
	"key!binary" VARCHAR(MAX),
	"array" VARCHAR(MAX),
	"binary" VARCHAR(MAX),
	"boolean" BIT,
	flow_published_at DATETIME2(6),
	"integer" BIGINT,
	"integerGt64Bit" DECIMAL(38,0),
	"integerWithUserDDL" DECIMAL(20),
	multiple VARCHAR(MAX),
	number FLOAT,
	"numberCastToString" VARCHAR(MAX),
	"object" VARCHAR(MAX),
	string VARCHAR(MAX),
	"stringInteger" DECIMAL(38,0),
	"stringInteger39Chars" VARCHAR(MAX),
	"stringInteger66Chars" VARCHAR(MAX),
	"stringNumber" FLOAT,
	flow_document VARCHAR(MAX)
);

COPY INTO flow_temp_table_store_0
(key1, key2, "key!binary", "array", "binary", "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document)
FROM 'https://some/file1, https://some/file2'
WITH (
    FILE_TYPE = 'CSV',
    COMPRESSION = 'Gzip',
    CREDENTIAL = (IDENTITY='Storage Account Key', SECRET='some-storage-account-key')
);

INSERT INTO "a-warehouse"."a-schema".key_value (key1, key2, "key!binary", "array", "binary", "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document)
SELECT key1, key2, BASE64_DECODE("key!binary"), "array", BASE64_DECODE("binary"), "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document
FROM flow_temp_table_store_0;

DROP TABLE flow_temp_table_store_0;
--- End "a-warehouse"."a-schema".key_value storeCopyIntoFromStagedQuery ---

--- Begin "a-warehouse"."a-schema".key_value storeCopyIntoDirectQuery ---
COPY INTO "a-warehouse"."a-schema".key_value
(key1, key2, "key!binary", "array", "binary", "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document)
FROM 'https://some/file1, https://some/file2'
WITH (
	FILE_TYPE = 'CSV',
	COMPRESSION = 'Gzip',
	CREDENTIAL = (IDENTITY='Storage Account Key', SECRET='some-storage-account-key')
);
--- End "a-warehouse"."a-schema".key_value storeCopyIntoDirectQuery ---

--- Begin "a-warehouse"."a-schema".delta_updates storeCopyIntoFromStagedQuery ---
CREATE TABLE flow_temp_table_store_1 (
	"theKey" VARCHAR(MAX),
	"aValue" BIGINT,
	flow_published_at DATETIME2(6)
);

COPY INTO flow_temp_table_store_1
("theKey", "aValue", flow_published_at)
FROM 'https://some/file1, https://some/file2'
WITH (
    FILE_TYPE = 'CSV',
    COMPRESSION = 'Gzip',
    CREDENTIAL = (IDENTITY='Storage Account Key', SECRET='some-storage-account-key')
);

INSERT INTO "a-warehouse"."a-schema".delta_updates ("theKey", "aValue", flow_published_at)
SELECT "theKey", "aValue", flow_published_at
FROM flow_temp_table_store_1;

DROP TABLE flow_temp_table_store_1;
--- End "a-warehouse"."a-schema".delta_updates storeCopyIntoFromStagedQuery ---

--- Begin "a-warehouse"."a-schema".delta_updates storeCopyIntoDirectQuery ---
COPY INTO "a-warehouse"."a-schema".delta_updates
("theKey", "aValue", flow_published_at)
FROM 'https://some/file1, https://some/file2'
WITH (
	FILE_TYPE = 'CSV',
	COMPRESSION = 'Gzip',
	CREDENTIAL = (IDENTITY='Storage Account Key', SECRET='some-storage-account-key')
);
--- End "a-warehouse"."a-schema".delta_updates storeCopyIntoDirectQuery ---

--- Begin "a-warehouse"."a-schema".key_value createLoadTable ---
CREATE TABLE flow_temp_table_load_0 (
	key1 BIGINT,
	key2 BIT,
	"key!binary" VARCHAR(MAX)
);

COPY INTO flow_temp_table_load_0
(key1, key2, "key!binary")
FROM 'https://some/file1,https://some/file2'
WITH (
    FILE_TYPE = 'CSV',
    COMPRESSION = 'Gzip',
    CREDENTIAL = (IDENTITY='Storage Account Key', SECRET='some-storage-account-key')
);
--- End "a-warehouse"."a-schema".key_value createLoadTable ---

--- Begin "a-warehouse"."a-schema".key_value loadQuery ---
SELECT 0, r.flow_document
FROM flow_temp_table_load_0 AS l
JOIN "a-warehouse"."a-schema".key_value AS r
	 ON  l.key1= r.key1
	 AND l.key2= r.key2
	 AND BASE64_DECODE(l."key!binary")= r."key!binary"
--- End "a-warehouse"."a-schema".key_value loadQuery ---

--- Begin "a-warehouse"."a-schema".key_value dropLoadTable ---
DROP TABLE flow_temp_table_load_0;--- End "a-warehouse"."a-schema".key_value dropLoadTable ---

--- Begin "a-warehouse"."a-schema".key_value storeMergeQuery ---
CREATE TABLE flow_temp_table_store_0 (
	key1 BIGINT,
	key2 BIT,
	"key!binary" VARCHAR(MAX),
	"array" VARCHAR(MAX),
	"binary" VARCHAR(MAX),
	"boolean" BIT,
	flow_published_at DATETIME2(6),
	"integer" BIGINT,
	"integerGt64Bit" DECIMAL(38,0),
	"integerWithUserDDL" DECIMAL(20),
	multiple VARCHAR(MAX),
	number FLOAT,
	"numberCastToString" VARCHAR(MAX),
	"object" VARCHAR(MAX),
	string VARCHAR(MAX),
	"stringInteger" DECIMAL(38,0),
	"stringInteger39Chars" VARCHAR(MAX),
	"stringInteger66Chars" VARCHAR(MAX),
	"stringNumber" FLOAT,
	flow_document VARCHAR(MAX)
);

COPY INTO flow_temp_table_store_0
(key1, key2, "key!binary", "array", "binary", "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document)
FROM 'https://some/file1, https://some/file2'
WITH (
    FILE_TYPE = 'CSV',
    COMPRESSION = 'Gzip',
    CREDENTIAL = (IDENTITY='Storage Account Key', SECRET='some-storage-account-key')
);

DELETE r
FROM "a-warehouse"."a-schema".key_value AS r
INNER JOIN flow_temp_table_store_0 AS l
	 ON  l.key1 = r.key1
	 AND l.key2 = r.key2
	 AND BASE64_DECODE(l."key!binary") = r."key!binary";

INSERT INTO "a-warehouse"."a-schema".key_value (key1, key2, "key!binary", "array", "binary", "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document)
SELECT key1, key2, BASE64_DECODE("key!binary"), "array", BASE64_DECODE("binary"), "boolean", flow_published_at, "integer", "integerGt64Bit", "integerWithUserDDL", multiple, number, "numberCastToString", "object", string, "stringInteger", "stringInteger39Chars", "stringInteger66Chars", "stringNumber", flow_document
FROM flow_temp_table_store_0
WHERE flow_document <> '"delete"';

DROP TABLE flow_temp_table_store_0;
--- End "a-warehouse"."a-schema".key_value storeMergeQuery ---

--- Begin createMigrationTable
CREATE TABLE some_table_tmp AS SELECT
	not_migrated_column,
	CAST(is_migrated_column AS VARCHAR(MAX)) AS is_migrated_column,
	another_not_migrated_column,
	CAST(CASE WHEN migrated_boolean_column = 1 THEN 'true' WHEN migrated_boolean_column = 0 THEN 'false' ELSE NULL END AS VARCHAR(MAX)) AS migrated_boolean_column,
	yet_another_not_migrated_column
	FROM some_table;
--- End createMigrationTable ---


