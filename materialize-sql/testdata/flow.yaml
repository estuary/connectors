collections:
  key/value:
    schema:
      type: object
      properties:
        key1: { type: integer }
        key2: { type: boolean }
        key!binary: { type: string, contentEncoding: base64 }
        array: { type: array }
        object: { type: object }
        binary: { type: string, contentEncoding: base64 }
        boolean: { type: boolean }
        multiple: { type: [integer, object, boolean] }
        string: { type: string }
        integer: { type: integer }
        stringInteger: { type: [integer, string], format: integer }
        number: { type: number }
        stringNumber: { type: [number, string], format: number }
      required: [key1, key2, key!binary]
    key: [/key1, /key2, /key!binary]

  delta/updates:
    schema:
      type: object
      properties:
        theKey: { type: string }
        aValue:
          type: integer
          description: A super-awesome value.
      required: [theKey]
    key: [/theKey]

materializations:
  test/sqlite:
    endpoint:
      connector:
        image: ghcr.io/estuary/materialize-sqlite:dev
        config: {}
    bindings:
      - source: key/value
        resource: { table: key_value }
        fields:
          recommended: true
          include:
            object: {}
            multiple: {}

      - source: delta/updates
        resource: { table: delta_updates }
