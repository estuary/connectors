--- Begin projectID.dataset.target_table tempTableName ---
flow_temp_table_0--- End projectID.dataset.target_table tempTableName ---

--- Begin projectID.dataset.target_table createTargetTable ---
CREATE TABLE IF NOT EXISTS projectID.dataset.target_table (
		key1 INT64,
		key2 BOOL,
		boolean BOOL,
		integer INT64,
		string STRING,
		`defAULT` STRING,
		number BIGNUMERIC,
		person_place_ STRING,
		`source.name` STRING,
		`with-dash` STRING,
		flow_document STRING
)
CLUSTER BY key1, key2, boolean, integer;
--- End projectID.dataset.target_table createTargetTable ---

--- Begin projectID.dataset.target_table loadQuery ---
SELECT 0, l.flow_document
	FROM projectID.dataset.target_table AS l
	JOIN flow_temp_table_0 AS r
		 ON l.key1 is not distinct from r.key1
		 AND l.key2 is not distinct from r.key2
		 AND l.boolean is not distinct from r.boolean
		 AND l.integer is not distinct from r.integer
		 AND l.string is not distinct from r.string

--- End projectID.dataset.target_table loadQuery ---

--- Begin projectID.dataset.target_table storeInsert ---
INSERT INTO projectID.dataset.target_table (key1, key2, boolean, integer, string, `defAULT`, number, person_place_, `source.name`, `with-dash`, flow_document)
SELECT key1, key2, boolean, integer, string, `defAULT`, number, person_place_, `source.name`, `with-dash`, flow_document FROM flow_temp_table_0;
--- End projectID.dataset.target_table storeInsert ---

--- Begin projectID.dataset.target_table storeUpdate ---
MERGE INTO projectID.dataset.target_table AS l
USING flow_temp_table_0 AS r
ON l.key1 = r.key1 AND l.key2 = r.key2 AND l.boolean = r.boolean AND l.integer = r.integer AND l.string = r.string
WHEN MATCHED AND r.flow_document IS NULL THEN
	DELETE
WHEN MATCHED THEN
	UPDATE SET l.`defAULT` = r.`defAULT`, l.number = r.number, l.person_place_ = r.person_place_, l.`source.name` = r.`source.name`, l.`with-dash` = r.`with-dash`, l.flow_document = r.flow_document
WHEN NOT MATCHED THEN
	INSERT (key1, key2, boolean, integer, string, `defAULT`, number, person_place_, `source.name`, `with-dash`, flow_document)
	VALUES (r.key1, r.key2, r.boolean, r.integer, r.string, r.`defAULT`, r.number, r.person_place_, r.`source.name`, r.`with-dash`, r.flow_document);
--- End projectID.dataset.target_table storeUpdate ---

--- Begin target_table_no_values_materialized storeUpdate ---
MERGE INTO projectID.dataset.target_table_no_values_materialized AS l
USING flow_temp_table_1 AS r
ON l.key1 = r.key1 AND l.key2 = r.key2
WHEN MATCHED AND r.flow_document IS NULL THEN
	DELETE
WHEN MATCHED THEN
	UPDATE SET l.flow_document = r.flow_document
WHEN NOT MATCHED THEN
	INSERT (key1, key2, flow_document)
	VALUES (r.key1, r.key2, r.flow_document);
--- End target_table_no_values_materialized storeUpdate ---

--- Begin Fence Install ---

-- Our desired fence
DECLARE vMaterialization STRING DEFAULT 'some/Materialization';
DECLARE vKeyBegin INT64 DEFAULT 1122867;
DECLARE vKeyEnd INT64 DEFAULT 4293844428;

-- The current values
DECLARE curFence INT64;
DECLARE curKeyBegin INT64;
DECLARE curKeyEnd INT64;
DECLARE curCheckpoint STRING;

BEGIN TRANSACTION;

-- Increment the fence value of _any_ checkpoint which overlaps our key range.
UPDATE project.dataset.checkpoints
	SET fence=fence+1
	WHERE materialization = vMaterialization
	AND key_end >= vKeyBegin
	AND key_begin <= vKeyEnd;

-- Read the checkpoint with the narrowest [key_begin, key_end] which fully overlaps our range.
SET (curFence, curKeyBegin, curKeyEnd, curCheckpoint) = (
	SELECT AS STRUCT fence, key_begin, key_end, checkpoint
		FROM project.dataset.checkpoints
		WHERE materialization = vMaterialization
		AND key_begin <= vKeyBegin
		AND key_end >= vKeyEnd
		ORDER BY key_end - key_begin ASC
		LIMIT 1
);

-- Create a new fence if none exists.
IF curFence IS NULL THEN
	SET curFence = 123;
	SET curKeyBegin = 1;
	SET curKeyEnd = 0;
	SET curCheckpoint = 'AAECAwQFBgcICQ==';
END IF;

-- If any of the key positions don't line up, create a new fence.
-- Either it's new or we are starting a split shard.
IF vKeyBegin <> curKeyBegin OR vKeyEnd <> curKeyEnd THEN
	INSERT INTO project.dataset.checkpoints (materialization, key_begin, key_end, fence, checkpoint)
	VALUES (vMaterialization, vKeyBegin, vKeyEnd, curFence, curCheckpoint);
END IF;

COMMIT TRANSACTION;

-- Get the current value
SELECT curFence AS fence, curCheckpoint AS checkpoint;
--- End Fence Install ---
--- Begin Fence Update ---

IF (
	SELECT fence
	FROM project.dataset.checkpoints
	WHERE materialization='some/Materialization' AND key_begin=1122867 AND key_end=4293844428 AND fence=123
) IS NULL THEN
	RAISE USING MESSAGE = 'This instance was fenced off by another';
END IF;

UPDATE project.dataset.checkpoints
	SET checkpoint='AAECAwQFBgcICQ=='
	WHERE materialization='some/Materialization'
	AND key_begin=1122867
	AND key_end=4293844428
	AND fence=123;
--- End Fence Update ---

