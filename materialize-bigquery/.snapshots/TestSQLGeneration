--- Begin projectID.dataset.key_value createTargetTable ---
CREATE TABLE IF NOT EXISTS projectID.dataset.key_value (
		key1 INTEGER NOT NULL,
		key2 BOOLEAN NOT NULL,
		key_binary STRING NOT NULL,
		`array` STRING,
		binary STRING,
		boolean BOOLEAN,
		flow_published_at TIMESTAMP NOT NULL,
		integer INTEGER,
		integerGt64Bit BIGNUMERIC(38,0),
		integerWithUserDDL DECIMAL(20),
		multiple JSON,
		number FLOAT64,
		numberCastToString STRING,
		object STRING,
		string STRING,
		stringInteger BIGNUMERIC(38,0),
		stringInteger39Chars STRING,
		stringInteger66Chars STRING,
		stringNumber FLOAT64,
		flow_document STRING NOT NULL
)
CLUSTER BY key1, key2, key_binary;
--- End projectID.dataset.key_value createTargetTable ---

--- Begin projectID.dataset.delta_updates createTargetTable ---
CREATE TABLE IF NOT EXISTS projectID.dataset.delta_updates (
		theKey STRING NOT NULL,
		aValue INTEGER,
		flow_published_at TIMESTAMP NOT NULL
)
CLUSTER BY theKey;
--- End projectID.dataset.delta_updates createTargetTable ---

--- Begin projectID.dataset.key_value loadQuery ---
SELECT 0, l.flow_document
	FROM projectID.dataset.key_value AS l
	JOIN flow_temp_table_0 AS r
		 ON l.key1 = r.c0
		 AND l.key2 = r.c1
		 AND l.key_binary = r.c2

--- End projectID.dataset.key_value loadQuery ---

--- Begin projectID.dataset.delta_updates loadQuery ---

SELECT -1, NULL LIMIT 0

--- End projectID.dataset.delta_updates loadQuery ---

--- Begin projectID.dataset.key_value storeInsert ---
INSERT INTO projectID.dataset.key_value (key1, key2, key_binary, `array`, binary, boolean, flow_published_at, integer, integerGt64Bit, integerWithUserDDL, multiple, number, numberCastToString, object, string, stringInteger, stringInteger39Chars, stringInteger66Chars, stringNumber, flow_document)
SELECT c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19 FROM flow_temp_table_0;
--- End projectID.dataset.key_value storeInsert ---

--- Begin projectID.dataset.delta_updates storeInsert ---
INSERT INTO projectID.dataset.delta_updates (theKey, aValue, flow_published_at)
SELECT c0, c1, c2 FROM flow_temp_table_1;
--- End projectID.dataset.delta_updates storeInsert ---

--- Begin projectID.dataset.key_value storeUpdate ---
MERGE INTO projectID.dataset.key_value AS l
USING flow_temp_table_0 AS r
ON l.key1 = r.c0 AND l.key2 = r.c1 AND l.key_binary = r.c2
WHEN MATCHED AND r.c19='"delete"' THEN
	DELETE
WHEN MATCHED THEN
	UPDATE SET l.`array` = r.c3, l.binary = r.c4, l.boolean = r.c5, l.flow_published_at = r.c6, l.integer = r.c7, l.integerGt64Bit = r.c8, l.integerWithUserDDL = r.c9, l.multiple = r.c10, l.number = r.c11, l.numberCastToString = r.c12, l.object = r.c13, l.string = r.c14, l.stringInteger = r.c15, l.stringInteger39Chars = r.c16, l.stringInteger66Chars = r.c17, l.stringNumber = r.c18, l.flow_document = r.c19
WHEN NOT MATCHED THEN
	INSERT (key1, key2, key_binary, `array`, binary, boolean, flow_published_at, integer, integerGt64Bit, integerWithUserDDL, multiple, number, numberCastToString, object, string, stringInteger, stringInteger39Chars, stringInteger66Chars, stringNumber, flow_document)
	VALUES (r.c0, r.c1, r.c2, r.c3, r.c4, r.c5, r.c6, r.c7, r.c8, r.c9, r.c10, r.c11, r.c12, r.c13, r.c14, r.c15, r.c16, r.c17, r.c18, r.c19);
--- End projectID.dataset.key_value storeUpdate ---

--- Begin projectID.dataset.delta_updates storeUpdate ---
MERGE INTO projectID.dataset.delta_updates AS l
USING flow_temp_table_1 AS r
ON l.theKey = r.c0
WHEN MATCHED THEN
	UPDATE SET l.aValue = r.c1, l.flow_published_at = r.c2
WHEN NOT MATCHED THEN
	INSERT (theKey, aValue, flow_published_at)
	VALUES (r.c0, r.c1, r.c2);
--- End projectID.dataset.delta_updates storeUpdate ---

--- Begin alter table add columns and drop not nulls ---
ALTER TABLE projectID.dataset.key_value
	ADD COLUMN first_new_column STRING,
	ADD COLUMN second_new_column BOOL;

ALTER TABLE projectID.dataset.key_value
	ALTER COLUMN first_required_column DROP NOT NULL,
	ALTER COLUMN second_required_column DROP NOT NULL;
--- End alter table add columns and drop not nulls ---

--- Begin alter table add columns ---
ALTER TABLE projectID.dataset.key_value
	ADD COLUMN first_new_column STRING,
	ADD COLUMN second_new_column BOOL;
--- End alter table add columns ---

--- Begin alter table drop not nulls ---
ALTER TABLE projectID.dataset.key_value
	ALTER COLUMN first_required_column DROP NOT NULL,
	ALTER COLUMN second_required_column DROP NOT NULL;
--- End alter table drop not nulls ---

--- Begin Fence Install ---

-- Our desired fence
DECLARE vMaterialization STRING DEFAULT 'some/Materialization';
DECLARE vKeyBegin INT64 DEFAULT 1122867;
DECLARE vKeyEnd INT64 DEFAULT 4293844428;

-- The current values
DECLARE curFence INT64;
DECLARE curKeyBegin INT64;
DECLARE curKeyEnd INT64;
DECLARE curCheckpoint STRING;

BEGIN TRANSACTION;

-- Increment the fence value of _any_ checkpoint which overlaps our key range.
UPDATE path.`to`.checkpoints
	SET fence=fence+1
	WHERE materialization = vMaterialization
	AND key_end >= vKeyBegin
	AND key_begin <= vKeyEnd;

-- Read the checkpoint with the narrowest [key_begin, key_end] which fully overlaps our range.
SET (curFence, curKeyBegin, curKeyEnd, curCheckpoint) = (
	SELECT AS STRUCT fence, key_begin, key_end, checkpoint
		FROM path.`to`.checkpoints
		WHERE materialization = vMaterialization
		AND key_begin <= vKeyBegin
		AND key_end >= vKeyEnd
		ORDER BY key_end - key_begin ASC
		LIMIT 1
);

-- Create a new fence if none exists.
IF curFence IS NULL THEN
	SET curFence = 123;
	SET curKeyBegin = 1;
	SET curKeyEnd = 0;
	SET curCheckpoint = 'AAECAwQFBgcICQ==';
END IF;

-- If any of the key positions don't line up, create a new fence.
-- Either it's new or we are starting a split shard.
IF vKeyBegin <> curKeyBegin OR vKeyEnd <> curKeyEnd THEN
	INSERT INTO path.`to`.checkpoints (materialization, key_begin, key_end, fence, checkpoint)
	VALUES (vMaterialization, vKeyBegin, vKeyEnd, curFence, curCheckpoint);
END IF;

COMMIT TRANSACTION;

-- Get the current value
SELECT curFence AS fence, curCheckpoint AS checkpoint;
--- End Fence Install ---

--- Begin Fence Update ---
IF (
	SELECT fence
	FROM path.`to`.checkpoints
	WHERE materialization='some/Materialization' AND key_begin=1122867 AND key_end=4293844428 AND fence=123
) IS NULL THEN
	RAISE USING MESSAGE = 'This instance was fenced off by another';
END IF;

UPDATE path.`to`.checkpoints
	SET checkpoint='AAECAwQFBgcICQ=='
	WHERE materialization='some/Materialization'
	AND key_begin=1122867
	AND key_end=4293844428
	AND fence=123;
--- End Fence Update ---


