Task: acmeCo/tests/materialize-snowflake

Resource: simple_standard
["applied.actionDescription", "\nCREATE TABLE IF NOT EXISTS simple_standard (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_standard IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS simple_delta (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_delta IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_delta.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\n\n\nCREATE TABLE IF NOT EXISTS not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" TEXT NOT NULL,\n\t_id TEXT NOT NULL,\n\tbinaryKey TEXT NOT NULL,\n\t\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" TEXT,\n\t\"$dollar$signs\" TEXT,\n\t\"123\" TEXT,\n\t\"123startsWithDigits\" TEXT,\n\tFIELDWITHDIFFERENTCAPS TEXT,\n\t\"a\"\"string`with`quote'characters\" TEXT,\n\t\"field with separated words\" TEXT,\n\t\"field-with-separated-words\" TEXT,\n\t\"field.with-separated_words\" TEXT,\n\t\"field.with.separated.words\" TEXT,\n\tfield_with_separated_words TEXT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tlongString TEXT,\n\t\"testing (%s)\" TEXT,\n\tunsignedBigint INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE not_simple IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/not-simple';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple._id IS 'auto-generated projection of JSON at: /_id with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.binaryKey IS 'auto-generated projection of JSON at: /binaryKey with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicField ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"$dollar$signs\" IS 'auto-generated projection of JSON at: /$dollar$signs with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123\" IS 'auto-generated projection of JSON at: /123 with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123startsWithDigits\" IS 'auto-generated projection of JSON at: /123startsWithDigits with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.FIELDWITHDIFFERENTCAPS IS 'auto-generated projection of JSON at: /FIELDWITHDIFFERENTCAPS with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"a\"\"string`with`quote'characters\" IS 'auto-generated projection of JSON at: /a\"string`with`quote''characters with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field with separated words\" IS 'auto-generated projection of JSON at: /field with separated words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field-with-separated-words\" IS 'auto-generated projection of JSON at: /field-with-separated-words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with-separated_words\" IS 'auto-generated projection of JSON at: /field.with-separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with.separated.words\" IS 'auto-generated projection of JSON at: /field.with.separated.words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.field_with_separated_words IS 'auto-generated projection of JSON at: /field_with_separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.longString IS 'auto-generated projection of JSON at: /longString with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"testing (%s)\" IS 'auto-generated projection of JSON at: /testing (%s) with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.unsignedBigint IS 'auto-generated projection of JSON at: /unsignedBigint with inferred types: [integer]';\nCOMMENT ON COLUMN not_simple.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS data_types (\n\tid INTEGER NOT NULL,\n\tarrayField VARIANT,\n\tboolField BOOLEAN,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tintField INTEGER,\n\tmultipleField VARIANT,\n\tnumField FLOAT,\n\tstringAndIntegerField INTEGER,\n\tstringAndNumberField FLOAT,\n\tstringDateField DATE,\n\tstringDateTimeField TIMESTAMP_LTZ,\n\tstringDurationField TEXT,\n\tstringEmailField TEXT,\n\tstringField TEXT,\n\tstringHostnameField TEXT,\n\tstringIntegerField INTEGER,\n\tstringIpv4Field TEXT,\n\tstringIpv6Field TEXT,\n\tstringIriField TEXT,\n\tstringIriReferenceField TEXT,\n\tstringJsonPointerField TEXT,\n\tstringMacAddr8Field TEXT,\n\tstringMacAddrField TEXT,\n\tstringNumberField FLOAT,\n\tstringRegexField TEXT,\n\tstringRelativeJsonPointerField TEXT,\n\tstringTimeField TEXT,\n\tstringUint32Field INTEGER,\n\tstringUint64Field INTEGER,\n\tstringUriField TEXT,\n\tstringUriReferenceField TEXT,\n\tstringUriTemplateField TEXT,\n\tstringUuidField TEXT,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE data_types IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/data-types';\nCOMMENT ON COLUMN data_types.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.arrayField IS 'auto-generated projection of JSON at: /arrayField with inferred types: [array]';\nCOMMENT ON COLUMN data_types.boolField IS 'auto-generated projection of JSON at: /boolField with inferred types: [boolean]';\nCOMMENT ON COLUMN data_types.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN data_types.intField IS 'auto-generated projection of JSON at: /intField with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.multipleField IS 'auto-generated projection of JSON at: /multipleField with inferred types: [integer object string]';\nCOMMENT ON COLUMN data_types.numField IS 'auto-generated projection of JSON at: /numField with inferred types: [number]';\nCOMMENT ON COLUMN data_types.stringAndIntegerField IS 'auto-generated projection of JSON at: /stringAndIntegerField with inferred types: [integer string]';\nCOMMENT ON COLUMN data_types.stringAndNumberField IS 'auto-generated projection of JSON at: /stringAndNumberField with inferred types: [number string]';\nCOMMENT ON COLUMN data_types.stringDateField IS 'auto-generated projection of JSON at: /stringDateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDateTimeField IS 'auto-generated projection of JSON at: /stringDateTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDurationField IS 'auto-generated projection of JSON at: /stringDurationField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringEmailField IS 'auto-generated projection of JSON at: /stringEmailField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringField IS 'auto-generated projection of JSON at: /stringField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringHostnameField IS 'auto-generated projection of JSON at: /stringHostnameField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIntegerField IS 'auto-generated projection of JSON at: /stringIntegerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv4Field IS 'auto-generated projection of JSON at: /stringIpv4Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv6Field IS 'auto-generated projection of JSON at: /stringIpv6Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriField IS 'auto-generated projection of JSON at: /stringIriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriReferenceField IS 'auto-generated projection of JSON at: /stringIriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringJsonPointerField IS 'auto-generated projection of JSON at: /stringJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddr8Field IS 'auto-generated projection of JSON at: /stringMacAddr8Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddrField IS 'auto-generated projection of JSON at: /stringMacAddrField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringNumberField IS 'auto-generated projection of JSON at: /stringNumberField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRegexField IS 'auto-generated projection of JSON at: /stringRegexField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRelativeJsonPointerField IS 'auto-generated projection of JSON at: /stringRelativeJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringTimeField IS 'auto-generated projection of JSON at: /stringTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint32Field IS 'auto-generated projection of JSON at: /stringUint32Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint64Field IS 'auto-generated projection of JSON at: /stringUint64Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriField IS 'auto-generated projection of JSON at: /stringUriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriReferenceField IS 'auto-generated projection of JSON at: /stringUriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriTemplateField IS 'auto-generated projection of JSON at: /stringUriTemplateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUuidField IS 'auto-generated projection of JSON at: /stringUuidField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n"]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nCOPY INTO data_types (\n\tid, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document\n) FROM (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"not_simple":{"Table":"not_simple","Query":"\nCOPY INTO not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document\n) FROM (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"7a60ee931eb4057c:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":6,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"63","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"737472656e677468656e","minStrValue":"4b72696e676c652773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":3605000000000,"minIntValue":3600000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nCOPY INTO simple_standard (\n\tid, \"_meta/op\", canary, flow_published_at, val, flow_document\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""}},"mergePatch":true}]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"not_simple":{"Table":"not_simple","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003e= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003c= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id \u003e= 'doc_001' AND l._id \u003c= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"d075ceace3972e7f:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":10,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"75","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"73706c617474657273","minStrValue":"616d7075746174696f6e2773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":10809000000000,"minIntValue":10800000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"}},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"PipeName":"","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","Table":"data_types","Version":"ffffffffffffffff"},"not_simple":{"PipeName":"","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" >= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" <= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id >= 'doc_001' AND l._id <= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","Table":"not_simple","Version":"ffffffffffffffff"},"simple_delta":{"PipeName":"","Query":"","StagedDir":"","StreamBlobs":[{"bdec_version":3,"blob_stats":{"build_duration_ms": "<build_duration_ms>","flush_start_ms": "<flush_start_ms>","upload_duration_ms": "<upload_duration_ms>"},"chunks":[{"channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"offset_token":"d075ceace3972e7f:0","row_sequencer":0}],"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","chunk_md5": "<chunk_md5>","chunk_start_offset":0,"database":"ESTUARY_DB","encryption_key_id": "<encryption_key_id>","eps":{"columns":{"\"_meta/op\"":{"collation":null,"columnId":2,"distinctValues":-1,"maxIntValue":0,"maxLength":1,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"75","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"63","nullCount":0},"CANARY":{"collation":null,"columnId":3,"distinctValues":-1,"maxIntValue":0,"maxLength":12,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"73706c617474657273","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"616d7075746174696f6e2773","nullCount":0},"FLOW_PUBLISHED_AT":{"collation":null,"columnId":4,"distinctValues":-1,"maxIntValue":10809000000000,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":10800000000000,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"ID":{"collation":null,"columnId":1,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"VAL":{"collation":null,"columnId":5,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0}},"rows":10},"first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA"}],"md5": "<md5>","path": "<path>"}],"Table":"","Version":""},"simple_standard":{"PipeName":"","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","Table":"simple_standard","Version":"ffffffffffffffff"}}}]

{"Name":"CANARY","Nullable":false,"Type":"TEXT"}
{"Name":"FLOW_DOCUMENT","Nullable":false,"Type":"VARIANT"}
{"Name":"FLOW_PUBLISHED_AT","Nullable":false,"Type":"TIMESTAMP_LTZ"}
{"Name":"ID","Nullable":false,"Type":"FIXED"}
{"Name":"VAL","Nullable":true,"Type":"FIXED"}
{"Name":"_meta/op","Nullable":false,"Type":"TEXT"}

Table Data:
{"CANARY":"glucose's","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"3a983b80-1deb-11b2-8000-071353030311"},"canary":"glucose's","id":10,"val":10},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:03-08:00","ID":10,"VAL":10,"_meta/op":"c"}
{"CANARY":"asteroid","FLOW_DOCUMENT":{"_meta":{"op":"d","uuid":"3b30d200-1deb-11b2-8000-071353030311"},"canary":"asteroid","id":11,"val":11},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:04-08:00","ID":11,"VAL":11,"_meta/op":"d"}
{"CANARY":"splatters","FLOW_DOCUMENT":{"_meta":{"op":"u","uuid":"3e2bc280-1deb-11b2-8000-071353030311"},"canary":"splatters","id":3,"val":3},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:09-08:00","ID":3,"VAL":3,"_meta/op":"u"}
{"CANARY":"strengthen","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"770f6b80-1dda-11b2-8000-071353030311"},"canary":"strengthen","id":4,"val":4},"FLOW_PUBLISHED_AT":"1969-12-31T17:00:03-08:00","ID":4,"VAL":4,"_meta/op":"c"}
{"CANARY":"Kringle's","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"77a80200-1dda-11b2-8000-071353030311"},"canary":"Kringle's","id":5,"val":5},"FLOW_PUBLISHED_AT":"1969-12-31T17:00:04-08:00","ID":5,"VAL":5,"_meta/op":"c"}
{"CANARY":"grosbeak's","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"78409880-1dda-11b2-8000-071353030311"},"canary":"grosbeak's","id":6,"val":6},"FLOW_PUBLISHED_AT":"1969-12-31T17:00:05-08:00","ID":6,"VAL":6,"_meta/op":"c"}
{"CANARY":"pieced","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"38ce7800-1deb-11b2-8000-071353030311"},"canary":"pieced","id":7,"val":7},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:00-08:00","ID":7,"VAL":7,"_meta/op":"c"}
{"CANARY":"roaches","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"39670e80-1deb-11b2-8000-071353030311"},"canary":"roaches","id":8,"val":8},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:01-08:00","ID":8,"VAL":8,"_meta/op":"c"}
{"CANARY":"devilish","FLOW_DOCUMENT":{"_meta":{"op":"c","uuid":"39ffa500-1deb-11b2-8000-071353030311"},"canary":"devilish","id":9,"val":9},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:02-08:00","ID":9,"VAL":9,"_meta/op":"c"}

Resource: simple_delta
["applied.actionDescription", "\nCREATE TABLE IF NOT EXISTS simple_standard (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_standard IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS simple_delta (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_delta IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_delta.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\n\n\nCREATE TABLE IF NOT EXISTS not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" TEXT NOT NULL,\n\t_id TEXT NOT NULL,\n\tbinaryKey TEXT NOT NULL,\n\t\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" TEXT,\n\t\"$dollar$signs\" TEXT,\n\t\"123\" TEXT,\n\t\"123startsWithDigits\" TEXT,\n\tFIELDWITHDIFFERENTCAPS TEXT,\n\t\"a\"\"string`with`quote'characters\" TEXT,\n\t\"field with separated words\" TEXT,\n\t\"field-with-separated-words\" TEXT,\n\t\"field.with-separated_words\" TEXT,\n\t\"field.with.separated.words\" TEXT,\n\tfield_with_separated_words TEXT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tlongString TEXT,\n\t\"testing (%s)\" TEXT,\n\tunsignedBigint INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE not_simple IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/not-simple';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple._id IS 'auto-generated projection of JSON at: /_id with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.binaryKey IS 'auto-generated projection of JSON at: /binaryKey with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicField ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"$dollar$signs\" IS 'auto-generated projection of JSON at: /$dollar$signs with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123\" IS 'auto-generated projection of JSON at: /123 with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123startsWithDigits\" IS 'auto-generated projection of JSON at: /123startsWithDigits with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.FIELDWITHDIFFERENTCAPS IS 'auto-generated projection of JSON at: /FIELDWITHDIFFERENTCAPS with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"a\"\"string`with`quote'characters\" IS 'auto-generated projection of JSON at: /a\"string`with`quote''characters with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field with separated words\" IS 'auto-generated projection of JSON at: /field with separated words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field-with-separated-words\" IS 'auto-generated projection of JSON at: /field-with-separated-words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with-separated_words\" IS 'auto-generated projection of JSON at: /field.with-separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with.separated.words\" IS 'auto-generated projection of JSON at: /field.with.separated.words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.field_with_separated_words IS 'auto-generated projection of JSON at: /field_with_separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.longString IS 'auto-generated projection of JSON at: /longString with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"testing (%s)\" IS 'auto-generated projection of JSON at: /testing (%s) with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.unsignedBigint IS 'auto-generated projection of JSON at: /unsignedBigint with inferred types: [integer]';\nCOMMENT ON COLUMN not_simple.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS data_types (\n\tid INTEGER NOT NULL,\n\tarrayField VARIANT,\n\tboolField BOOLEAN,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tintField INTEGER,\n\tmultipleField VARIANT,\n\tnumField FLOAT,\n\tstringAndIntegerField INTEGER,\n\tstringAndNumberField FLOAT,\n\tstringDateField DATE,\n\tstringDateTimeField TIMESTAMP_LTZ,\n\tstringDurationField TEXT,\n\tstringEmailField TEXT,\n\tstringField TEXT,\n\tstringHostnameField TEXT,\n\tstringIntegerField INTEGER,\n\tstringIpv4Field TEXT,\n\tstringIpv6Field TEXT,\n\tstringIriField TEXT,\n\tstringIriReferenceField TEXT,\n\tstringJsonPointerField TEXT,\n\tstringMacAddr8Field TEXT,\n\tstringMacAddrField TEXT,\n\tstringNumberField FLOAT,\n\tstringRegexField TEXT,\n\tstringRelativeJsonPointerField TEXT,\n\tstringTimeField TEXT,\n\tstringUint32Field INTEGER,\n\tstringUint64Field INTEGER,\n\tstringUriField TEXT,\n\tstringUriReferenceField TEXT,\n\tstringUriTemplateField TEXT,\n\tstringUuidField TEXT,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE data_types IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/data-types';\nCOMMENT ON COLUMN data_types.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.arrayField IS 'auto-generated projection of JSON at: /arrayField with inferred types: [array]';\nCOMMENT ON COLUMN data_types.boolField IS 'auto-generated projection of JSON at: /boolField with inferred types: [boolean]';\nCOMMENT ON COLUMN data_types.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN data_types.intField IS 'auto-generated projection of JSON at: /intField with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.multipleField IS 'auto-generated projection of JSON at: /multipleField with inferred types: [integer object string]';\nCOMMENT ON COLUMN data_types.numField IS 'auto-generated projection of JSON at: /numField with inferred types: [number]';\nCOMMENT ON COLUMN data_types.stringAndIntegerField IS 'auto-generated projection of JSON at: /stringAndIntegerField with inferred types: [integer string]';\nCOMMENT ON COLUMN data_types.stringAndNumberField IS 'auto-generated projection of JSON at: /stringAndNumberField with inferred types: [number string]';\nCOMMENT ON COLUMN data_types.stringDateField IS 'auto-generated projection of JSON at: /stringDateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDateTimeField IS 'auto-generated projection of JSON at: /stringDateTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDurationField IS 'auto-generated projection of JSON at: /stringDurationField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringEmailField IS 'auto-generated projection of JSON at: /stringEmailField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringField IS 'auto-generated projection of JSON at: /stringField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringHostnameField IS 'auto-generated projection of JSON at: /stringHostnameField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIntegerField IS 'auto-generated projection of JSON at: /stringIntegerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv4Field IS 'auto-generated projection of JSON at: /stringIpv4Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv6Field IS 'auto-generated projection of JSON at: /stringIpv6Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriField IS 'auto-generated projection of JSON at: /stringIriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriReferenceField IS 'auto-generated projection of JSON at: /stringIriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringJsonPointerField IS 'auto-generated projection of JSON at: /stringJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddr8Field IS 'auto-generated projection of JSON at: /stringMacAddr8Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddrField IS 'auto-generated projection of JSON at: /stringMacAddrField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringNumberField IS 'auto-generated projection of JSON at: /stringNumberField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRegexField IS 'auto-generated projection of JSON at: /stringRegexField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRelativeJsonPointerField IS 'auto-generated projection of JSON at: /stringRelativeJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringTimeField IS 'auto-generated projection of JSON at: /stringTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint32Field IS 'auto-generated projection of JSON at: /stringUint32Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint64Field IS 'auto-generated projection of JSON at: /stringUint64Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriField IS 'auto-generated projection of JSON at: /stringUriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriReferenceField IS 'auto-generated projection of JSON at: /stringUriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriTemplateField IS 'auto-generated projection of JSON at: /stringUriTemplateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUuidField IS 'auto-generated projection of JSON at: /stringUuidField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n"]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nCOPY INTO data_types (\n\tid, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document\n) FROM (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"not_simple":{"Table":"not_simple","Query":"\nCOPY INTO not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document\n) FROM (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"7a60ee931eb4057c:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":6,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"63","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"737472656e677468656e","minStrValue":"4b72696e676c652773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":3605000000000,"minIntValue":3600000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nCOPY INTO simple_standard (\n\tid, \"_meta/op\", canary, flow_published_at, val, flow_document\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""}},"mergePatch":true}]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"not_simple":{"Table":"not_simple","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003e= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003c= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id \u003e= 'doc_001' AND l._id \u003c= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"d075ceace3972e7f:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":10,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"75","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"73706c617474657273","minStrValue":"616d7075746174696f6e2773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":10809000000000,"minIntValue":10800000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"}},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"PipeName":"","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","Table":"data_types","Version":"ffffffffffffffff"},"not_simple":{"PipeName":"","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" >= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" <= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id >= 'doc_001' AND l._id <= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","Table":"not_simple","Version":"ffffffffffffffff"},"simple_delta":{"PipeName":"","Query":"","StagedDir":"","StreamBlobs":[{"bdec_version":3,"blob_stats":{"build_duration_ms": "<build_duration_ms>","flush_start_ms": "<flush_start_ms>","upload_duration_ms": "<upload_duration_ms>"},"chunks":[{"channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"offset_token":"d075ceace3972e7f:0","row_sequencer":0}],"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","chunk_md5": "<chunk_md5>","chunk_start_offset":0,"database":"ESTUARY_DB","encryption_key_id": "<encryption_key_id>","eps":{"columns":{"\"_meta/op\"":{"collation":null,"columnId":2,"distinctValues":-1,"maxIntValue":0,"maxLength":1,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"75","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"63","nullCount":0},"CANARY":{"collation":null,"columnId":3,"distinctValues":-1,"maxIntValue":0,"maxLength":12,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"73706c617474657273","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"616d7075746174696f6e2773","nullCount":0},"FLOW_PUBLISHED_AT":{"collation":null,"columnId":4,"distinctValues":-1,"maxIntValue":10809000000000,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":10800000000000,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"ID":{"collation":null,"columnId":1,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"VAL":{"collation":null,"columnId":5,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0}},"rows":10},"first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA"}],"md5": "<md5>","path": "<path>"}],"Table":"","Version":""},"simple_standard":{"PipeName":"","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","Table":"simple_standard","Version":"ffffffffffffffff"}}}]

{"Name":"CANARY","Nullable":false,"Type":"TEXT"}
{"Name":"FLOW_PUBLISHED_AT","Nullable":false,"Type":"TIMESTAMP_LTZ"}
{"Name":"ID","Nullable":false,"Type":"FIXED"}
{"Name":"VAL","Nullable":true,"Type":"FIXED"}
{"Name":"_meta/op","Nullable":false,"Type":"TEXT"}

Table Data:
{"CANARY":"glucose's","FLOW_PUBLISHED_AT":"1969-12-31T19:00:03-08:00","ID":10,"VAL":10,"_meta/op":"c"}
{"CANARY":"asteroid","FLOW_PUBLISHED_AT":"1969-12-31T19:00:04-08:00","ID":11,"VAL":11,"_meta/op":"d"}
{"CANARY":"penguin","FLOW_PUBLISHED_AT":"1969-12-31T19:00:05-08:00","ID":12,"VAL":12,"_meta/op":"c"}
{"CANARY":"penguin","FLOW_PUBLISHED_AT":"1969-12-31T19:00:06-08:00","ID":12,"VAL":12,"_meta/op":"d"}
{"CANARY":"amputation's","FLOW_PUBLISHED_AT":"1969-12-31T17:00:00-08:00","ID":1,"VAL":1,"_meta/op":"c"}
{"CANARY":"amputation's","FLOW_PUBLISHED_AT":"1969-12-31T19:00:07-08:00","ID":1,"VAL":1,"_meta/op":"d"}
{"CANARY":"armament's","FLOW_PUBLISHED_AT":"1969-12-31T17:00:01-08:00","ID":2,"VAL":2,"_meta/op":"c"}
{"CANARY":"armament's","FLOW_PUBLISHED_AT":"1969-12-31T19:00:08-08:00","ID":2,"VAL":2,"_meta/op":"d"}
{"CANARY":"splatters","FLOW_PUBLISHED_AT":"1969-12-31T17:00:02-08:00","ID":3,"VAL":3,"_meta/op":"c"}
{"CANARY":"splatters","FLOW_PUBLISHED_AT":"1969-12-31T19:00:09-08:00","ID":3,"VAL":3,"_meta/op":"u"}
{"CANARY":"strengthen","FLOW_PUBLISHED_AT":"1969-12-31T17:00:03-08:00","ID":4,"VAL":4,"_meta/op":"c"}
{"CANARY":"Kringle's","FLOW_PUBLISHED_AT":"1969-12-31T17:00:04-08:00","ID":5,"VAL":5,"_meta/op":"c"}
{"CANARY":"grosbeak's","FLOW_PUBLISHED_AT":"1969-12-31T17:00:05-08:00","ID":6,"VAL":6,"_meta/op":"c"}
{"CANARY":"pieced","FLOW_PUBLISHED_AT":"1969-12-31T19:00:00-08:00","ID":7,"VAL":7,"_meta/op":"c"}
{"CANARY":"roaches","FLOW_PUBLISHED_AT":"1969-12-31T19:00:01-08:00","ID":8,"VAL":8,"_meta/op":"c"}
{"CANARY":"devilish","FLOW_PUBLISHED_AT":"1969-12-31T19:00:02-08:00","ID":9,"VAL":9,"_meta/op":"c"}

Resource: not_simple
["applied.actionDescription", "\nCREATE TABLE IF NOT EXISTS simple_standard (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_standard IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS simple_delta (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_delta IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_delta.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\n\n\nCREATE TABLE IF NOT EXISTS not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" TEXT NOT NULL,\n\t_id TEXT NOT NULL,\n\tbinaryKey TEXT NOT NULL,\n\t\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" TEXT,\n\t\"$dollar$signs\" TEXT,\n\t\"123\" TEXT,\n\t\"123startsWithDigits\" TEXT,\n\tFIELDWITHDIFFERENTCAPS TEXT,\n\t\"a\"\"string`with`quote'characters\" TEXT,\n\t\"field with separated words\" TEXT,\n\t\"field-with-separated-words\" TEXT,\n\t\"field.with-separated_words\" TEXT,\n\t\"field.with.separated.words\" TEXT,\n\tfield_with_separated_words TEXT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tlongString TEXT,\n\t\"testing (%s)\" TEXT,\n\tunsignedBigint INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE not_simple IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/not-simple';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple._id IS 'auto-generated projection of JSON at: /_id with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.binaryKey IS 'auto-generated projection of JSON at: /binaryKey with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicField ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"$dollar$signs\" IS 'auto-generated projection of JSON at: /$dollar$signs with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123\" IS 'auto-generated projection of JSON at: /123 with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123startsWithDigits\" IS 'auto-generated projection of JSON at: /123startsWithDigits with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.FIELDWITHDIFFERENTCAPS IS 'auto-generated projection of JSON at: /FIELDWITHDIFFERENTCAPS with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"a\"\"string`with`quote'characters\" IS 'auto-generated projection of JSON at: /a\"string`with`quote''characters with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field with separated words\" IS 'auto-generated projection of JSON at: /field with separated words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field-with-separated-words\" IS 'auto-generated projection of JSON at: /field-with-separated-words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with-separated_words\" IS 'auto-generated projection of JSON at: /field.with-separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with.separated.words\" IS 'auto-generated projection of JSON at: /field.with.separated.words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.field_with_separated_words IS 'auto-generated projection of JSON at: /field_with_separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.longString IS 'auto-generated projection of JSON at: /longString with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"testing (%s)\" IS 'auto-generated projection of JSON at: /testing (%s) with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.unsignedBigint IS 'auto-generated projection of JSON at: /unsignedBigint with inferred types: [integer]';\nCOMMENT ON COLUMN not_simple.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS data_types (\n\tid INTEGER NOT NULL,\n\tarrayField VARIANT,\n\tboolField BOOLEAN,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tintField INTEGER,\n\tmultipleField VARIANT,\n\tnumField FLOAT,\n\tstringAndIntegerField INTEGER,\n\tstringAndNumberField FLOAT,\n\tstringDateField DATE,\n\tstringDateTimeField TIMESTAMP_LTZ,\n\tstringDurationField TEXT,\n\tstringEmailField TEXT,\n\tstringField TEXT,\n\tstringHostnameField TEXT,\n\tstringIntegerField INTEGER,\n\tstringIpv4Field TEXT,\n\tstringIpv6Field TEXT,\n\tstringIriField TEXT,\n\tstringIriReferenceField TEXT,\n\tstringJsonPointerField TEXT,\n\tstringMacAddr8Field TEXT,\n\tstringMacAddrField TEXT,\n\tstringNumberField FLOAT,\n\tstringRegexField TEXT,\n\tstringRelativeJsonPointerField TEXT,\n\tstringTimeField TEXT,\n\tstringUint32Field INTEGER,\n\tstringUint64Field INTEGER,\n\tstringUriField TEXT,\n\tstringUriReferenceField TEXT,\n\tstringUriTemplateField TEXT,\n\tstringUuidField TEXT,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE data_types IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/data-types';\nCOMMENT ON COLUMN data_types.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.arrayField IS 'auto-generated projection of JSON at: /arrayField with inferred types: [array]';\nCOMMENT ON COLUMN data_types.boolField IS 'auto-generated projection of JSON at: /boolField with inferred types: [boolean]';\nCOMMENT ON COLUMN data_types.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN data_types.intField IS 'auto-generated projection of JSON at: /intField with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.multipleField IS 'auto-generated projection of JSON at: /multipleField with inferred types: [integer object string]';\nCOMMENT ON COLUMN data_types.numField IS 'auto-generated projection of JSON at: /numField with inferred types: [number]';\nCOMMENT ON COLUMN data_types.stringAndIntegerField IS 'auto-generated projection of JSON at: /stringAndIntegerField with inferred types: [integer string]';\nCOMMENT ON COLUMN data_types.stringAndNumberField IS 'auto-generated projection of JSON at: /stringAndNumberField with inferred types: [number string]';\nCOMMENT ON COLUMN data_types.stringDateField IS 'auto-generated projection of JSON at: /stringDateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDateTimeField IS 'auto-generated projection of JSON at: /stringDateTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDurationField IS 'auto-generated projection of JSON at: /stringDurationField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringEmailField IS 'auto-generated projection of JSON at: /stringEmailField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringField IS 'auto-generated projection of JSON at: /stringField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringHostnameField IS 'auto-generated projection of JSON at: /stringHostnameField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIntegerField IS 'auto-generated projection of JSON at: /stringIntegerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv4Field IS 'auto-generated projection of JSON at: /stringIpv4Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv6Field IS 'auto-generated projection of JSON at: /stringIpv6Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriField IS 'auto-generated projection of JSON at: /stringIriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriReferenceField IS 'auto-generated projection of JSON at: /stringIriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringJsonPointerField IS 'auto-generated projection of JSON at: /stringJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddr8Field IS 'auto-generated projection of JSON at: /stringMacAddr8Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddrField IS 'auto-generated projection of JSON at: /stringMacAddrField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringNumberField IS 'auto-generated projection of JSON at: /stringNumberField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRegexField IS 'auto-generated projection of JSON at: /stringRegexField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRelativeJsonPointerField IS 'auto-generated projection of JSON at: /stringRelativeJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringTimeField IS 'auto-generated projection of JSON at: /stringTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint32Field IS 'auto-generated projection of JSON at: /stringUint32Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint64Field IS 'auto-generated projection of JSON at: /stringUint64Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriField IS 'auto-generated projection of JSON at: /stringUriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriReferenceField IS 'auto-generated projection of JSON at: /stringUriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriTemplateField IS 'auto-generated projection of JSON at: /stringUriTemplateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUuidField IS 'auto-generated projection of JSON at: /stringUuidField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n"]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nCOPY INTO data_types (\n\tid, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document\n) FROM (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"not_simple":{"Table":"not_simple","Query":"\nCOPY INTO not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document\n) FROM (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"7a60ee931eb4057c:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":6,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"63","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"737472656e677468656e","minStrValue":"4b72696e676c652773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":3605000000000,"minIntValue":3600000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nCOPY INTO simple_standard (\n\tid, \"_meta/op\", canary, flow_published_at, val, flow_document\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""}},"mergePatch":true}]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"not_simple":{"Table":"not_simple","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003e= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003c= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id \u003e= 'doc_001' AND l._id \u003c= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"d075ceace3972e7f:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":10,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"75","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"73706c617474657273","minStrValue":"616d7075746174696f6e2773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":10809000000000,"minIntValue":10800000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"}},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"PipeName":"","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","Table":"data_types","Version":"ffffffffffffffff"},"not_simple":{"PipeName":"","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" >= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" <= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id >= 'doc_001' AND l._id <= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","Table":"not_simple","Version":"ffffffffffffffff"},"simple_delta":{"PipeName":"","Query":"","StagedDir":"","StreamBlobs":[{"bdec_version":3,"blob_stats":{"build_duration_ms": "<build_duration_ms>","flush_start_ms": "<flush_start_ms>","upload_duration_ms": "<upload_duration_ms>"},"chunks":[{"channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"offset_token":"d075ceace3972e7f:0","row_sequencer":0}],"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","chunk_md5": "<chunk_md5>","chunk_start_offset":0,"database":"ESTUARY_DB","encryption_key_id": "<encryption_key_id>","eps":{"columns":{"\"_meta/op\"":{"collation":null,"columnId":2,"distinctValues":-1,"maxIntValue":0,"maxLength":1,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"75","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"63","nullCount":0},"CANARY":{"collation":null,"columnId":3,"distinctValues":-1,"maxIntValue":0,"maxLength":12,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"73706c617474657273","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"616d7075746174696f6e2773","nullCount":0},"FLOW_PUBLISHED_AT":{"collation":null,"columnId":4,"distinctValues":-1,"maxIntValue":10809000000000,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":10800000000000,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"ID":{"collation":null,"columnId":1,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"VAL":{"collation":null,"columnId":5,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0}},"rows":10},"first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA"}],"md5": "<md5>","path": "<path>"}],"Table":"","Version":""},"simple_standard":{"PipeName":"","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","Table":"simple_standard","Version":"ffffffffffffffff"}}}]

{"Name":" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ","Nullable":true,"Type":"TEXT"}
{"Name":" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ","Nullable":false,"Type":"TEXT"}
{"Name":"$dollar$signs","Nullable":true,"Type":"TEXT"}
{"Name":"123","Nullable":true,"Type":"TEXT"}
{"Name":"123startsWithDigits","Nullable":true,"Type":"TEXT"}
{"Name":"BINARYKEY","Nullable":false,"Type":"TEXT"}
{"Name":"FIELDWITHDIFFERENTCAPS","Nullable":true,"Type":"TEXT"}
{"Name":"FIELD_WITH_SEPARATED_WORDS","Nullable":true,"Type":"TEXT"}
{"Name":"FLOW_DOCUMENT","Nullable":false,"Type":"VARIANT"}
{"Name":"FLOW_PUBLISHED_AT","Nullable":false,"Type":"TIMESTAMP_LTZ"}
{"Name":"LONGSTRING","Nullable":true,"Type":"TEXT"}
{"Name":"UNSIGNEDBIGINT","Nullable":true,"Type":"FIXED"}
{"Name":"_ID","Nullable":false,"Type":"TEXT"}
{"Name":"a\"string`with`quote'characters","Nullable":true,"Type":"TEXT"}
{"Name":"field with separated words","Nullable":true,"Type":"TEXT"}
{"Name":"field-with-separated-words","Nullable":true,"Type":"TEXT"}
{"Name":"field.with-separated_words","Nullable":true,"Type":"TEXT"}
{"Name":"field.with.separated.words","Nullable":true,"Type":"TEXT"}
{"Name":"testing (%s)","Nullable":true,"Type":"TEXT"}

Table Data:
{" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ":"updated special chars"," ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ":"\\he \\ ' \" `llo`","$dollar$signs":"updated dollars","123":"updated 123","123startsWithDigits":"updated numbers","BINARYKEY":"SGVsbG8gV29ybGQ=","FIELDWITHDIFFERENTCAPS":"UPDATED UPPERCASE","FIELD_WITH_SEPARATED_WORDS":"updated underscores","FLOW_DOCUMENT":{" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ":"updated special chars"," ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ":"\\he \\ ' \" `llo`","$dollar$signs":"updated dollars","123":"updated 123","123startsWithDigits":"updated numbers","FIELDWITHDIFFERENTCAPS":"UPDATED UPPERCASE","_id":"doc_001","_meta":{"uuid":"3ec45900-1deb-11b2-8000-071353030311"},"a\"string`with`quote''characters":"updated quotes","binaryKey":"SGVsbG8gV29ybGQ=","field with separated words":"updated spaces","field-with-separated-words":"updated dashes","field.with-separated_words":"updated mixed","field.with.separated.words":"updated dots","fieldWithDifferentCaps":"updatedCamelCase","field_with_separated_words":"updated underscores","fieldwithdifferentcaps":"updated lowercase","longString":"Updated long string with more Unicode: üé≠üé®üé™üéØ Œ±Œ≤Œ≥Œ¥Œµ √±√°√©√≠√≥√∫ ‰∏≠ÊñáÊõ¥Êñ∞ÊµãËØï ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ◊¢◊ë◊®◊ô◊™ —Ä—É—Å—Å–∫–∏–π ÌïúÍµ≠Ïñ¥ Êó•Êú¨Ë™û","testing (%s)":"updated printf","unsignedBigint":18446744073709551615},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:10-08:00","LONGSTRING":"Updated long string with more Unicode: üé≠üé®üé™üéØ Œ±Œ≤Œ≥Œ¥Œµ √±√°√©√≠√≥√∫ ‰∏≠ÊñáÊõ¥Êñ∞ÊµãËØï ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ◊¢◊ë◊®◊ô◊™ —Ä—É—Å—Å–∫–∏–π ÌïúÍµ≠Ïñ¥ Êó•Êú¨Ë™û","UNSIGNEDBIGINT":18446744073709551615,"_ID":"doc_001","a\"string`with`quote'characters":null,"field with separated words":"updated spaces","field-with-separated-words":"updated dashes","field.with-separated_words":"updated mixed","field.with.separated.words":"updated dots","testing (%s)":"updated printf"}
{" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ":""," ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ":"test-key-2","$dollar$signs":"","123":"","123startsWithDigits":"","BINARYKEY":"VGVzdERhdGE=","FIELDWITHDIFFERENTCAPS":"","FIELD_WITH_SEPARATED_WORDS":"","FLOW_DOCUMENT":{" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ":""," ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ":"test-key-2","$dollar$signs":"","123":"","123startsWithDigits":"","FIELDWITHDIFFERENTCAPS":"","_id":"doc_002","_meta":{"uuid":"7971c580-1dda-11b2-8000-071353030311"},"a\"string`with`quote''characters":"","binaryKey":"VGVzdERhdGE=","field with separated words":"","field-with-separated-words":"","field.with-separated_words":"","field.with.separated.words":"","fieldWithDifferentCaps":"","field_with_separated_words":"","fieldwithdifferentcaps":"","longString":"","testing (%s)":"","unsignedBigint":0},"FLOW_PUBLISHED_AT":"1969-12-31T17:00:07-08:00","LONGSTRING":"","UNSIGNEDBIGINT":0,"_ID":"doc_002","a\"string`with`quote'characters":null,"field with separated words":"","field-with-separated-words":"","field.with-separated_words":"","field.with.separated.words":"","testing (%s)":""}
{" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ":"symbols: !@#$%^\u0026*()_+-=[]{}|;':\",./\u003c\u003e?"," ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ":"very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.","$dollar$signs":"$100.50$","123":999,"123startsWithDigits":"field starting with 123","BINARYKEY":"QmluYXJ5VGVzdERhdGE=","FIELDWITHDIFFERENTCAPS":"ALL UPPERCASE VALUE","FIELD_WITH_SEPARATED_WORDS":"underscore_separated_values","FLOW_DOCUMENT":{" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ ":"symbols: !@#$%^\u0026*()_+-=[]{}|;':\",./\u003c\u003e?"," ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ ":"very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.","$dollar$signs":"$100.50$","123":"999","123startsWithDigits":"field starting with 123","FIELDWITHDIFFERENTCAPS":"ALL UPPERCASE VALUE","_id":"doc_003","_meta":{"uuid":"7a0a5c00-1dda-11b2-8000-071353030311"},"a\"string`with`quote''characters":"testing \"quotes\" and `backticks` and 'apostrophes'","binaryKey":"QmluYXJ5VGVzdERhdGE=","field with separated words":"edge case testing","field-with-separated-words":"hyphen-separated-values","field.with-separated_words":"mixed.separator-test_data","field.with.separated.words":"system.test.data","fieldWithDifferentCaps":"CamelCaseValue","field_with_separated_words":"underscore_separated_values","fieldwithdifferentcaps":"all lowercase value","longString":"very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.","testing (%s)":"printf style format string test","unsignedBigint":18446744073709551615},"FLOW_PUBLISHED_AT":"1969-12-31T17:00:08-08:00","LONGSTRING":"very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.","UNSIGNEDBIGINT":18446744073709551615,"_ID":"doc_003","a\"string`with`quote'characters":null,"field with separated words":"edge case testing","field-with-separated-words":"hyphen-separated-values","field.with-separated_words":"mixed.separator-test_data","field.with.separated.words":"system.test.data","testing (%s)":"printf style format string test"}

Resource: data_types
["applied.actionDescription", "\nCREATE TABLE IF NOT EXISTS simple_standard (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_standard IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_standard.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\nCOMMENT ON COLUMN simple_standard.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS simple_delta (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tval INTEGER\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple_delta IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/simple';\nCOMMENT ON COLUMN simple_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple_delta.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN simple_delta.val IS 'auto-generated projection of JSON at: /val with inferred types: [integer]';\n\n\nCREATE TABLE IF NOT EXISTS not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" TEXT NOT NULL,\n\t_id TEXT NOT NULL,\n\tbinaryKey TEXT NOT NULL,\n\t\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" TEXT,\n\t\"$dollar$signs\" TEXT,\n\t\"123\" TEXT,\n\t\"123startsWithDigits\" TEXT,\n\tFIELDWITHDIFFERENTCAPS TEXT,\n\t\"a\"\"string`with`quote'characters\" TEXT,\n\t\"field with separated words\" TEXT,\n\t\"field-with-separated-words\" TEXT,\n\t\"field.with-separated_words\" TEXT,\n\t\"field.with.separated.words\" TEXT,\n\tfield_with_separated_words TEXT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tlongString TEXT,\n\t\"testing (%s)\" TEXT,\n\tunsignedBigint INTEGER,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE not_simple IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/not-simple';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple._id IS 'auto-generated projection of JSON at: /_id with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.binaryKey IS 'auto-generated projection of JSON at: /binaryKey with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" IS 'auto-generated projection of JSON at: / ,;{}().- problematicField ÔøΩ êÄÄ Øß¥  with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"$dollar$signs\" IS 'auto-generated projection of JSON at: /$dollar$signs with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123\" IS 'auto-generated projection of JSON at: /123 with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"123startsWithDigits\" IS 'auto-generated projection of JSON at: /123startsWithDigits with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.FIELDWITHDIFFERENTCAPS IS 'auto-generated projection of JSON at: /FIELDWITHDIFFERENTCAPS with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"a\"\"string`with`quote'characters\" IS 'auto-generated projection of JSON at: /a\"string`with`quote''characters with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field with separated words\" IS 'auto-generated projection of JSON at: /field with separated words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field-with-separated-words\" IS 'auto-generated projection of JSON at: /field-with-separated-words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with-separated_words\" IS 'auto-generated projection of JSON at: /field.with-separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"field.with.separated.words\" IS 'auto-generated projection of JSON at: /field.with.separated.words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.field_with_separated_words IS 'auto-generated projection of JSON at: /field_with_separated_words with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.longString IS 'auto-generated projection of JSON at: /longString with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.\"testing (%s)\" IS 'auto-generated projection of JSON at: /testing (%s) with inferred types: [string]';\nCOMMENT ON COLUMN not_simple.unsignedBigint IS 'auto-generated projection of JSON at: /unsignedBigint with inferred types: [integer]';\nCOMMENT ON COLUMN not_simple.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n\n\nCREATE TABLE IF NOT EXISTS data_types (\n\tid INTEGER NOT NULL,\n\tarrayField VARIANT,\n\tboolField BOOLEAN,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tintField INTEGER,\n\tmultipleField VARIANT,\n\tnumField FLOAT,\n\tstringAndIntegerField INTEGER,\n\tstringAndNumberField FLOAT,\n\tstringDateField DATE,\n\tstringDateTimeField TIMESTAMP_LTZ,\n\tstringDurationField TEXT,\n\tstringEmailField TEXT,\n\tstringField TEXT,\n\tstringHostnameField TEXT,\n\tstringIntegerField INTEGER,\n\tstringIpv4Field TEXT,\n\tstringIpv6Field TEXT,\n\tstringIriField TEXT,\n\tstringIriReferenceField TEXT,\n\tstringJsonPointerField TEXT,\n\tstringMacAddr8Field TEXT,\n\tstringMacAddrField TEXT,\n\tstringNumberField FLOAT,\n\tstringRegexField TEXT,\n\tstringRelativeJsonPointerField TEXT,\n\tstringTimeField TEXT,\n\tstringUint32Field INTEGER,\n\tstringUint64Field INTEGER,\n\tstringUriField TEXT,\n\tstringUriReferenceField TEXT,\n\tstringUriTemplateField TEXT,\n\tstringUuidField TEXT,\n\tflow_document VARIANT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE data_types IS 'Generated for materialization acmeCo/tests/materialize-snowflake of collection tests/data-types';\nCOMMENT ON COLUMN data_types.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.arrayField IS 'auto-generated projection of JSON at: /arrayField with inferred types: [array]';\nCOMMENT ON COLUMN data_types.boolField IS 'auto-generated projection of JSON at: /boolField with inferred types: [boolean]';\nCOMMENT ON COLUMN data_types.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN data_types.intField IS 'auto-generated projection of JSON at: /intField with inferred types: [integer]';\nCOMMENT ON COLUMN data_types.multipleField IS 'auto-generated projection of JSON at: /multipleField with inferred types: [integer object string]';\nCOMMENT ON COLUMN data_types.numField IS 'auto-generated projection of JSON at: /numField with inferred types: [number]';\nCOMMENT ON COLUMN data_types.stringAndIntegerField IS 'auto-generated projection of JSON at: /stringAndIntegerField with inferred types: [integer string]';\nCOMMENT ON COLUMN data_types.stringAndNumberField IS 'auto-generated projection of JSON at: /stringAndNumberField with inferred types: [number string]';\nCOMMENT ON COLUMN data_types.stringDateField IS 'auto-generated projection of JSON at: /stringDateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDateTimeField IS 'auto-generated projection of JSON at: /stringDateTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringDurationField IS 'auto-generated projection of JSON at: /stringDurationField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringEmailField IS 'auto-generated projection of JSON at: /stringEmailField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringField IS 'auto-generated projection of JSON at: /stringField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringHostnameField IS 'auto-generated projection of JSON at: /stringHostnameField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIntegerField IS 'auto-generated projection of JSON at: /stringIntegerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv4Field IS 'auto-generated projection of JSON at: /stringIpv4Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIpv6Field IS 'auto-generated projection of JSON at: /stringIpv6Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriField IS 'auto-generated projection of JSON at: /stringIriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringIriReferenceField IS 'auto-generated projection of JSON at: /stringIriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringJsonPointerField IS 'auto-generated projection of JSON at: /stringJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddr8Field IS 'auto-generated projection of JSON at: /stringMacAddr8Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringMacAddrField IS 'auto-generated projection of JSON at: /stringMacAddrField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringNumberField IS 'auto-generated projection of JSON at: /stringNumberField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRegexField IS 'auto-generated projection of JSON at: /stringRegexField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringRelativeJsonPointerField IS 'auto-generated projection of JSON at: /stringRelativeJsonPointerField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringTimeField IS 'auto-generated projection of JSON at: /stringTimeField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint32Field IS 'auto-generated projection of JSON at: /stringUint32Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUint64Field IS 'auto-generated projection of JSON at: /stringUint64Field with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriField IS 'auto-generated projection of JSON at: /stringUriField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriReferenceField IS 'auto-generated projection of JSON at: /stringUriReferenceField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUriTemplateField IS 'auto-generated projection of JSON at: /stringUriTemplateField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.stringUuidField IS 'auto-generated projection of JSON at: /stringUuidField with inferred types: [string]';\nCOMMENT ON COLUMN data_types.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n"]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nCOPY INTO data_types (\n\tid, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document\n) FROM (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"not_simple":{"Table":"not_simple","Query":"\nCOPY INTO not_simple (\n\t\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document\n) FROM (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"7a60ee931eb4057c:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":6,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"63","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"737472656e677468656e","minStrValue":"4b72696e676c652773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":3605000000000,"minIntValue":3600000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":6,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nCOPY INTO simple_standard (\n\tid, \"_meta/op\", canary, flow_published_at, val, flow_document\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":""}},"mergePatch":true}]
["connectorState",{"updated":{},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"Table":"data_types","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"not_simple":{"Table":"not_simple","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003e= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" \u003c= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id \u003e= 'doc_001' AND l._id \u003c= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"},"simple_delta":{"Table":"","Query":"","StagedDir":"","StreamBlobs":[{"path": "<path>","md5": "<md5>","chunks":[{"database":"ESTUARY_DB","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA","chunk_start_offset":0,"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"row_sequencer":0,"offset_token":"d075ceace3972e7f:0"}],"chunk_md5": "<chunk_md5>","eps":{"rows":10,"columns":{"\"_meta/op\"":{"columnId":2,"nullCount":0,"maxStrValue":"75","minStrValue":"63","maxLength":1,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"CANARY":{"columnId":3,"nullCount":0,"maxStrValue":"73706c617474657273","minStrValue":"616d7075746174696f6e2773","maxLength":12,"maxIntValue":0,"minIntValue":0,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"FLOW_PUBLISHED_AT":{"columnId":4,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":10809000000000,"minIntValue":10800000000000,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"ID":{"columnId":1,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null},"VAL":{"columnId":5,"nullCount":0,"maxStrValue":null,"minStrValue":null,"maxLength":0,"maxIntValue":12,"minIntValue":1,"maxRealValue":null,"minRealValue":null,"distinctValues":-1,"collation":null,"minStrNonCollated":null,"maxStrNonCollated":null}}},"encryption_key_id": "<encryption_key_id>","first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>"}],"bdec_version":3,"blob_stats":{"flush_start_ms": "<flush_start_ms>","build_duration_ms": "<build_duration_ms>","upload_duration_ms": "<upload_duration_ms>"}}],"PipeName":"","PipeFiles":null,"Version":""},"simple_standard":{"Table":"simple_standard","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id \u003e= 1 AND l.id \u003c= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","StreamBlobs":null,"PipeName":"","PipeFiles":null,"Version":"ffffffffffffffff"}},"mergePatch":true}]
["connectorState",{"updated":{"data_types":{"PipeName":"","Query":"\nMERGE INTO data_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS arrayField, $1[2] AS boolField, $1[3] AS flow_published_at, $1[4] AS intField, NULLIF($1[5], PARSE_JSON('null')) AS multipleField, $1[6] AS numField, $1[7] AS stringAndIntegerField, $1[8] AS stringAndNumberField, $1[9] AS stringDateField, $1[10] AS stringDateTimeField, $1[11] AS stringDurationField, $1[12] AS stringEmailField, $1[13] AS stringField, $1[14] AS stringHostnameField, $1[15] AS stringIntegerField, $1[16] AS stringIpv4Field, $1[17] AS stringIpv6Field, $1[18] AS stringIriField, $1[19] AS stringIriReferenceField, $1[20] AS stringJsonPointerField, $1[21] AS stringMacAddr8Field, $1[22] AS stringMacAddrField, $1[23] AS stringNumberField, $1[24] AS stringRegexField, $1[25] AS stringRelativeJsonPointerField, $1[26] AS stringTimeField, $1[27] AS stringUint32Field, $1[28] AS stringUint64Field, $1[29] AS stringUriField, $1[30] AS stringUriReferenceField, $1[31] AS stringUriTemplateField, $1[32] AS stringUuidField, $1[33] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 4\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.arrayField = r.arrayField, l.boolField = r.boolField, l.flow_published_at = r.flow_published_at, l.intField = r.intField, l.multipleField = r.multipleField, l.numField = r.numField, l.stringAndIntegerField = r.stringAndIntegerField, l.stringAndNumberField = r.stringAndNumberField, l.stringDateField = r.stringDateField, l.stringDateTimeField = r.stringDateTimeField, l.stringDurationField = r.stringDurationField, l.stringEmailField = r.stringEmailField, l.stringField = r.stringField, l.stringHostnameField = r.stringHostnameField, l.stringIntegerField = r.stringIntegerField, l.stringIpv4Field = r.stringIpv4Field, l.stringIpv6Field = r.stringIpv6Field, l.stringIriField = r.stringIriField, l.stringIriReferenceField = r.stringIriReferenceField, l.stringJsonPointerField = r.stringJsonPointerField, l.stringMacAddr8Field = r.stringMacAddr8Field, l.stringMacAddrField = r.stringMacAddrField, l.stringNumberField = r.stringNumberField, l.stringRegexField = r.stringRegexField, l.stringRelativeJsonPointerField = r.stringRelativeJsonPointerField, l.stringTimeField = r.stringTimeField, l.stringUint32Field = r.stringUint32Field, l.stringUint64Field = r.stringUint64Field, l.stringUriField = r.stringUriField, l.stringUriReferenceField = r.stringUriReferenceField, l.stringUriTemplateField = r.stringUriTemplateField, l.stringUuidField = r.stringUuidField, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, arrayField, boolField, flow_published_at, intField, multipleField, numField, stringAndIntegerField, stringAndNumberField, stringDateField, stringDateTimeField, stringDurationField, stringEmailField, stringField, stringHostnameField, stringIntegerField, stringIpv4Field, stringIpv6Field, stringIriField, stringIriReferenceField, stringJsonPointerField, stringMacAddr8Field, stringMacAddrField, stringNumberField, stringRegexField, stringRelativeJsonPointerField, stringTimeField, stringUint32Field, stringUint64Field, stringUriField, stringUriReferenceField, stringUriTemplateField, stringUuidField, flow_document)\n\tVALUES (r.id, r.arrayField, r.boolField, r.flow_published_at, r.intField, r.multipleField, r.numField, r.stringAndIntegerField, r.stringAndNumberField, r.stringDateField, r.stringDateTimeField, r.stringDurationField, r.stringEmailField, r.stringField, r.stringHostnameField, r.stringIntegerField, r.stringIpv4Field, r.stringIpv6Field, r.stringIriField, r.stringIriReferenceField, r.stringJsonPointerField, r.stringMacAddr8Field, r.stringMacAddrField, r.stringNumberField, r.stringRegexField, r.stringRelativeJsonPointerField, r.stringTimeField, r.stringUint32Field, r.stringUint64Field, r.stringUriField, r.stringUriReferenceField, r.stringUriTemplateField, r.stringUuidField, r.flow_document);\n","StagedDir":"<uuid>","Table":"data_types","Version":"ffffffffffffffff"},"not_simple":{"PipeName":"","Query":"\nMERGE INTO not_simple AS l\nUSING (\n\tSELECT $1[0] AS \" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", $1[1] AS _id, $1[2] AS binaryKey, $1[3] AS \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", $1[4] AS \"$dollar$signs\", $1[5] AS \"123\", $1[6] AS \"123startsWithDigits\", $1[7] AS FIELDWITHDIFFERENTCAPS, $1[8] AS \"a\"\"string`with`quote'characters\", $1[9] AS \"field with separated words\", $1[10] AS \"field-with-separated-words\", $1[11] AS \"field.with-separated_words\", $1[12] AS \"field.with.separated.words\", $1[13] AS field_with_separated_words, $1[14] AS flow_published_at, $1[15] AS longString, $1[16] AS \"testing (%s)\", $1[17] AS unsignedBigint, $1[18] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" >= '\\\\he \\\\ '' \" `llo`' AND l.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \" <= 'very long string that exceeds 256 characters to test if dynamic sizing of varchar fields works. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostru.'\n\tAND l._id = r._id AND l._id >= 'doc_001' AND l._id <= 'doc_003'\n\tAND l.binaryKey = r.binaryKey\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \" = r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", l.\"$dollar$signs\" = r.\"$dollar$signs\", l.\"123\" = r.\"123\", l.\"123startsWithDigits\" = r.\"123startsWithDigits\", l.FIELDWITHDIFFERENTCAPS = r.FIELDWITHDIFFERENTCAPS, l.\"a\"\"string`with`quote'characters\" = r.\"a\"\"string`with`quote'characters\", l.\"field with separated words\" = r.\"field with separated words\", l.\"field-with-separated-words\" = r.\"field-with-separated-words\", l.\"field.with-separated_words\" = r.\"field.with-separated_words\", l.\"field.with.separated.words\" = r.\"field.with.separated.words\", l.field_with_separated_words = r.field_with_separated_words, l.flow_published_at = r.flow_published_at, l.longString = r.longString, l.\"testing (%s)\" = r.\"testing (%s)\", l.unsignedBigint = r.unsignedBigint, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", _id, binaryKey, \" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", \"$dollar$signs\", \"123\", \"123startsWithDigits\", FIELDWITHDIFFERENTCAPS, \"a\"\"string`with`quote'characters\", \"field with separated words\", \"field-with-separated-words\", \"field.with-separated_words\", \"field.with.separated.words\", field_with_separated_words, flow_published_at, longString, \"testing (%s)\", unsignedBigint, flow_document)\n\tVALUES (r.\" ,;{}().- problematicKey ÔøΩ êÄÄ Øß¥ \", r._id, r.binaryKey, r.\" ,;{}().- problematicField ÔøΩ êÄÄ Øß¥ \", r.\"$dollar$signs\", r.\"123\", r.\"123startsWithDigits\", r.FIELDWITHDIFFERENTCAPS, r.\"a\"\"string`with`quote'characters\", r.\"field with separated words\", r.\"field-with-separated-words\", r.\"field.with-separated_words\", r.\"field.with.separated.words\", r.field_with_separated_words, r.flow_published_at, r.longString, r.\"testing (%s)\", r.unsignedBigint, r.flow_document);\n","StagedDir":"<uuid>","Table":"not_simple","Version":"ffffffffffffffff"},"simple_delta":{"PipeName":"","Query":"","StagedDir":"","StreamBlobs":[{"bdec_version":3,"blob_stats":{"build_duration_ms": "<build_duration_ms>","flush_start_ms": "<flush_start_ms>","upload_duration_ms": "<upload_duration_ms>"},"chunks":[{"channels":[{"channel_name":"ACMECO_TESTS_MATERIALIZE_SNOWFLA_<channel_id>_00000000","client_sequencer":0,"offset_token":"d075ceace3972e7f:0","row_sequencer":0}],"chunk_length": "<chunk_length>","chunk_length_uncompressed": "<chunk_length_uncompressed>","chunk_md5": "<chunk_md5>","chunk_start_offset":0,"database":"ESTUARY_DB","encryption_key_id": "<encryption_key_id>","eps":{"columns":{"\"_meta/op\"":{"collation":null,"columnId":2,"distinctValues":-1,"maxIntValue":0,"maxLength":1,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"75","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"63","nullCount":0},"CANARY":{"collation":null,"columnId":3,"distinctValues":-1,"maxIntValue":0,"maxLength":12,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":"73706c617474657273","minIntValue":0,"minRealValue":null,"minStrNonCollated":null,"minStrValue":"616d7075746174696f6e2773","nullCount":0},"FLOW_PUBLISHED_AT":{"collation":null,"columnId":4,"distinctValues":-1,"maxIntValue":10809000000000,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":10800000000000,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"ID":{"collation":null,"columnId":1,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0},"VAL":{"collation":null,"columnId":5,"distinctValues":-1,"maxIntValue":12,"maxLength":0,"maxRealValue":null,"maxStrNonCollated":null,"maxStrValue":null,"minIntValue":1,"minRealValue":null,"minStrNonCollated":null,"minStrValue":null,"nullCount":0}},"rows":10},"first_insert_time_in_ms": "<first_insert_time_in_ms>","last_insert_time_in_ms": "<last_insert_time_in_ms>","schema":"ESTUARY_SCHEMA","table":"SIMPLE_DELTA"}],"md5": "<md5>","path": "<path>"}],"Table":"","Version":""},"simple_standard":{"PipeName":"","Query":"\nMERGE INTO simple_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS canary, $1[3] AS flow_published_at, $1[4] AS val, $1[5] AS flow_document\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 11\nWHEN MATCHED AND r.flow_document='delete' THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.canary = r.canary, l.flow_published_at = r.flow_published_at, l.val = r.val, l.flow_document = r.flow_document\nWHEN NOT MATCHED and r.flow_document!='delete' THEN\n\tINSERT (id, \"_meta/op\", canary, flow_published_at, val, flow_document)\n\tVALUES (r.id, r.\"_meta/op\", r.canary, r.flow_published_at, r.val, r.flow_document);\n","StagedDir":"<uuid>","Table":"simple_standard","Version":"ffffffffffffffff"}}}]

{"Name":"ARRAYFIELD","Nullable":true,"Type":"VARIANT"}
{"Name":"BOOLFIELD","Nullable":true,"Type":"BOOLEAN"}
{"Name":"FLOW_DOCUMENT","Nullable":false,"Type":"VARIANT"}
{"Name":"FLOW_PUBLISHED_AT","Nullable":false,"Type":"TIMESTAMP_LTZ"}
{"Name":"ID","Nullable":false,"Type":"FIXED"}
{"Name":"INTFIELD","Nullable":true,"Type":"FIXED"}
{"Name":"MULTIPLEFIELD","Nullable":true,"Type":"VARIANT"}
{"Name":"NUMFIELD","Nullable":true,"Type":"REAL"}
{"Name":"STRINGANDINTEGERFIELD","Nullable":true,"Type":"FIXED"}
{"Name":"STRINGANDNUMBERFIELD","Nullable":true,"Type":"REAL"}
{"Name":"STRINGDATEFIELD","Nullable":true,"Type":"DATE"}
{"Name":"STRINGDATETIMEFIELD","Nullable":true,"Type":"TIMESTAMP_LTZ"}
{"Name":"STRINGDURATIONFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGEMAILFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGHOSTNAMEFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGINTEGERFIELD","Nullable":true,"Type":"FIXED"}
{"Name":"STRINGIPV4FIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGIPV6FIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGIRIFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGIRIREFERENCEFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGJSONPOINTERFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGMACADDR8FIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGMACADDRFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGNUMBERFIELD","Nullable":true,"Type":"REAL"}
{"Name":"STRINGREGEXFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGRELATIVEJSONPOINTERFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGTIMEFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGUINT32FIELD","Nullable":true,"Type":"FIXED"}
{"Name":"STRINGUINT64FIELD","Nullable":true,"Type":"FIXED"}
{"Name":"STRINGURIFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGURIREFERENCEFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGURITEMPLATEFIELD","Nullable":true,"Type":"TEXT"}
{"Name":"STRINGUUIDFIELD","Nullable":true,"Type":"TEXT"}

Table Data:
{"ARRAYFIELD":[1,"two",3,true,null],"BOOLFIELD":1,"FLOW_DOCUMENT":{"_meta":{"uuid":"3ff58600-1deb-11b2-8000-071353030311"},"arrayField":[1,"two",3,true,null],"boolField":true,"id":1,"intField":42,"multipleField":"string value","nullField":null,"numField":3.14159,"objField":{"count":123,"nested":"value"},"stringAndIntegerField":"1.0","stringAndNumberField":"123.456","stringDateField":"2023-01-15","stringDateTimeField":"2023-01-15T10:30:45Z","stringDurationField":"P1Y2M3DT4H5M6S","stringEmailField":"test@example.com","stringField":"hello world","stringHostnameField":"example.com","stringIntegerField":"1.0","stringIpv4Field":"192.168.1.1","stringIpv6Field":"2001:db8::1","stringIriField":"https://‰æã„Åà.„ÉÜ„Çπ„Éà","stringIriReferenceField":"/‰æã„Åà/„ÉÜ„Çπ„Éà","stringJsonPointerField":"/path/to/field","stringMacAddr8Field":"00:14:22:ff:fe:01:23:45","stringMacAddrField":"00:14:22:01:23:45","stringNumberField":"123.456","stringRegexField":"^[a-zA-Z0-9]+$","stringRelativeJsonPointerField":"1/name","stringTimeField":"14:30:00+00:00","stringUint32Field":"4294967295","stringUint64Field":"18446744073709551615","stringUriField":"https://example.com/path","stringUriReferenceField":"/relative/path","stringUriTemplateField":"https://api.example.com/{id}","stringUuidField":"550e8400-e29b-41d4-a716-446655440000"},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:12-08:00","ID":1,"INTFIELD":42,"MULTIPLEFIELD":"string value","NUMFIELD":3.14159,"STRINGANDINTEGERFIELD":1,"STRINGANDNUMBERFIELD":123.456,"STRINGDATEFIELD":"2023-01-15T00:00:00Z","STRINGDATETIMEFIELD":"2023-01-15T02:30:45-08:00","STRINGDURATIONFIELD":"P1Y2M3DT4H5M6S","STRINGEMAILFIELD":"test@example.com","STRINGFIELD":"hello world","STRINGHOSTNAMEFIELD":"example.com","STRINGINTEGERFIELD":1,"STRINGIPV4FIELD":"192.168.1.1","STRINGIPV6FIELD":"2001:db8::1","STRINGIRIFIELD":"https://‰æã„Åà.„ÉÜ„Çπ„Éà","STRINGIRIREFERENCEFIELD":"/‰æã„Åà/„ÉÜ„Çπ„Éà","STRINGJSONPOINTERFIELD":"/path/to/field","STRINGMACADDR8FIELD":"00:14:22:ff:fe:01:23:45","STRINGMACADDRFIELD":"00:14:22:01:23:45","STRINGNUMBERFIELD":123.456,"STRINGREGEXFIELD":"^[a-zA-Z0-9]+$","STRINGRELATIVEJSONPOINTERFIELD":"1/name","STRINGTIMEFIELD":"14:30:00+00:00","STRINGUINT32FIELD":4294967295,"STRINGUINT64FIELD":18446744073709551615,"STRINGURIFIELD":"https://example.com/path","STRINGURIREFERENCEFIELD":"/relative/path","STRINGURITEMPLATEFIELD":"https://api.example.com/{id}","STRINGUUIDFIELD":"550e8400-e29b-41d4-a716-446655440000"}
{"ARRAYFIELD":[],"BOOLFIELD":0,"FLOW_DOCUMENT":{"_meta":{"uuid":"408e1c80-1deb-11b2-8000-071353030311"},"arrayField":[],"boolField":false,"id":2,"intField":-999,"multipleField":42,"nullField":null,"numField":-2.718281828,"objField":{},"stringAndIntegerField":-123,"stringAndNumberField":-456.789,"stringDateField":"1999-12-31","stringDateTimeField":"1999-12-31T23:59:59.999Z","stringDurationField":"PT30M","stringEmailField":"admin@localhost","stringField":"","stringHostnameField":"localhost","stringIntegerField":"-123","stringIpv4Field":"127.0.0.1","stringIpv6Field":"::1","stringIriField":"http://localhost","stringIriReferenceField":"/","stringJsonPointerField":"/0","stringMacAddr8Field":"ff:ff:ff:ff:ff:ff:ff:ff","stringMacAddrField":"ff:ff:ff:ff:ff:ff","stringNumberField":"-456.789","stringRegexField":".*","stringRelativeJsonPointerField":"0","stringTimeField":"00:00:00+00:00","stringUint32Field":"0","stringUint64Field":"0","stringUriField":"http://localhost:8080","stringUriReferenceField":"#fragment","stringUriTemplateField":"http://example.com/~{username}/","stringUuidField":"00000000-0000-0000-0000-000000000000"},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:13-08:00","ID":2,"INTFIELD":-999,"MULTIPLEFIELD":42,"NUMFIELD":-2.718281828,"STRINGANDINTEGERFIELD":-123,"STRINGANDNUMBERFIELD":-456.789,"STRINGDATEFIELD":"1999-12-31T00:00:00Z","STRINGDATETIMEFIELD":"1999-12-31T15:59:59.999-08:00","STRINGDURATIONFIELD":"PT30M","STRINGEMAILFIELD":"admin@localhost","STRINGFIELD":"","STRINGHOSTNAMEFIELD":"localhost","STRINGINTEGERFIELD":-123,"STRINGIPV4FIELD":"127.0.0.1","STRINGIPV6FIELD":"::1","STRINGIRIFIELD":"http://localhost","STRINGIRIREFERENCEFIELD":"/","STRINGJSONPOINTERFIELD":"/0","STRINGMACADDR8FIELD":"ff:ff:ff:ff:ff:ff:ff:ff","STRINGMACADDRFIELD":"ff:ff:ff:ff:ff:ff","STRINGNUMBERFIELD":-456.789,"STRINGREGEXFIELD":".*","STRINGRELATIVEJSONPOINTERFIELD":0,"STRINGTIMEFIELD":"00:00:00+00:00","STRINGUINT32FIELD":0,"STRINGUINT64FIELD":0,"STRINGURIFIELD":"http://localhost:8080","STRINGURIREFERENCEFIELD":"#fragment","STRINGURITEMPLATEFIELD":"http://example.com/~{username}/","STRINGUUIDFIELD":"00000000-0000-0000-0000-000000000000"}
{"ARRAYFIELD":[{"obj":"in array"},[1,[2,[3]]],"mixed types"],"BOOLFIELD":1,"FLOW_DOCUMENT":{"_meta":{"uuid":"7bd41f80-1dda-11b2-8000-071353030311"},"arrayField":[{"obj":"in array"},[1,[2,[3]]],"mixed types"],"boolField":true,"id":3,"intField":0,"multipleField":{"object":"value"},"nullField":null,"numField":0,"objField":{"array":[1,2,3],"nested":{"deep":"value"}},"stringAndIntegerField":"2147483647","stringAndNumberField":"0","stringDateField":"2024-02-29","stringDateTimeField":"2024-02-29T12:00:00.000000000Z","stringDurationField":"P0D","stringEmailField":"user+tag@sub.domain.com","stringField":"special chars: !@#$%^\u0026*()[]{}|\\:;\"'\u003c\u003e?/.,","stringHostnameField":"sub.domain.example.org","stringIntegerField":"2147483647","stringIpv4Field":"10.0.0.1","stringIpv6Field":"2001:0db8:0000:0000:0000:ff00:0042:8329","stringIriField":"https://–º–æ—Å–∫–≤–∞.—Ä—Ñ/path","stringIriReferenceField":"/–º–æ—Å–∫–≤–∞/–ø—É—Ç—å","stringJsonPointerField":"/nested/array/0/field","stringMacAddr8Field":"01:23:45:67:89:ab:cd:ef","stringMacAddrField":"01:23:45:67:89:ab","stringNumberField":"0","stringRegexField":"[0-9]{3}-[0-9]{2}-[0-9]{4}","stringRelativeJsonPointerField":"2/nested/field","stringTimeField":"23:59:59.999-01:15","stringUint32Field":"2147483648","stringUint64Field":"9223372036854775808","stringUriField":"ftp://user:pass@host.com:21/path?query=value","stringUriReferenceField":"?query=value\u0026other=param","stringUriTemplateField":"https://{host}{/path*}{?query*}","stringUuidField":"f47ac10b-58cc-4372-a567-0e02b2c3d479"},"FLOW_PUBLISHED_AT":"1969-12-31T17:00:11-08:00","ID":3,"INTFIELD":0,"MULTIPLEFIELD":{"object":"value"},"NUMFIELD":0,"STRINGANDINTEGERFIELD":2147483647,"STRINGANDNUMBERFIELD":0,"STRINGDATEFIELD":"2024-02-29T00:00:00Z","STRINGDATETIMEFIELD":"2024-02-29T04:00:00-08:00","STRINGDURATIONFIELD":"P0D","STRINGEMAILFIELD":"user+tag@sub.domain.com","STRINGFIELD":"special chars: !@#$%^\u0026*()[]{}|\\:;\"'\u003c\u003e?/.,","STRINGHOSTNAMEFIELD":"sub.domain.example.org","STRINGINTEGERFIELD":2147483647,"STRINGIPV4FIELD":"10.0.0.1","STRINGIPV6FIELD":"2001:0db8:0000:0000:0000:ff00:0042:8329","STRINGIRIFIELD":"https://–º–æ—Å–∫–≤–∞.—Ä—Ñ/path","STRINGIRIREFERENCEFIELD":"/–º–æ—Å–∫–≤–∞/–ø—É—Ç—å","STRINGJSONPOINTERFIELD":"/nested/array/0/field","STRINGMACADDR8FIELD":"01:23:45:67:89:ab:cd:ef","STRINGMACADDRFIELD":"01:23:45:67:89:ab","STRINGNUMBERFIELD":0,"STRINGREGEXFIELD":"[0-9]{3}-[0-9]{2}-[0-9]{4}","STRINGRELATIVEJSONPOINTERFIELD":"2/nested/field","STRINGTIMEFIELD":"23:59:59.999-01:15","STRINGUINT32FIELD":2147483648,"STRINGUINT64FIELD":9223372036854775808,"STRINGURIFIELD":"ftp://user:pass@host.com:21/path?query=value","STRINGURIREFERENCEFIELD":"?query=value\u0026other=param","STRINGURITEMPLATEFIELD":"https://{host}{/path*}{?query*}","STRINGUUIDFIELD":"f47ac10b-58cc-4372-a567-0e02b2c3d479"}
{"ARRAYFIELD":["updated","array","values"],"BOOLFIELD":0,"FLOW_DOCUMENT":{"_meta":{"uuid":"3f5cef80-1deb-11b2-8000-071353030311"},"arrayField":["updated","array","values"],"boolField":false,"id":4,"intField":2147483647,"multipleField":999,"nullField":null,"numField":12345678900,"objField":{"timestamp":"2024-01-01","updated":true},"stringAndIntegerField":999,"stringAndNumberField":999.999,"stringDateField":"2024-12-25","stringDateTimeField":"2024-12-25T00:00:00Z","stringDurationField":"P1D","stringEmailField":"updated@test.org","stringField":"updated value","stringHostnameField":"api.example.org","stringIntegerField":"999","stringIpv4Field":"8.8.8.8","stringIpv6Field":"2001:4860:4860::8888","stringIriField":"https://„ÉÜ„Çπ„Éà.‰æã","stringIriReferenceField":"/„ÉÜ„Çπ„Éà/‰æã","stringJsonPointerField":"/data/items/0/name","stringMacAddr8Field":"aa:bb:cc:dd:ee:ff:00:11","stringMacAddrField":"aa:bb:cc:dd:ee:ff","stringNumberField":"999.999","stringRegexField":"^\\d{4}-\\d{2}-\\d{2}$","stringRelativeJsonPointerField":"3/updated","stringTimeField":"12:00:00z","stringUint32Field":"1000000000","stringUint64Field":"1000000000000000000","stringUriField":"https://api.example.org/v1/resource","stringUriReferenceField":"../parent/resource","stringUriTemplateField":"/api/v{version}/users/{id}","stringUuidField":"123e4567-e89b-12d3-a456-426614174000"},"FLOW_PUBLISHED_AT":"1969-12-31T19:00:11-08:00","ID":4,"INTFIELD":2147483647,"MULTIPLEFIELD":999,"NUMFIELD":12345678900,"STRINGANDINTEGERFIELD":999,"STRINGANDNUMBERFIELD":999.999,"STRINGDATEFIELD":"2024-12-25T00:00:00Z","STRINGDATETIMEFIELD":"2024-12-24T16:00:00-08:00","STRINGDURATIONFIELD":"P1D","STRINGEMAILFIELD":"updated@test.org","STRINGFIELD":"updated value","STRINGHOSTNAMEFIELD":"api.example.org","STRINGINTEGERFIELD":999,"STRINGIPV4FIELD":"8.8.8.8","STRINGIPV6FIELD":"2001:4860:4860::8888","STRINGIRIFIELD":"https://„ÉÜ„Çπ„Éà.‰æã","STRINGIRIREFERENCEFIELD":"/„ÉÜ„Çπ„Éà/‰æã","STRINGJSONPOINTERFIELD":"/data/items/0/name","STRINGMACADDR8FIELD":"aa:bb:cc:dd:ee:ff:00:11","STRINGMACADDRFIELD":"aa:bb:cc:dd:ee:ff","STRINGNUMBERFIELD":999.999,"STRINGREGEXFIELD":"^\\d{4}-\\d{2}-\\d{2}$","STRINGRELATIVEJSONPOINTERFIELD":"3/updated","STRINGTIMEFIELD":"12:00:00z","STRINGUINT32FIELD":1000000000,"STRINGUINT64FIELD":1000000000000000000,"STRINGURIFIELD":"https://api.example.org/v1/resource","STRINGURIREFERENCEFIELD":"../parent/resource","STRINGURITEMPLATEFIELD":"/api/v{version}/users/{id}","STRINGUUIDFIELD":"123e4567-e89b-12d3-a456-426614174000"}


