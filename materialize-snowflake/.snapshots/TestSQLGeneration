--- Begin target_table createTargetTable ---
  CREATE TABLE IF NOT EXISTS target_table (
    key1 INTEGER NOT NULL,
    key2 BOOLEAN NOT NULL,
    boolean BOOLEAN,
    integer INTEGER,
    number DOUBLE,
    string STRING,
    flow_document VARIANT NOT NULL,

    PRIMARY KEY (key1, key2)
  );

  COMMENT ON TABLE target_table IS 'Generated for materialization test/sqlite of collection key/value';
  COMMENT ON COLUMN target_table.key1 IS 'auto-generated projection of JSON at: /key1 with inferred types: [integer]';
  COMMENT ON COLUMN target_table.key2 IS 'auto-generated projection of JSON at: /key2 with inferred types: [boolean]';
  COMMENT ON COLUMN target_table.boolean IS 'auto-generated projection of JSON at: /boolean with inferred types: [boolean]';
  COMMENT ON COLUMN target_table.integer IS 'auto-generated projection of JSON at: /integer with inferred types: [integer]';
  COMMENT ON COLUMN target_table.number IS 'auto-generated projection of JSON at: /number with inferred types: [number]';
  COMMENT ON COLUMN target_table.string IS 'auto-generated projection of JSON at: /string with inferred types: [string]';
  COMMENT ON COLUMN target_table.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';
  --- End target_table createTargetTable ---

--- Begin target_table loadQuery ---
SELECT 0, target_table.flow_document
	FROM target_table
	JOIN (
		SELECT $1[0] AS key1, $1[1] AS key2
		FROM @flow_v1/00010203-0405-0607-0809-0a0b0c0d0e0f
	) AS r
	ON target_table.key1 = r.key1 AND target_table.key2 = r.key2
--- End target_table loadQuery ---

--- Begin target_table copyInto ---
	COPY INTO target_table (
		key1, key2, boolean, integer, number, string, flow_document
	) FROM (
		SELECT $1[0] AS key1, $1[1] AS key2, $1[2] AS boolean, $1[3] AS integer, $1[4] AS number, $1[5] AS string, $1[6] AS flow_document
		FROM @flow_v1/00010203-0405-0607-0809-0a0b0c0d0e0f
	);
--- End target_table copyInto ---

--- Begin target_table mergeInto ---
	MERGE INTO target_table
	USING (
		SELECT $1[0] AS key1, $1[1] AS key2, $1[2] AS boolean, $1[3] AS integer, $1[4] AS number, $1[5] AS string, $1[6] AS flow_document
		FROM @flow_v1/00010203-0405-0607-0809-0a0b0c0d0e0f
	) AS r
	ON target_table.key1 = r.key1 AND target_table.key2 = r.key2
	WHEN MATCHED AND IS_NULL_VALUE(r.flow_document) THEN
		DELETE
	WHEN MATCHED THEN
		UPDATE SET target_table.boolean = r.boolean, target_table.integer = r.integer, target_table.number = r.number, target_table.string = r.string, target_table.flow_document = r.flow_document
	WHEN NOT MATCHED THEN
		INSERT (key1, key2, boolean, integer, number, string, flow_document)
		VALUES (r.key1, r.key2, r.boolean, r.integer, r.number, r.string, r.flow_document);
--- End target_table mergeInto ---

--- Begin "Delta Updates" createTargetTable ---
  CREATE TABLE IF NOT EXISTS "Delta Updates" (
    theKey STRING NOT NULL,
    aValue INTEGER
  );

  COMMENT ON TABLE "Delta Updates" IS 'Generated for materialization test/sqlite of collection delta/updates';
  COMMENT ON COLUMN "Delta Updates".theKey IS 'auto-generated projection of JSON at: /theKey with inferred types: [string]';
  COMMENT ON COLUMN "Delta Updates".aValue IS 'A super-awesome value.
auto-generated projection of JSON at: /aValue with inferred types: [integer]';
  --- End "Delta Updates" createTargetTable ---

--- Begin "Delta Updates" loadQuery ---
SELECT * FROM (SELECT -1, CAST(NULL AS VARIANT) LIMIT 0) as nodoc
--- End "Delta Updates" loadQuery ---

--- Begin "Delta Updates" copyInto ---
	COPY INTO "Delta Updates" (
		theKey, aValue
	) FROM (
		SELECT $1[0] AS theKey, $1[1] AS aValue
		FROM @flow_v1/00010203-0405-0607-0809-0a0b0c0d0e0f
	);
--- End "Delta Updates" copyInto ---

--- Begin "Delta Updates" mergeInto ---
	MERGE INTO "Delta Updates"
	USING (
		SELECT $1[0] AS theKey, $1[1] AS aValue
		FROM @flow_v1/00010203-0405-0607-0809-0a0b0c0d0e0f
	) AS r
	ON "Delta Updates".theKey = r.theKey
	WHEN MATCHED THEN
		UPDATE SET "Delta Updates".aValue = r.aValue
	WHEN NOT MATCHED THEN
		INSERT (theKey, aValue)
		VALUES (r.theKey, r.aValue);
--- End "Delta Updates" mergeInto ---

--- Begin target_table_no_values_materialized mergeInto ---
	MERGE INTO target_table_no_values_materialized
	USING (
		SELECT $1[0] AS key1, $1[1] AS key2, $1[2] AS flow_document
		FROM @flow_v1/00010203-0405-0607-0809-0a0b0c0d0e0f
	) AS r
	ON target_table_no_values_materialized.key1 = r.key1 AND target_table_no_values_materialized.key2 = r.key2
	WHEN MATCHED AND IS_NULL_VALUE(r.flow_document) THEN
		DELETE
	WHEN MATCHED THEN
		UPDATE SET target_table_no_values_materialized.flow_document = r.flow_document
	WHEN NOT MATCHED THEN
		INSERT (key1, key2, flow_document)
		VALUES (r.key1, r.key2, r.flow_document);
--- End target_table_no_values_materialized mergeInto ---

--- Begin Fence Update ---
EXECUTE IMMEDIATE $$
DECLARE
    fenced_excp EXCEPTION (-20002, 'This instance was fenced off by another');
BEGIN
	UPDATE path."To".checkpoints
		SET   checkpoint = 'AAECAwQFBgcICQ=='
		WHERE materialization = 'some/Materialization'
		AND   key_begin = 1122867
		AND   key_end   = 4293844428
		AND   fence     = 123;

	IF (SQLNOTFOUND = true) THEN
		RAISE fenced_excp;
	END IF;

  RETURN SQLROWCOUNT;
END $$;
--- End Fence Update ---

