--- Begin "a-schema".target_table createTargetTable ---
CREATE TABLE IF NOT EXISTS "a-schema".target_table (
	key1 INTEGER NOT NULL,
	key2 BOOLEAN NOT NULL,
	boolean BOOLEAN,
	integer INTEGER,
	number DOUBLE,
	string STRING,
	flow_document VARIANT NOT NULL,

	PRIMARY KEY (key1, key2)
);

COMMENT ON TABLE "a-schema".target_table IS 'Generated for materialization test/sqlite of collection key/value';
COMMENT ON COLUMN "a-schema".target_table.key1 IS 'auto-generated projection of JSON at: /key1 with inferred types: [integer]';
COMMENT ON COLUMN "a-schema".target_table.key2 IS 'auto-generated projection of JSON at: /key2 with inferred types: [boolean]';
COMMENT ON COLUMN "a-schema".target_table.boolean IS 'auto-generated projection of JSON at: /boolean with inferred types: [boolean]';
COMMENT ON COLUMN "a-schema".target_table.integer IS 'auto-generated projection of JSON at: /integer with inferred types: [integer]';
COMMENT ON COLUMN "a-schema".target_table.number IS 'auto-generated projection of JSON at: /number with inferred types: [number]';
COMMENT ON COLUMN "a-schema".target_table.string IS 'auto-generated projection of JSON at: /string with inferred types: [string]';
COMMENT ON COLUMN "a-schema".target_table.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';
--- End "a-schema".target_table createTargetTable ---

--- Begin "a-schema".target_table loadQuery ---
SELECT 0, "a-schema".target_table.flow_document
	FROM "a-schema".target_table
	JOIN (
		SELECT $1[0] AS key1, $1[1] AS key2
		FROM test-file
	) AS r
	ON "a-schema".target_table.key1 = r.key1 AND "a-schema".target_table.key2 = r.key2
--- End "a-schema".target_table loadQuery ---

--- Begin "a-schema".target_table copyInto ---
COPY INTO "a-schema".target_table (
	key1, key2, boolean, integer, number, string, flow_document
) FROM (
	SELECT $1[0] AS key1, $1[1] AS key2, $1[2] AS boolean, $1[3] AS integer, $1[4] AS number, $1[5] AS string, $1[6] AS flow_document
	FROM test-file
);
--- End "a-schema".target_table copyInto ---

--- Begin "a-schema".target_table mergeInto ---
MERGE INTO "a-schema".target_table AS l
USING (
	SELECT $1[0] AS key1, $1[1] AS key2, $1[2] AS boolean, $1[3] AS integer, $1[4] AS number, $1[5] AS string, $1[6] AS flow_document
	FROM test-file
) AS r
ON l.key1 = r.key1 AND l.key2 = r.key2
WHEN MATCHED AND IS_NULL_VALUE(r.flow_document) THEN
	DELETE
WHEN MATCHED THEN
	UPDATE SET l.boolean = r.boolean, l.integer = r.integer, l.number = r.number, l.string = r.string, l.flow_document = r.flow_document
WHEN NOT MATCHED THEN
	INSERT (key1, key2, boolean, integer, number, string, flow_document)
	VALUES (r.key1, r.key2, r.boolean, r.integer, r.number, r.string, r.flow_document);
--- End "a-schema".target_table mergeInto ---

--- Begin "Delta Updates" createTargetTable ---
CREATE TABLE IF NOT EXISTS "Delta Updates" (
	theKey STRING NOT NULL,
	aValue INTEGER
);

COMMENT ON TABLE "Delta Updates" IS 'Generated for materialization test/sqlite of collection delta/updates';
COMMENT ON COLUMN "Delta Updates".theKey IS 'auto-generated projection of JSON at: /theKey with inferred types: [string]';
COMMENT ON COLUMN "Delta Updates".aValue IS 'A super-awesome value.
auto-generated projection of JSON at: /aValue with inferred types: [integer]';
--- End "Delta Updates" createTargetTable ---

--- Begin "Delta Updates" loadQuery ---
SELECT * FROM (SELECT -1, CAST(NULL AS VARIANT) LIMIT 0) as nodoc
--- End "Delta Updates" loadQuery ---

--- Begin "Delta Updates" copyInto ---
COPY INTO "Delta Updates" (
	theKey, aValue
) FROM (
	SELECT $1[0] AS theKey, $1[1] AS aValue
	FROM test-file
);
--- End "Delta Updates" copyInto ---

--- Begin "Delta Updates" mergeInto ---
MERGE INTO "Delta Updates" AS l
USING (
	SELECT $1[0] AS theKey, $1[1] AS aValue
	FROM test-file
) AS r
ON l.theKey = r.theKey
WHEN MATCHED THEN
	UPDATE SET l.aValue = r.aValue
WHEN NOT MATCHED THEN
	INSERT (theKey, aValue)
	VALUES (r.theKey, r.aValue);
--- End "Delta Updates" mergeInto ---

--- Begin alter table add columns and drop not nulls ---
ALTER TABLE "a-schema".target_table ADD COLUMN
	first_new_column STRING,
	second_new_column BOOL;

ALTER TABLE "a-schema".target_table ALTER COLUMN
	first_required_column DROP NOT NULL,
	second_required_column DROP NOT NULL;
--- End alter table add columns and drop not nulls ---

--- Begin alter table add columns ---
ALTER TABLE "a-schema".target_table ADD COLUMN
	first_new_column STRING,
	second_new_column BOOL;
--- End alter table add columns ---

--- Begin alter table drop not nulls ---
ALTER TABLE "a-schema".target_table ALTER COLUMN
	first_required_column DROP NOT NULL,
	second_required_column DROP NOT NULL;
--- End alter table drop not nulls ---

--- Begin target_table_no_values_materialized mergeInto ---
MERGE INTO target_table_no_values_materialized AS l
USING (
	SELECT $1[0] AS key1, $1[1] AS key2, $1[2] AS flow_document
	FROM test-file
) AS r
ON l.key1 = r.key1 AND l.key2 = r.key2
WHEN MATCHED AND IS_NULL_VALUE(r.flow_document) THEN
	DELETE
WHEN MATCHED THEN
	UPDATE SET l.flow_document = r.flow_document
WHEN NOT MATCHED THEN
	INSERT (key1, key2, flow_document)
	VALUES (r.key1, r.key2, r.flow_document);
--- End target_table_no_values_materialized mergeInto ---


