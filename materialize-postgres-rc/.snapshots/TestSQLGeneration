--- Begin "a-schema".target_table createTargetTable ---

CREATE TABLE IF NOT EXISTS "a-schema".target_table (
		key1 BIGINT NOT NULL,
		"key!2" BOOLEAN NOT NULL,
		"Camel_Case" BIGINT,
		"a Time" TIMESTAMPTZ,
		"array" JSON,
		lower_case BIGINT,
		"value" TEXT,
		flow_document JSON NOT NULL,

		PRIMARY KEY (key1, "key!2")
);

COMMENT ON TABLE "a-schema".target_table IS 'Generated for materialization test/sqlite of collection key/value';
COMMENT ON COLUMN "a-schema".target_table.key1 IS 'Key One Title
Key One Description
auto-generated projection of JSON at: /key1 with inferred types: [integer]';
COMMENT ON COLUMN "a-schema".target_table."key!2" IS 'auto-generated projection of JSON at: /key!2 with inferred types: [boolean]';
COMMENT ON COLUMN "a-schema".target_table."Camel_Case" IS 'auto-generated projection of JSON at: /Camel_Case with inferred types: [integer]';
COMMENT ON COLUMN "a-schema".target_table."a Time" IS 'auto-generated projection of JSON at: /a Time with inferred types: [string]';
COMMENT ON COLUMN "a-schema".target_table."array" IS 'This is an array!
auto-generated projection of JSON at: /array with inferred types: [array]';
COMMENT ON COLUMN "a-schema".target_table.lower_case IS 'auto-generated projection of JSON at: /lower_case with inferred types: [integer]';
COMMENT ON COLUMN "a-schema".target_table."value" IS 'auto-generated projection of JSON at: /value with inferred types: [string]';
COMMENT ON COLUMN "a-schema".target_table.flow_document IS 'user-provided projection of JSON at:  with inferred types: [object]';
--- End "a-schema".target_table createTargetTable ---

--- Begin "Delta Updates" createTargetTable ---

CREATE TABLE IF NOT EXISTS "Delta Updates" (
		"theKey" TEXT NOT NULL,
		"aValue" BIGINT
);

COMMENT ON TABLE "Delta Updates" IS 'Generated for materialization test/sqlite of collection delta/updates';
COMMENT ON COLUMN "Delta Updates"."theKey" IS 'auto-generated projection of JSON at: /theKey with inferred types: [string]';
COMMENT ON COLUMN "Delta Updates"."aValue" IS 'A super-awesome value.
auto-generated projection of JSON at: /aValue with inferred types: [integer]';
--- End "Delta Updates" createTargetTable ---

--- Begin "a-schema".target_table createLoadTable ---

CREATE TEMPORARY TABLE flow_temp_table_0 (
		key1 BIGINT NOT NULL,
		"key!2" BOOLEAN NOT NULL
) ON COMMIT DROP;
--- End "a-schema".target_table createLoadTable ---

--- Begin "Delta Updates" createLoadTable ---

CREATE TEMPORARY TABLE flow_temp_table_1 (
		"theKey" TEXT NOT NULL
) ON COMMIT DROP;
--- End "Delta Updates" createLoadTable ---

--- Begin "a-schema".target_table prepLoadInsert ---

PREPARE load_0 AS
INSERT INTO flow_temp_table_0 (key1, "key!2")
	VALUES ($1, $2);
--- End "a-schema".target_table prepLoadInsert ---

--- Begin "Delta Updates" prepLoadInsert ---

PREPARE load_1 AS
INSERT INTO flow_temp_table_1 ("theKey")
	VALUES ($1);
--- End "Delta Updates" prepLoadInsert ---

--- Begin "a-schema".target_table execLoadInsert ---
EXECUTE load_0--- End "a-schema".target_table execLoadInsert ---

--- Begin "Delta Updates" execLoadInsert ---
EXECUTE load_1--- End "Delta Updates" execLoadInsert ---

--- Begin "a-schema".target_table loadQuery ---

SELECT 0, r.flow_document
	FROM flow_temp_table_0 AS l
	JOIN "a-schema".target_table AS r
		 ON  l.key1 is not distinct from r.key1
		 AND l."key!2" is not distinct from r."key!2"

--- End "a-schema".target_table loadQuery ---

--- Begin "Delta Updates" loadQuery ---


SELECT -1, NULL LIMIT 0

--- End "Delta Updates" loadQuery ---

--- Begin "a-schema".target_table prepStoreInsert ---

PREPARE insert_0 AS
INSERT INTO "a-schema".target_table (
		key1,
		"key!2",
		"Camel_Case",
		"a Time",
		"array",
		lower_case,
		"value",
		flow_document
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8);
--- End "a-schema".target_table prepStoreInsert ---

--- Begin "Delta Updates" prepStoreInsert ---

PREPARE insert_1 AS
INSERT INTO "Delta Updates" (
		"theKey",
		"aValue"
) VALUES ($1, $2);
--- End "Delta Updates" prepStoreInsert ---

--- Begin "a-schema".target_table execStoreInsert ---
EXECUTE insert_0--- End "a-schema".target_table execStoreInsert ---

--- Begin "Delta Updates" execStoreInsert ---
EXECUTE insert_1--- End "Delta Updates" execStoreInsert ---

--- Begin "a-schema".target_table prepStoreUpdate ---

PREPARE update_0 AS
UPDATE "a-schema".target_table SET
		"Camel_Case" = $3,
		"a Time" = $4,
		"array" = $5,
		lower_case = $6,
		"value" = $7,
		flow_document = $8
	 WHERE key1 is not distinct from $1
	 AND   "key!2" is not distinct from $2;
--- End "a-schema".target_table prepStoreUpdate ---

--- Begin "Delta Updates" prepStoreUpdate ---

PREPARE update_1 AS
UPDATE "Delta Updates" SET
		"aValue" = $2
	 WHERE "theKey" is not distinct from $1;
--- End "Delta Updates" prepStoreUpdate ---

--- Begin "a-schema".target_table execStoreUpdate ---
EXECUTE update_0--- End "a-schema".target_table execStoreUpdate ---

--- Begin "Delta Updates" execStoreUpdate ---
EXECUTE update_1--- End "Delta Updates" execStoreUpdate ---

--- Begin Fence Install ---

with
-- Increment the fence value of _any_ checkpoint which overlaps our key range.
update_covered as (
	update path."To".checkpoints
		set   fence = fence + 1
		where materialization = 'some/Materialization'
		and   key_end >= 1122867
		and   key_begin <= 4293844428
	returning *
),
-- Read the checkpoint with the narrowest [key_begin, key_end] which fully overlaps our range.
best_match as (
	select materialization, key_begin, key_end, fence, checkpoint from update_covered
		where materialization = 'some/Materialization'
		and 	key_begin <= 1122867
		and   key_end >= 4293844428
		order by key_end - key_begin asc
		limit 1
),
-- Install a new checkpoint if best_match is not an exact match.
install_new as (
	insert into path."To".checkpoints (materialization, key_begin, key_end, fence, checkpoint)
		-- Case: best_match is a non-empty covering span but not an exact match
		select 'some/Materialization', 1122867, 4293844428, fence, checkpoint
			from best_match where key_begin != 1122867 or key_end != 4293844428
		union all
		-- Case: best_match is empty
		select 'some/Materialization', 1122867, 4293844428, 123, 'AAECAwQFBgcICQ=='
			where (select count(*) from best_match) = 0
	returning *
)
select fence, decode(checkpoint, 'base64') from install_new
union all
select fence, decode(checkpoint, 'base64') from best_match
limit 1
;
--- End Fence Install ---
--- Begin Fence Update ---

DO $$
BEGIN
	UPDATE path."To".checkpoints
		SET   checkpoint = 'AAECAwQFBgcICQ=='
		WHERE materialization = 'some/Materialization'
		AND   key_begin = 1122867
		AND   key_end   = 4293844428
		AND   fence     = 123;

	IF NOT FOUND THEN
		RAISE 'This instance was fenced off by another';
	END IF;
END $$;
--- End Fence Update ---

