[
  "applied.actionDescription",
  "\nCREATE TABLE IF NOT EXISTS `some-schema`.simple (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  canary STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /canary with inferred types: [string]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/simple' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.duplicate_keys_standard (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  int LONG COMMENT 'auto-generated projection of JSON at: /int with inferred types: [integer]',\n  str STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /str with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/duplicated-keys' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.duplicate_keys_delta (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  int LONG COMMENT 'auto-generated projection of JSON at: /int with inferred types: [integer]',\n  str STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /str with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/duplicated-keys' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.duplicate_keys_delta_exclude_flow_doc (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  int LONG COMMENT 'auto-generated projection of JSON at: /int with inferred types: [integer]',\n  str STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /str with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/duplicated-keys' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.multiple_types (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  array_int STRING COMMENT 'auto-generated projection of JSON at: /array_int with inferred types: [array]',\n  binary_field BINARY COMMENT 'auto-generated projection of JSON at: /binary_field with inferred types: [string]',\n  bool_field BOOLEAN COMMENT 'auto-generated projection of JSON at: /bool_field with inferred types: [boolean]',\n  float_field DOUBLE COMMENT 'auto-generated projection of JSON at: /float_field with inferred types: [number]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  multiple STRING COMMENT 'auto-generated projection of JSON at: /multiple with inferred types: [array boolean null number object string]',\n  nested STRING COMMENT 'auto-generated projection of JSON at: /nested with inferred types: [object]',\n  nullable_int LONG COMMENT 'auto-generated projection of JSON at: /nullable_int with inferred types: [integer null]',\n  str_field STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /str_field with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/multiple-data-types' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.formatted_strings (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  date DATE COMMENT 'auto-generated projection of JSON at: /date with inferred types: [string]',\n  datetime TIMESTAMP COMMENT 'auto-generated projection of JSON at: /datetime with inferred types: [string]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  int_and_str NUMERIC(38,0) COMMENT 'auto-generated projection of JSON at: /int_and_str with inferred types: [integer string]',\n  int_str NUMERIC(38,0) COMMENT 'auto-generated projection of JSON at: /int_str with inferred types: [string]',\n  num_and_str DOUBLE COMMENT 'auto-generated projection of JSON at: /num_and_str with inferred types: [number string]',\n  num_str DOUBLE COMMENT 'auto-generated projection of JSON at: /num_str with inferred types: [string]',\n  time STRING COMMENT 'auto-generated projection of JSON at: /time with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/formatted-strings' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.unsigned_bigint (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  unsigned_bigint NUMERIC(38,0) COMMENT 'auto-generated projection of JSON at: /unsigned_bigint with inferred types: [integer]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/unsigned-bigint' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.deletions (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  `_meta/op` STRING COMMENT 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/deletions' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.binary_key (\n  id BINARY NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [string]',\n  counter LONG COMMENT 'auto-generated projection of JSON at: /counter with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/binary-key' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.all_key_types_part_one (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  strintkey STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /strintkey with inferred types: [string]',\n  strnumkey STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /strnumkey with inferred types: [string]',\n  counter LONG COMMENT 'auto-generated projection of JSON at: /counter with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  strint NUMERIC(38,0) COMMENT 'auto-generated projection of JSON at: /strint with inferred types: [string]',\n  strnum DOUBLE COMMENT 'auto-generated projection of JSON at: /strnum with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/all-key-types-part-one' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.all_key_types_part_two (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  datekey STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /datekey with inferred types: [string]',\n  timekey STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /timekey with inferred types: [string]',\n  counter LONG COMMENT 'auto-generated projection of JSON at: /counter with inferred types: [integer]',\n  date DATE COMMENT 'auto-generated projection of JSON at: /date with inferred types: [string]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  time STRING COMMENT 'auto-generated projection of JSON at: /time with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/all-key-types-part-two' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.all_key_types_part_three (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  datetimekey STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /datetimekey with inferred types: [string]',\n  uuidkey STRING NOT NULL COMMENT 'auto-generated projection of JSON at: /uuidkey with inferred types: [string]',\n  counter LONG COMMENT 'auto-generated projection of JSON at: /counter with inferred types: [integer]',\n  datetime TIMESTAMP COMMENT 'auto-generated projection of JSON at: /datetime with inferred types: [string]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  uuid STRING COMMENT 'auto-generated projection of JSON at: /uuid with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/all-key-types-part-three' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.fields_with_projections (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  another_field STRING COMMENT 'auto-generated projection of JSON at: /another_field with inferred types: [string]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]',\n  projected_another STRING COMMENT 'user-provided projection of JSON at: /another_field with inferred types: [string]',\n  projected_field STRING COMMENT 'user-provided projection of JSON at: /original_field with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/fields-with-projections' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n\n\nCREATE TABLE IF NOT EXISTS `some-schema`.many_columns (\n  id LONG NOT NULL COMMENT 'auto-generated projection of JSON at: /id with inferred types: [integer]',\n  a0 LONG COMMENT 'auto-generated projection of JSON at: /a0 with inferred types: [integer]',\n  a1 LONG COMMENT 'auto-generated projection of JSON at: /a1 with inferred types: [integer]',\n  a10 LONG COMMENT 'auto-generated projection of JSON at: /a10 with inferred types: [integer]',\n  a11 LONG COMMENT 'auto-generated projection of JSON at: /a11 with inferred types: [integer]',\n  a12 LONG COMMENT 'auto-generated projection of JSON at: /a12 with inferred types: [integer]',\n  a13 LONG COMMENT 'auto-generated projection of JSON at: /a13 with inferred types: [integer]',\n  a14 LONG COMMENT 'auto-generated projection of JSON at: /a14 with inferred types: [integer]',\n  a15 LONG COMMENT 'auto-generated projection of JSON at: /a15 with inferred types: [integer]',\n  a16 LONG COMMENT 'auto-generated projection of JSON at: /a16 with inferred types: [integer]',\n  a17 LONG COMMENT 'auto-generated projection of JSON at: /a17 with inferred types: [integer]',\n  a18 LONG COMMENT 'auto-generated projection of JSON at: /a18 with inferred types: [integer]',\n  a19 LONG COMMENT 'auto-generated projection of JSON at: /a19 with inferred types: [integer]',\n  a2 LONG COMMENT 'auto-generated projection of JSON at: /a2 with inferred types: [integer]',\n  a20 LONG COMMENT 'auto-generated projection of JSON at: /a20 with inferred types: [integer]',\n  a21 LONG COMMENT 'auto-generated projection of JSON at: /a21 with inferred types: [integer]',\n  a22 LONG COMMENT 'auto-generated projection of JSON at: /a22 with inferred types: [integer]',\n  a23 LONG COMMENT 'auto-generated projection of JSON at: /a23 with inferred types: [integer]',\n  a24 LONG COMMENT 'auto-generated projection of JSON at: /a24 with inferred types: [integer]',\n  a25 LONG COMMENT 'auto-generated projection of JSON at: /a25 with inferred types: [integer]',\n  a26 LONG COMMENT 'auto-generated projection of JSON at: /a26 with inferred types: [integer]',\n  a27 LONG COMMENT 'auto-generated projection of JSON at: /a27 with inferred types: [integer]',\n  a28 LONG COMMENT 'auto-generated projection of JSON at: /a28 with inferred types: [integer]',\n  a29 LONG COMMENT 'auto-generated projection of JSON at: /a29 with inferred types: [integer]',\n  a3 LONG COMMENT 'auto-generated projection of JSON at: /a3 with inferred types: [integer]',\n  a30 LONG COMMENT 'auto-generated projection of JSON at: /a30 with inferred types: [integer]',\n  a31 LONG COMMENT 'auto-generated projection of JSON at: /a31 with inferred types: [integer]',\n  a32 LONG COMMENT 'auto-generated projection of JSON at: /a32 with inferred types: [integer]',\n  a33 LONG COMMENT 'auto-generated projection of JSON at: /a33 with inferred types: [integer]',\n  a34 LONG COMMENT 'auto-generated projection of JSON at: /a34 with inferred types: [integer]',\n  a35 LONG COMMENT 'auto-generated projection of JSON at: /a35 with inferred types: [integer]',\n  a36 LONG COMMENT 'auto-generated projection of JSON at: /a36 with inferred types: [integer]',\n  a37 LONG COMMENT 'auto-generated projection of JSON at: /a37 with inferred types: [integer]',\n  a38 LONG COMMENT 'auto-generated projection of JSON at: /a38 with inferred types: [integer]',\n  a39 LONG COMMENT 'auto-generated projection of JSON at: /a39 with inferred types: [integer]',\n  a4 LONG COMMENT 'auto-generated projection of JSON at: /a4 with inferred types: [integer]',\n  a40 LONG COMMENT 'auto-generated projection of JSON at: /a40 with inferred types: [integer]',\n  a41 LONG COMMENT 'auto-generated projection of JSON at: /a41 with inferred types: [integer]',\n  a42 LONG COMMENT 'auto-generated projection of JSON at: /a42 with inferred types: [integer]',\n  a43 LONG COMMENT 'auto-generated projection of JSON at: /a43 with inferred types: [integer]',\n  a44 LONG COMMENT 'auto-generated projection of JSON at: /a44 with inferred types: [integer]',\n  a45 LONG COMMENT 'auto-generated projection of JSON at: /a45 with inferred types: [integer]',\n  a46 LONG COMMENT 'auto-generated projection of JSON at: /a46 with inferred types: [integer]',\n  a47 LONG COMMENT 'auto-generated projection of JSON at: /a47 with inferred types: [integer]',\n  a48 LONG COMMENT 'auto-generated projection of JSON at: /a48 with inferred types: [integer]',\n  a49 LONG COMMENT 'auto-generated projection of JSON at: /a49 with inferred types: [integer]',\n  a5 LONG COMMENT 'auto-generated projection of JSON at: /a5 with inferred types: [integer]',\n  a50 LONG COMMENT 'auto-generated projection of JSON at: /a50 with inferred types: [integer]',\n  a51 LONG COMMENT 'auto-generated projection of JSON at: /a51 with inferred types: [integer]',\n  a52 LONG COMMENT 'auto-generated projection of JSON at: /a52 with inferred types: [integer]',\n  a53 LONG COMMENT 'auto-generated projection of JSON at: /a53 with inferred types: [integer]',\n  a54 LONG COMMENT 'auto-generated projection of JSON at: /a54 with inferred types: [integer]',\n  a55 LONG COMMENT 'auto-generated projection of JSON at: /a55 with inferred types: [integer]',\n  a56 LONG COMMENT 'auto-generated projection of JSON at: /a56 with inferred types: [integer]',\n  a57 LONG COMMENT 'auto-generated projection of JSON at: /a57 with inferred types: [integer]',\n  a58 LONG COMMENT 'auto-generated projection of JSON at: /a58 with inferred types: [integer]',\n  a59 LONG COMMENT 'auto-generated projection of JSON at: /a59 with inferred types: [integer]',\n  a6 LONG COMMENT 'auto-generated projection of JSON at: /a6 with inferred types: [integer]',\n  a60 LONG COMMENT 'auto-generated projection of JSON at: /a60 with inferred types: [integer]',\n  a61 LONG COMMENT 'auto-generated projection of JSON at: /a61 with inferred types: [integer]',\n  a62 LONG COMMENT 'auto-generated projection of JSON at: /a62 with inferred types: [integer]',\n  a63 LONG COMMENT 'auto-generated projection of JSON at: /a63 with inferred types: [integer]',\n  a64 LONG COMMENT 'auto-generated projection of JSON at: /a64 with inferred types: [integer]',\n  a65 LONG COMMENT 'auto-generated projection of JSON at: /a65 with inferred types: [integer]',\n  a66 LONG COMMENT 'auto-generated projection of JSON at: /a66 with inferred types: [integer]',\n  a67 LONG COMMENT 'auto-generated projection of JSON at: /a67 with inferred types: [integer]',\n  a68 LONG COMMENT 'auto-generated projection of JSON at: /a68 with inferred types: [integer]',\n  a69 LONG COMMENT 'auto-generated projection of JSON at: /a69 with inferred types: [integer]',\n  a7 LONG COMMENT 'auto-generated projection of JSON at: /a7 with inferred types: [integer]',\n  a70 LONG COMMENT 'auto-generated projection of JSON at: /a70 with inferred types: [integer]',\n  a71 LONG COMMENT 'auto-generated projection of JSON at: /a71 with inferred types: [integer]',\n  a72 LONG COMMENT 'auto-generated projection of JSON at: /a72 with inferred types: [integer]',\n  a73 LONG COMMENT 'auto-generated projection of JSON at: /a73 with inferred types: [integer]',\n  a74 LONG COMMENT 'auto-generated projection of JSON at: /a74 with inferred types: [integer]',\n  a75 LONG COMMENT 'auto-generated projection of JSON at: /a75 with inferred types: [integer]',\n  a76 LONG COMMENT 'auto-generated projection of JSON at: /a76 with inferred types: [integer]',\n  a77 LONG COMMENT 'auto-generated projection of JSON at: /a77 with inferred types: [integer]',\n  a78 LONG COMMENT 'auto-generated projection of JSON at: /a78 with inferred types: [integer]',\n  a79 LONG COMMENT 'auto-generated projection of JSON at: /a79 with inferred types: [integer]',\n  a8 LONG COMMENT 'auto-generated projection of JSON at: /a8 with inferred types: [integer]',\n  a80 LONG COMMENT 'auto-generated projection of JSON at: /a80 with inferred types: [integer]',\n  a81 LONG COMMENT 'auto-generated projection of JSON at: /a81 with inferred types: [integer]',\n  a82 LONG COMMENT 'auto-generated projection of JSON at: /a82 with inferred types: [integer]',\n  a83 LONG COMMENT 'auto-generated projection of JSON at: /a83 with inferred types: [integer]',\n  a84 LONG COMMENT 'auto-generated projection of JSON at: /a84 with inferred types: [integer]',\n  a85 LONG COMMENT 'auto-generated projection of JSON at: /a85 with inferred types: [integer]',\n  a86 LONG COMMENT 'auto-generated projection of JSON at: /a86 with inferred types: [integer]',\n  a87 LONG COMMENT 'auto-generated projection of JSON at: /a87 with inferred types: [integer]',\n  a88 LONG COMMENT 'auto-generated projection of JSON at: /a88 with inferred types: [integer]',\n  a89 LONG COMMENT 'auto-generated projection of JSON at: /a89 with inferred types: [integer]',\n  a9 LONG COMMENT 'auto-generated projection of JSON at: /a9 with inferred types: [integer]',\n  a90 LONG COMMENT 'auto-generated projection of JSON at: /a90 with inferred types: [integer]',\n  a91 LONG COMMENT 'auto-generated projection of JSON at: /a91 with inferred types: [integer]',\n  a92 LONG COMMENT 'auto-generated projection of JSON at: /a92 with inferred types: [integer]',\n  a93 LONG COMMENT 'auto-generated projection of JSON at: /a93 with inferred types: [integer]',\n  a94 LONG COMMENT 'auto-generated projection of JSON at: /a94 with inferred types: [integer]',\n  a95 LONG COMMENT 'auto-generated projection of JSON at: /a95 with inferred types: [integer]',\n  a96 LONG COMMENT 'auto-generated projection of JSON at: /a96 with inferred types: [integer]',\n  a97 LONG COMMENT 'auto-generated projection of JSON at: /a97 with inferred types: [integer]',\n  a98 LONG COMMENT 'auto-generated projection of JSON at: /a98 with inferred types: [integer]',\n  a99 LONG COMMENT 'auto-generated projection of JSON at: /a99 with inferred types: [integer]',\n  flow_published_at TIMESTAMP NOT NULL COMMENT 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]'\n) COMMENT 'Generated for materialization tests/materialize-databricks/materialize of collection tests/many-columns' TBLPROPERTIES ('delta.columnMapping.mode' = 'name');\n"
]
[
  "connectorState",
  {
    "updated": {}
  }
]
[
  "connectorState",
  {
    "updated": {
      "some-schema%2Fall_key_types_part_one": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.all_key_types_part_one AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, strintkey::STRING, strnumkey::STRING, counter::LONG, flow_published_at::TIMESTAMP, strint::NUMERIC(38,0), strnum::DOUBLE, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n    AND l.strintkey = r.strintkey AND l.strintkey >= '1' AND l.strintkey <= '1'\n    AND l.strnumkey = r.strnumkey AND l.strnumkey >= '10.1' AND l.strnumkey <= '10.1'\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.flow_published_at = r.flow_published_at, l.strint = r.strint, l.strnum = r.strnum\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, strintkey, strnumkey, counter, flow_published_at, strint, strnum)\n\t\tVALUES (r.id, r.strintkey, r.strnumkey, r.counter, r.flow_published_at, r.strint, r.strnum);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fall_key_types_part_three": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.all_key_types_part_three AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, datetimekey::STRING, uuidkey::STRING, counter::LONG, datetime::TIMESTAMP, flow_published_at::TIMESTAMP, uuid::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n    AND l.datetimekey = r.datetimekey\n    AND l.uuidkey = r.uuidkey AND l.uuidkey >= '550e8400-e29b-41d4-a716-446655440000' AND l.uuidkey <= '550e8400-e29b-41d4-a716-446655440000'\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.datetime = r.datetime, l.flow_published_at = r.flow_published_at, l.uuid = r.uuid\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, datetimekey, uuidkey, counter, datetime, flow_published_at, uuid)\n\t\tVALUES (r.id, r.datetimekey, r.uuidkey, r.counter, r.datetime, r.flow_published_at, r.uuid);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fall_key_types_part_two": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.all_key_types_part_two AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, datekey::STRING, timekey::STRING, counter::LONG, date::DATE, flow_published_at::TIMESTAMP, time::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n    AND l.datekey = r.datekey AND l.datekey >= '0000-01-01' AND l.datekey <= '0000-01-01'\n    AND l.timekey = r.timekey AND l.timekey >= '12:34:56Z' AND l.timekey <= '12:34:56Z'\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.date = r.date, l.flow_published_at = r.flow_published_at, l.time = r.time\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, datekey, timekey, counter, date, flow_published_at, time)\n\t\tVALUES (r.id, r.datekey, r.timekey, r.counter, r.date, r.flow_published_at, r.time);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fbinary_key": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.binary_key AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tunbase64(id)::BINARY as id, counter::LONG, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, counter, flow_published_at)\n\t\tVALUES (r.id, r.counter, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fdeletions": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.deletions AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, `_meta/op`::STRING, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 2\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.`_meta/op` = r.`_meta/op`, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, `_meta/op`, flow_published_at)\n\t\tVALUES (r.id, r.`_meta/op`, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_delta": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_delta_exclude_flow_doc": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta_exclude_flow_doc FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_standard": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.duplicate_keys_standard AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 5\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.flow_published_at = r.flow_published_at, l.int = r.int, l.str = r.str\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, flow_published_at, int, str)\n\t\tVALUES (r.id, r.flow_published_at, r.int, r.str);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Ffields_with_projections": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.fields_with_projections AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, another_field::STRING, flow_published_at::TIMESTAMP, projected_another::STRING, projected_field::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.another_field = r.another_field, l.flow_published_at = r.flow_published_at, l.projected_another = r.projected_another, l.projected_field = r.projected_field\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, another_field, flow_published_at, projected_another, projected_field)\n\t\tVALUES (r.id, r.another_field, r.flow_published_at, r.projected_another, r.projected_field);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fformatted_strings": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.formatted_strings AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, date::DATE, datetime::TIMESTAMP, flow_published_at::TIMESTAMP, int_and_str::NUMERIC(38,0), int_str::NUMERIC(38,0), num_and_str::DOUBLE, num_str::DOUBLE, time::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 3 AND l.id <= 4\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.date = r.date, l.datetime = r.datetime, l.flow_published_at = r.flow_published_at, l.int_and_str = r.int_and_str, l.int_str = r.int_str, l.num_and_str = r.num_and_str, l.num_str = r.num_str, l.time = r.time\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, date, datetime, flow_published_at, int_and_str, int_str, num_and_str, num_str, time)\n\t\tVALUES (r.id, r.date, r.datetime, r.flow_published_at, r.int_and_str, r.int_str, r.num_and_str, r.num_str, r.time);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fmany_columns": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.many_columns AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, a0::LONG, a1::LONG, a10::LONG, a11::LONG, a12::LONG, a13::LONG, a14::LONG, a15::LONG, a16::LONG, a17::LONG, a18::LONG, a19::LONG, a2::LONG, a20::LONG, a21::LONG, a22::LONG, a23::LONG, a24::LONG, a25::LONG, a26::LONG, a27::LONG, a28::LONG, a29::LONG, a3::LONG, a30::LONG, a31::LONG, a32::LONG, a33::LONG, a34::LONG, a35::LONG, a36::LONG, a37::LONG, a38::LONG, a39::LONG, a4::LONG, a40::LONG, a41::LONG, a42::LONG, a43::LONG, a44::LONG, a45::LONG, a46::LONG, a47::LONG, a48::LONG, a49::LONG, a5::LONG, a50::LONG, a51::LONG, a52::LONG, a53::LONG, a54::LONG, a55::LONG, a56::LONG, a57::LONG, a58::LONG, a59::LONG, a6::LONG, a60::LONG, a61::LONG, a62::LONG, a63::LONG, a64::LONG, a65::LONG, a66::LONG, a67::LONG, a68::LONG, a69::LONG, a7::LONG, a70::LONG, a71::LONG, a72::LONG, a73::LONG, a74::LONG, a75::LONG, a76::LONG, a77::LONG, a78::LONG, a79::LONG, a8::LONG, a80::LONG, a81::LONG, a82::LONG, a83::LONG, a84::LONG, a85::LONG, a86::LONG, a87::LONG, a88::LONG, a89::LONG, a9::LONG, a90::LONG, a91::LONG, a92::LONG, a93::LONG, a94::LONG, a95::LONG, a96::LONG, a97::LONG, a98::LONG, a99::LONG, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.a0 = r.a0, l.a1 = r.a1, l.a10 = r.a10, l.a11 = r.a11, l.a12 = r.a12, l.a13 = r.a13, l.a14 = r.a14, l.a15 = r.a15, l.a16 = r.a16, l.a17 = r.a17, l.a18 = r.a18, l.a19 = r.a19, l.a2 = r.a2, l.a20 = r.a20, l.a21 = r.a21, l.a22 = r.a22, l.a23 = r.a23, l.a24 = r.a24, l.a25 = r.a25, l.a26 = r.a26, l.a27 = r.a27, l.a28 = r.a28, l.a29 = r.a29, l.a3 = r.a3, l.a30 = r.a30, l.a31 = r.a31, l.a32 = r.a32, l.a33 = r.a33, l.a34 = r.a34, l.a35 = r.a35, l.a36 = r.a36, l.a37 = r.a37, l.a38 = r.a38, l.a39 = r.a39, l.a4 = r.a4, l.a40 = r.a40, l.a41 = r.a41, l.a42 = r.a42, l.a43 = r.a43, l.a44 = r.a44, l.a45 = r.a45, l.a46 = r.a46, l.a47 = r.a47, l.a48 = r.a48, l.a49 = r.a49, l.a5 = r.a5, l.a50 = r.a50, l.a51 = r.a51, l.a52 = r.a52, l.a53 = r.a53, l.a54 = r.a54, l.a55 = r.a55, l.a56 = r.a56, l.a57 = r.a57, l.a58 = r.a58, l.a59 = r.a59, l.a6 = r.a6, l.a60 = r.a60, l.a61 = r.a61, l.a62 = r.a62, l.a63 = r.a63, l.a64 = r.a64, l.a65 = r.a65, l.a66 = r.a66, l.a67 = r.a67, l.a68 = r.a68, l.a69 = r.a69, l.a7 = r.a7, l.a70 = r.a70, l.a71 = r.a71, l.a72 = r.a72, l.a73 = r.a73, l.a74 = r.a74, l.a75 = r.a75, l.a76 = r.a76, l.a77 = r.a77, l.a78 = r.a78, l.a79 = r.a79, l.a8 = r.a8, l.a80 = r.a80, l.a81 = r.a81, l.a82 = r.a82, l.a83 = r.a83, l.a84 = r.a84, l.a85 = r.a85, l.a86 = r.a86, l.a87 = r.a87, l.a88 = r.a88, l.a89 = r.a89, l.a9 = r.a9, l.a90 = r.a90, l.a91 = r.a91, l.a92 = r.a92, l.a93 = r.a93, l.a94 = r.a94, l.a95 = r.a95, l.a96 = r.a96, l.a97 = r.a97, l.a98 = r.a98, l.a99 = r.a99, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a6, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a7, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a8, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a9, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, flow_published_at)\n\t\tVALUES (r.id, r.a0, r.a1, r.a10, r.a11, r.a12, r.a13, r.a14, r.a15, r.a16, r.a17, r.a18, r.a19, r.a2, r.a20, r.a21, r.a22, r.a23, r.a24, r.a25, r.a26, r.a27, r.a28, r.a29, r.a3, r.a30, r.a31, r.a32, r.a33, r.a34, r.a35, r.a36, r.a37, r.a38, r.a39, r.a4, r.a40, r.a41, r.a42, r.a43, r.a44, r.a45, r.a46, r.a47, r.a48, r.a49, r.a5, r.a50, r.a51, r.a52, r.a53, r.a54, r.a55, r.a56, r.a57, r.a58, r.a59, r.a6, r.a60, r.a61, r.a62, r.a63, r.a64, r.a65, r.a66, r.a67, r.a68, r.a69, r.a7, r.a70, r.a71, r.a72, r.a73, r.a74, r.a75, r.a76, r.a77, r.a78, r.a79, r.a8, r.a80, r.a81, r.a82, r.a83, r.a84, r.a85, r.a86, r.a87, r.a88, r.a89, r.a9, r.a90, r.a91, r.a92, r.a93, r.a94, r.a95, r.a96, r.a97, r.a98, r.a99, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fmultiple_types": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.multiple_types AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, array_int::STRING, unbase64(binary_field)::BINARY as binary_field, bool_field::BOOLEAN, float_field::DOUBLE, flow_published_at::TIMESTAMP, multiple::STRING, nested::STRING, nullable_int::LONG, str_field::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 10\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.array_int = r.array_int, l.binary_field = r.binary_field, l.bool_field = r.bool_field, l.float_field = r.float_field, l.flow_published_at = r.flow_published_at, l.multiple = r.multiple, l.nested = r.nested, l.nullable_int = r.nullable_int, l.str_field = r.str_field\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, array_int, binary_field, bool_field, float_field, flow_published_at, multiple, nested, nullable_int, str_field)\n\t\tVALUES (r.id, r.array_int, r.binary_field, r.bool_field, r.float_field, r.flow_published_at, r.multiple, r.nested, r.nullable_int, r.str_field);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fsimple": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.simple AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, canary::STRING, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 6\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.canary = r.canary, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, canary, flow_published_at)\n\t\tVALUES (r.id, r.canary, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Funsigned_bigint": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.unsigned_bigint AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, flow_published_at::TIMESTAMP, unsigned_bigint::NUMERIC(38,0), _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.flow_published_at = r.flow_published_at, l.unsigned_bigint = r.unsigned_bigint\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, flow_published_at, unsigned_bigint)\n\t\tVALUES (r.id, r.flow_published_at, r.unsigned_bigint);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      }
    }
  }
]
[
  "connectorState",
  {
    "updated": {
      "some-schema%2Fall_key_types_part_one": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.all_key_types_part_one AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, strintkey::STRING, strnumkey::STRING, counter::LONG, flow_published_at::TIMESTAMP, strint::NUMERIC(38,0), strnum::DOUBLE, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n    AND l.strintkey = r.strintkey AND l.strintkey >= '1' AND l.strintkey <= '1'\n    AND l.strnumkey = r.strnumkey AND l.strnumkey >= '10.1' AND l.strnumkey <= '10.1'\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.flow_published_at = r.flow_published_at, l.strint = r.strint, l.strnum = r.strnum\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, strintkey, strnumkey, counter, flow_published_at, strint, strnum)\n\t\tVALUES (r.id, r.strintkey, r.strnumkey, r.counter, r.flow_published_at, r.strint, r.strnum);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fall_key_types_part_three": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.all_key_types_part_three AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, datetimekey::STRING, uuidkey::STRING, counter::LONG, datetime::TIMESTAMP, flow_published_at::TIMESTAMP, uuid::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n    AND l.datetimekey = r.datetimekey\n    AND l.uuidkey = r.uuidkey AND l.uuidkey >= '550e8400-e29b-41d4-a716-446655440000' AND l.uuidkey <= '550e8400-e29b-41d4-a716-446655440000'\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.datetime = r.datetime, l.flow_published_at = r.flow_published_at, l.uuid = r.uuid\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, datetimekey, uuidkey, counter, datetime, flow_published_at, uuid)\n\t\tVALUES (r.id, r.datetimekey, r.uuidkey, r.counter, r.datetime, r.flow_published_at, r.uuid);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fall_key_types_part_two": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.all_key_types_part_two AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, datekey::STRING, timekey::STRING, counter::LONG, date::DATE, flow_published_at::TIMESTAMP, time::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n    AND l.datekey = r.datekey AND l.datekey >= '0000-01-01' AND l.datekey <= '0000-01-01'\n    AND l.timekey = r.timekey AND l.timekey >= '12:34:56Z' AND l.timekey <= '12:34:56Z'\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.date = r.date, l.flow_published_at = r.flow_published_at, l.time = r.time\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, datekey, timekey, counter, date, flow_published_at, time)\n\t\tVALUES (r.id, r.datekey, r.timekey, r.counter, r.date, r.flow_published_at, r.time);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fbinary_key": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.binary_key AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tunbase64(id)::BINARY as id, counter::LONG, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.counter = r.counter, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, counter, flow_published_at)\n\t\tVALUES (r.id, r.counter, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fdeletions": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.deletions AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, `_meta/op`::STRING, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 3\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.`_meta/op` = r.`_meta/op`, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, `_meta/op`, flow_published_at)\n\t\tVALUES (r.id, r.`_meta/op`, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_delta": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_delta_exclude_flow_doc": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta_exclude_flow_doc FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_standard": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.duplicate_keys_standard AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 5\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.flow_published_at = r.flow_published_at, l.int = r.int, l.str = r.str\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, flow_published_at, int, str)\n\t\tVALUES (r.id, r.flow_published_at, r.int, r.str);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Ffields_with_projections": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.fields_with_projections AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, another_field::STRING, flow_published_at::TIMESTAMP, projected_another::STRING, projected_field::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.another_field = r.another_field, l.flow_published_at = r.flow_published_at, l.projected_another = r.projected_another, l.projected_field = r.projected_field\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, another_field, flow_published_at, projected_another, projected_field)\n\t\tVALUES (r.id, r.another_field, r.flow_published_at, r.projected_another, r.projected_field);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fformatted_strings": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.formatted_strings AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, date::DATE, datetime::TIMESTAMP, flow_published_at::TIMESTAMP, int_and_str::NUMERIC(38,0), int_str::NUMERIC(38,0), num_and_str::DOUBLE, num_str::DOUBLE, time::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 10\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.date = r.date, l.datetime = r.datetime, l.flow_published_at = r.flow_published_at, l.int_and_str = r.int_and_str, l.int_str = r.int_str, l.num_and_str = r.num_and_str, l.num_str = r.num_str, l.time = r.time\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, date, datetime, flow_published_at, int_and_str, int_str, num_and_str, num_str, time)\n\t\tVALUES (r.id, r.date, r.datetime, r.flow_published_at, r.int_and_str, r.int_str, r.num_and_str, r.num_str, r.time);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fmany_columns": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.many_columns AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, a0::LONG, a1::LONG, a10::LONG, a11::LONG, a12::LONG, a13::LONG, a14::LONG, a15::LONG, a16::LONG, a17::LONG, a18::LONG, a19::LONG, a2::LONG, a20::LONG, a21::LONG, a22::LONG, a23::LONG, a24::LONG, a25::LONG, a26::LONG, a27::LONG, a28::LONG, a29::LONG, a3::LONG, a30::LONG, a31::LONG, a32::LONG, a33::LONG, a34::LONG, a35::LONG, a36::LONG, a37::LONG, a38::LONG, a39::LONG, a4::LONG, a40::LONG, a41::LONG, a42::LONG, a43::LONG, a44::LONG, a45::LONG, a46::LONG, a47::LONG, a48::LONG, a49::LONG, a5::LONG, a50::LONG, a51::LONG, a52::LONG, a53::LONG, a54::LONG, a55::LONG, a56::LONG, a57::LONG, a58::LONG, a59::LONG, a6::LONG, a60::LONG, a61::LONG, a62::LONG, a63::LONG, a64::LONG, a65::LONG, a66::LONG, a67::LONG, a68::LONG, a69::LONG, a7::LONG, a70::LONG, a71::LONG, a72::LONG, a73::LONG, a74::LONG, a75::LONG, a76::LONG, a77::LONG, a78::LONG, a79::LONG, a8::LONG, a80::LONG, a81::LONG, a82::LONG, a83::LONG, a84::LONG, a85::LONG, a86::LONG, a87::LONG, a88::LONG, a89::LONG, a9::LONG, a90::LONG, a91::LONG, a92::LONG, a93::LONG, a94::LONG, a95::LONG, a96::LONG, a97::LONG, a98::LONG, a99::LONG, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 1 AND l.id <= 1\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.a0 = r.a0, l.a1 = r.a1, l.a10 = r.a10, l.a11 = r.a11, l.a12 = r.a12, l.a13 = r.a13, l.a14 = r.a14, l.a15 = r.a15, l.a16 = r.a16, l.a17 = r.a17, l.a18 = r.a18, l.a19 = r.a19, l.a2 = r.a2, l.a20 = r.a20, l.a21 = r.a21, l.a22 = r.a22, l.a23 = r.a23, l.a24 = r.a24, l.a25 = r.a25, l.a26 = r.a26, l.a27 = r.a27, l.a28 = r.a28, l.a29 = r.a29, l.a3 = r.a3, l.a30 = r.a30, l.a31 = r.a31, l.a32 = r.a32, l.a33 = r.a33, l.a34 = r.a34, l.a35 = r.a35, l.a36 = r.a36, l.a37 = r.a37, l.a38 = r.a38, l.a39 = r.a39, l.a4 = r.a4, l.a40 = r.a40, l.a41 = r.a41, l.a42 = r.a42, l.a43 = r.a43, l.a44 = r.a44, l.a45 = r.a45, l.a46 = r.a46, l.a47 = r.a47, l.a48 = r.a48, l.a49 = r.a49, l.a5 = r.a5, l.a50 = r.a50, l.a51 = r.a51, l.a52 = r.a52, l.a53 = r.a53, l.a54 = r.a54, l.a55 = r.a55, l.a56 = r.a56, l.a57 = r.a57, l.a58 = r.a58, l.a59 = r.a59, l.a6 = r.a6, l.a60 = r.a60, l.a61 = r.a61, l.a62 = r.a62, l.a63 = r.a63, l.a64 = r.a64, l.a65 = r.a65, l.a66 = r.a66, l.a67 = r.a67, l.a68 = r.a68, l.a69 = r.a69, l.a7 = r.a7, l.a70 = r.a70, l.a71 = r.a71, l.a72 = r.a72, l.a73 = r.a73, l.a74 = r.a74, l.a75 = r.a75, l.a76 = r.a76, l.a77 = r.a77, l.a78 = r.a78, l.a79 = r.a79, l.a8 = r.a8, l.a80 = r.a80, l.a81 = r.a81, l.a82 = r.a82, l.a83 = r.a83, l.a84 = r.a84, l.a85 = r.a85, l.a86 = r.a86, l.a87 = r.a87, l.a88 = r.a88, l.a89 = r.a89, l.a9 = r.a9, l.a90 = r.a90, l.a91 = r.a91, l.a92 = r.a92, l.a93 = r.a93, l.a94 = r.a94, l.a95 = r.a95, l.a96 = r.a96, l.a97 = r.a97, l.a98 = r.a98, l.a99 = r.a99, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a6, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a7, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a8, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a9, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, flow_published_at)\n\t\tVALUES (r.id, r.a0, r.a1, r.a10, r.a11, r.a12, r.a13, r.a14, r.a15, r.a16, r.a17, r.a18, r.a19, r.a2, r.a20, r.a21, r.a22, r.a23, r.a24, r.a25, r.a26, r.a27, r.a28, r.a29, r.a3, r.a30, r.a31, r.a32, r.a33, r.a34, r.a35, r.a36, r.a37, r.a38, r.a39, r.a4, r.a40, r.a41, r.a42, r.a43, r.a44, r.a45, r.a46, r.a47, r.a48, r.a49, r.a5, r.a50, r.a51, r.a52, r.a53, r.a54, r.a55, r.a56, r.a57, r.a58, r.a59, r.a6, r.a60, r.a61, r.a62, r.a63, r.a64, r.a65, r.a66, r.a67, r.a68, r.a69, r.a7, r.a70, r.a71, r.a72, r.a73, r.a74, r.a75, r.a76, r.a77, r.a78, r.a79, r.a8, r.a80, r.a81, r.a82, r.a83, r.a84, r.a85, r.a86, r.a87, r.a88, r.a89, r.a9, r.a90, r.a91, r.a92, r.a93, r.a94, r.a95, r.a96, r.a97, r.a98, r.a99, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fmultiple_types": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.multiple_types AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, array_int::STRING, unbase64(binary_field)::BINARY as binary_field, bool_field::BOOLEAN, float_field::DOUBLE, flow_published_at::TIMESTAMP, multiple::STRING, nested::STRING, nullable_int::LONG, str_field::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 6 AND l.id <= 10\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.array_int = r.array_int, l.binary_field = r.binary_field, l.bool_field = r.bool_field, l.float_field = r.float_field, l.flow_published_at = r.flow_published_at, l.multiple = r.multiple, l.nested = r.nested, l.nullable_int = r.nullable_int, l.str_field = r.str_field\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, array_int, binary_field, bool_field, float_field, flow_published_at, multiple, nested, nullable_int, str_field)\n\t\tVALUES (r.id, r.array_int, r.binary_field, r.bool_field, r.float_field, r.flow_published_at, r.multiple, r.nested, r.nullable_int, r.str_field);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fsimple": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.simple AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, canary::STRING, flow_published_at::TIMESTAMP, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 7 AND l.id <= 10\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.canary = r.canary, l.flow_published_at = r.flow_published_at\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, canary, flow_published_at)\n\t\tVALUES (r.id, r.canary, r.flow_published_at);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      }
    }
  }
]
[
  "connectorState",
  {
    "updated": {
      "some-schema%2Fduplicate_keys_delta": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_delta_exclude_flow_doc": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta_exclude_flow_doc FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_standard": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.duplicate_keys_standard AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 6 AND l.id <= 10\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.flow_published_at = r.flow_published_at, l.int = r.int, l.str = r.str\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, flow_published_at, int, str)\n\t\tVALUES (r.id, r.flow_published_at, r.int, r.str);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      }
    }
  }
]
[
  "connectorState",
  {
    "updated": {
      "some-schema%2Fduplicate_keys_delta": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_delta_exclude_flow_doc": {
        "Queries": [
          "\n\tCOPY INTO `some-schema`.duplicate_keys_delta_exclude_flow_doc FROM (\n    SELECT\n\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING\n  FROM '/Volumes/main/some-schema/flow_staging/flow_temp_tables'\n\t)\n  FILEFORMAT = JSON\n  FILES = ('<uuid>')\n  FORMAT_OPTIONS ( 'mode' = 'FAILFAST', 'ignoreMissingFiles' = 'false' )\n\tCOPY_OPTIONS ( 'mergeSchema' = 'true' )\n  ;\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      },
      "some-schema%2Fduplicate_keys_standard": {
        "Queries": [
          "\n\tMERGE INTO `some-schema`.duplicate_keys_standard AS l\n\tUSING (\n\t\t(\n\t\t\tSELECT\n\t\t\tid::LONG, flow_published_at::TIMESTAMP, int::LONG, str::STRING, _flow_delete::BOOLEAN\n\t\t\tFROM json.`/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>`\n\t\t)\n\t) AS r\n  ON \n    l.id = r.id AND l.id >= 6 AND l.id <= 10\n\tWHEN MATCHED AND r._flow_delete THEN\n\t\tDELETE\n\tWHEN MATCHED THEN\n\t\tUPDATE SET l.flow_published_at = r.flow_published_at, l.int = r.int, l.str = r.str\n\tWHEN NOT MATCHED AND NOT r._flow_delete THEN\n\t\tINSERT (id, flow_published_at, int, str)\n\t\tVALUES (r.id, r.flow_published_at, r.int, r.str);\n"
        ],
        "ToDelete": [
          "/Volumes/main/some-schema/flow_staging/flow_temp_tables/<uuid>"
        ]
      }
    }
  }
]
{
  "rows": [
    {
      "canary": "amputation's",
      "flow_published_at": "1970-01-01T01:00:00Z",
      "id": 1
    },
    {
      "canary": "armament's",
      "flow_published_at": "1970-01-01T01:00:01Z",
      "id": 2
    },
    {
      "canary": "splatters",
      "flow_published_at": "1970-01-01T01:00:02Z",
      "id": 3
    },
    {
      "canary": "strengthen",
      "flow_published_at": "1970-01-01T01:00:03Z",
      "id": 4
    },
    {
      "canary": "Kringle's",
      "flow_published_at": "1970-01-01T01:00:04Z",
      "id": 5
    },
    {
      "canary": "grosbeak's",
      "flow_published_at": "1970-01-01T01:00:05Z",
      "id": 6
    },
    {
      "canary": "pieced",
      "flow_published_at": "1970-01-01T02:00:00Z",
      "id": 7
    },
    {
      "canary": "roaches",
      "flow_published_at": "1970-01-01T02:00:01Z",
      "id": 8
    },
    {
      "canary": "devilish",
      "flow_published_at": "1970-01-01T02:00:02Z",
      "id": 9
    },
    {
      "canary": "glucose's",
      "flow_published_at": "1970-01-01T02:00:03Z",
      "id": 10
    }
  ],
  "table": "`main`.`some-schema`.simple"
}
{
  "rows": [
    {
      "flow_published_at": "1970-01-01T02:00:04Z",
      "id": 1,
      "int": 7,
      "str": "str 6"
    },
    {
      "flow_published_at": "1970-01-01T02:00:05Z",
      "id": 2,
      "int": 9,
      "str": "str 7"
    },
    {
      "flow_published_at": "1970-01-01T02:00:06Z",
      "id": 3,
      "int": 11,
      "str": "str 8"
    },
    {
      "flow_published_at": "1970-01-01T02:00:07Z",
      "id": 4,
      "int": 13,
      "str": "str 9"
    },
    {
      "flow_published_at": "1970-01-01T02:00:08Z",
      "id": 5,
      "int": 15,
      "str": "str 10"
    },
    {
      "flow_published_at": "1970-01-01T03:00:00Z",
      "id": 6,
      "int": 11,
      "str": "str 11"
    },
    {
      "flow_published_at": "1970-01-01T03:00:01Z",
      "id": 7,
      "int": 12,
      "str": "str 12"
    },
    {
      "flow_published_at": "1970-01-01T03:00:02Z",
      "id": 8,
      "int": 13,
      "str": "str 13"
    },
    {
      "flow_published_at": "1970-01-01T03:00:03Z",
      "id": 9,
      "int": 14,
      "str": "str 14"
    },
    {
      "flow_published_at": "1970-01-01T03:00:04Z",
      "id": 10,
      "int": 15,
      "str": "str 15"
    }
  ],
  "table": "`main`.`some-schema`.duplicate_keys_standard"
}
{
  "rows": [
    {
      "flow_published_at": "1970-01-01T01:00:06Z",
      "id": 1,
      "int": 1,
      "str": "str 1"
    },
    {
      "flow_published_at": "1970-01-01T02:00:04Z",
      "id": 1,
      "int": 6,
      "str": "str 6"
    },
    {
      "flow_published_at": "1970-01-01T01:00:07Z",
      "id": 2,
      "int": 2,
      "str": "str 2"
    },
    {
      "flow_published_at": "1970-01-01T02:00:05Z",
      "id": 2,
      "int": 7,
      "str": "str 7"
    },
    {
      "flow_published_at": "1970-01-01T01:00:08Z",
      "id": 3,
      "int": 3,
      "str": "str 3"
    },
    {
      "flow_published_at": "1970-01-01T02:00:06Z",
      "id": 3,
      "int": 8,
      "str": "str 8"
    },
    {
      "flow_published_at": "1970-01-01T01:00:09Z",
      "id": 4,
      "int": 4,
      "str": "str 4"
    },
    {
      "flow_published_at": "1970-01-01T02:00:07Z",
      "id": 4,
      "int": 9,
      "str": "str 9"
    },
    {
      "flow_published_at": "1970-01-01T01:00:10Z",
      "id": 5,
      "int": 5,
      "str": "str 5"
    },
    {
      "flow_published_at": "1970-01-01T02:00:08Z",
      "id": 5,
      "int": 10,
      "str": "str 10"
    },
    {
      "flow_published_at": "1970-01-01T03:00:00Z",
      "id": 6,
      "int": 11,
      "str": "str 11"
    },
    {
      "flow_published_at": "1970-01-01T03:00:01Z",
      "id": 7,
      "int": 12,
      "str": "str 12"
    },
    {
      "flow_published_at": "1970-01-01T03:00:02Z",
      "id": 8,
      "int": 13,
      "str": "str 13"
    },
    {
      "flow_published_at": "1970-01-01T03:00:03Z",
      "id": 9,
      "int": 14,
      "str": "str 14"
    },
    {
      "flow_published_at": "1970-01-01T03:00:04Z",
      "id": 10,
      "int": 15,
      "str": "str 15"
    }
  ],
  "table": "`main`.`some-schema`.duplicate_keys_delta"
}
{
  "rows": [
    {
      "flow_published_at": "1970-01-01T01:00:06Z",
      "id": 1,
      "int": 1,
      "str": "str 1"
    },
    {
      "flow_published_at": "1970-01-01T02:00:04Z",
      "id": 1,
      "int": 6,
      "str": "str 6"
    },
    {
      "flow_published_at": "1970-01-01T01:00:07Z",
      "id": 2,
      "int": 2,
      "str": "str 2"
    },
    {
      "flow_published_at": "1970-01-01T02:00:05Z",
      "id": 2,
      "int": 7,
      "str": "str 7"
    },
    {
      "flow_published_at": "1970-01-01T01:00:08Z",
      "id": 3,
      "int": 3,
      "str": "str 3"
    },
    {
      "flow_published_at": "1970-01-01T02:00:06Z",
      "id": 3,
      "int": 8,
      "str": "str 8"
    },
    {
      "flow_published_at": "1970-01-01T01:00:09Z",
      "id": 4,
      "int": 4,
      "str": "str 4"
    },
    {
      "flow_published_at": "1970-01-01T02:00:07Z",
      "id": 4,
      "int": 9,
      "str": "str 9"
    },
    {
      "flow_published_at": "1970-01-01T01:00:10Z",
      "id": 5,
      "int": 5,
      "str": "str 5"
    },
    {
      "flow_published_at": "1970-01-01T02:00:08Z",
      "id": 5,
      "int": 10,
      "str": "str 10"
    },
    {
      "flow_published_at": "1970-01-01T03:00:00Z",
      "id": 6,
      "int": 11,
      "str": "str 11"
    },
    {
      "flow_published_at": "1970-01-01T03:00:01Z",
      "id": 7,
      "int": 12,
      "str": "str 12"
    },
    {
      "flow_published_at": "1970-01-01T03:00:02Z",
      "id": 8,
      "int": 13,
      "str": "str 13"
    },
    {
      "flow_published_at": "1970-01-01T03:00:03Z",
      "id": 9,
      "int": 14,
      "str": "str 14"
    },
    {
      "flow_published_at": "1970-01-01T03:00:04Z",
      "id": 10,
      "int": 15,
      "str": "str 15"
    }
  ],
  "table": "`main`.`some-schema`.duplicate_keys_delta_exclude_flow_doc"
}
{
  "rows": [
    {
      "array_int": "[11,12]",
      "binary_field": null,
      "bool_field": false,
      "float_field": 1.1,
      "flow_published_at": "1970-01-01T01:00:13Z",
      "id": 1,
      "multiple": "1",
      "nested": "{\"id\":\"i1\"}",
      "nullable_int": null,
      "str_field": "str1"
    },
    {
      "array_int": "[21,22]",
      "binary_field": null,
      "bool_field": true,
      "float_field": 2.2,
      "flow_published_at": "1970-01-01T01:00:14Z",
      "id": 2,
      "multiple": "2.2",
      "nested": "{\"id\":\"i2\"}",
      "nullable_int": 2,
      "str_field": "str2"
    },
    {
      "array_int": "[31,32]",
      "binary_field": null,
      "bool_field": false,
      "float_field": 3.3,
      "flow_published_at": "1970-01-01T01:00:15Z",
      "id": 3,
      "multiple": "true",
      "nested": "{\"id\":\"i3\"}",
      "nullable_int": null,
      "str_field": "str3"
    },
    {
      "array_int": "[41,42]",
      "binary_field": null,
      "bool_field": true,
      "float_field": 4.4,
      "flow_published_at": "1970-01-01T01:00:16Z",
      "id": 4,
      "multiple": "false",
      "nested": "{\"id\":\"i4\"}",
      "nullable_int": 4,
      "str_field": "str4"
    },
    {
      "array_int": "[51,52]",
      "binary_field": null,
      "bool_field": false,
      "float_field": 5.5,
      "flow_published_at": "1970-01-01T01:00:17Z",
      "id": 5,
      "multiple": "\"string five\"",
      "nested": "{\"id\":\"i5\"}",
      "nullable_int": null,
      "str_field": "str5"
    },
    {
      "array_int": "[61,62]",
      "binary_field": null,
      "bool_field": true,
      "float_field": 66.66,
      "flow_published_at": "1970-01-01T02:00:19Z",
      "id": 6,
      "multiple": "[\"one\",2,true]",
      "nested": "{\"id\":\"i6\"}",
      "nullable_int": 6,
      "str_field": "str6 v2"
    },
    {
      "array_int": "[71,72]",
      "binary_field": null,
      "bool_field": false,
      "float_field": 77.77,
      "flow_published_at": "1970-01-01T02:00:20Z",
      "id": 7,
      "multiple": "{\"object\":\"seven\"}",
      "nested": "{\"id\":\"i7\"}",
      "nullable_int": null,
      "str_field": "str7 v2"
    },
    {
      "array_int": "[81,82]",
      "binary_field": null,
      "bool_field": true,
      "float_field": 88.88,
      "flow_published_at": "1970-01-01T02:00:21Z",
      "id": 8,
      "multiple": null,
      "nested": "{\"id\":\"i8\"}",
      "nullable_int": 8,
      "str_field": "str8 v2"
    },
    {
      "array_int": "[91,92]",
      "binary_field": "YWxvaGEK",
      "bool_field": false,
      "float_field": 99.99,
      "flow_published_at": "1970-01-01T02:00:22Z",
      "id": 9,
      "multiple": null,
      "nested": "{\"id\":\"i9\"}",
      "nullable_int": null,
      "str_field": "str9 v2"
    },
    {
      "array_int": "[1,2]",
      "binary_field": "c2F5xY1uYXJhCg==",
      "bool_field": true,
      "float_field": 1010.101,
      "flow_published_at": "1970-01-01T02:00:23Z",
      "id": 10,
      "multiple": null,
      "nested": "{\"id\":\"i10\"}",
      "nullable_int": 10,
      "str_field": "str10 v2"
    }
  ],
  "table": "`main`.`some-schema`.multiple_types"
}
{
  "rows": [
    {
      "date": "0000-01-01T00:00:00Z",
      "datetime": "0000-01-01T00:00:00Z",
      "flow_published_at": "1970-01-01T02:00:13Z",
      "id": 1,
      "int_and_str": 1,
      "int_str": 10,
      "num_and_str": 1.1,
      "num_str": 10.1,
      "time": "00:00:00Z"
    },
    {
      "date": "1999-02-02T00:00:00Z",
      "datetime": "1999-02-02T14:20:12.33Z",
      "flow_published_at": "1970-01-01T02:00:14Z",
      "id": 2,
      "int_and_str": 2,
      "int_str": 20,
      "num_and_str": 2.1,
      "num_str": 20.1,
      "time": "14:20:12.33Z"
    },
    {
      "date": "1000-03-03T00:00:00Z",
      "datetime": "1000-03-03T23:59:38.1Z",
      "flow_published_at": "1970-01-01T01:00:11Z",
      "id": 3,
      "int_and_str": 3,
      "int_str": 30,
      "num_and_str": 3.1,
      "num_str": 30.1,
      "time": "23:59:38.10Z"
    },
    {
      "date": "2023-08-29T00:00:00Z",
      "datetime": "2023-08-29T23:59:38Z",
      "flow_published_at": "1970-01-01T01:00:12Z",
      "id": 4,
      "int_and_str": 4,
      "int_str": 40,
      "num_and_str": 4.1,
      "num_str": 40.1,
      "time": "23:59:38Z"
    },
    {
      "date": "9999-12-31T00:00:00Z",
      "datetime": "9999-12-31T23:59:59Z",
      "flow_published_at": "1970-01-01T02:00:15Z",
      "id": 5,
      "int_and_str": 5,
      "int_str": 50,
      "num_and_str": 5.1,
      "num_str": 50.1,
      "time": "23:59:59Z"
    },
    {
      "date": null,
      "datetime": null,
      "flow_published_at": "1970-01-01T02:00:16Z",
      "id": 8,
      "int_and_str": null,
      "int_str": null,
      "num_and_str": null,
      "num_str": "NaN",
      "time": null
    },
    {
      "date": null,
      "datetime": null,
      "flow_published_at": "1970-01-01T02:00:17Z",
      "id": 9,
      "int_and_str": null,
      "int_str": null,
      "num_and_str": null,
      "num_str": "Infinity",
      "time": null
    },
    {
      "date": null,
      "datetime": null,
      "flow_published_at": "1970-01-01T02:00:18Z",
      "id": 10,
      "int_and_str": null,
      "int_str": null,
      "num_and_str": null,
      "num_str": "-Infinity",
      "time": null
    }
  ],
  "table": "`main`.`some-schema`.formatted_strings"
}
{
  "rows": [
    {
      "flow_published_at": "1970-01-01T01:00:28Z",
      "id": 1,
      "unsigned_bigint": 18446744073709551615
    }
  ],
  "table": "`main`.`some-schema`.unsigned_bigint"
}
{
  "rows": [
    {
      "_meta/op": "u",
      "flow_published_at": "1970-01-01T02:00:26Z",
      "id": 2
    },
    {
      "_meta/op": "c",
      "flow_published_at": "1970-01-01T02:00:27Z",
      "id": 3
    }
  ],
  "table": "`main`.`some-schema`.deletions"
}
{
  "rows": [
    {
      "counter": 1,
      "flow_published_at": "1970-01-01T02:00:30Z",
      "id": "c2F5xY1uYXJhCg=="
    }
  ],
  "table": "`main`.`some-schema`.binary_key"
}
{
  "rows": [
    {
      "counter": 2,
      "flow_published_at": "1970-01-01T02:00:32Z",
      "id": 1,
      "strint": 1,
      "strintkey": "1",
      "strnum": 10.1,
      "strnumkey": "10.1"
    }
  ],
  "table": "`main`.`some-schema`.all_key_types_part_one"
}
{
  "rows": [
    {
      "counter": 2,
      "date": "0001-01-01T00:00:00Z",
      "datekey": "0000-01-01",
      "flow_published_at": "1970-01-01T02:00:33Z",
      "id": 1,
      "time": "12:34:56Z",
      "timekey": "12:34:56Z"
    }
  ],
  "table": "`main`.`some-schema`.all_key_types_part_two"
}
{
  "rows": [
    {
      "counter": 2,
      "datetime": "0000-01-01T12:34:56Z",
      "datetimekey": "0000-01-01T12:34:56Z",
      "flow_published_at": "1970-01-01T02:00:34Z",
      "id": 1,
      "uuid": "550e8400-e29b-41d4-a716-446655440000",
      "uuidkey": "550e8400-e29b-41d4-a716-446655440000"
    }
  ],
  "table": "`main`.`some-schema`.all_key_types_part_three"
}
{
  "rows": [
    {
      "another_field": "another_updated",
      "flow_published_at": "1970-01-01T02:00:35Z",
      "id": 1,
      "projected_another": "another_updated",
      "projected_field": "updated_value"
    }
  ],
  "table": "`main`.`some-schema`.fields_with_projections"
}
{
  "rows": [
    {
      "a0": 100,
      "a1": 101,
      "a10": null,
      "a11": null,
      "a12": null,
      "a13": null,
      "a14": null,
      "a15": 115,
      "a16": null,
      "a17": null,
      "a18": null,
      "a19": null,
      "a2": null,
      "a20": null,
      "a21": null,
      "a22": null,
      "a23": null,
      "a24": null,
      "a25": 125,
      "a26": null,
      "a27": null,
      "a28": null,
      "a29": null,
      "a3": null,
      "a30": null,
      "a31": null,
      "a32": null,
      "a33": null,
      "a34": null,
      "a35": 135,
      "a36": null,
      "a37": null,
      "a38": null,
      "a39": null,
      "a4": null,
      "a40": null,
      "a41": null,
      "a42": null,
      "a43": null,
      "a44": null,
      "a45": 145,
      "a46": null,
      "a47": null,
      "a48": null,
      "a49": null,
      "a5": null,
      "a50": null,
      "a51": null,
      "a52": null,
      "a53": null,
      "a54": null,
      "a55": 155,
      "a56": null,
      "a57": null,
      "a58": null,
      "a59": null,
      "a6": null,
      "a60": null,
      "a61": null,
      "a62": null,
      "a63": null,
      "a64": null,
      "a65": 165,
      "a66": null,
      "a67": null,
      "a68": null,
      "a69": null,
      "a7": null,
      "a70": null,
      "a71": null,
      "a72": null,
      "a73": null,
      "a74": null,
      "a75": 175,
      "a76": null,
      "a77": null,
      "a78": null,
      "a79": null,
      "a8": null,
      "a80": null,
      "a81": null,
      "a82": null,
      "a83": null,
      "a84": null,
      "a85": 185,
      "a86": null,
      "a87": null,
      "a88": null,
      "a89": null,
      "a9": null,
      "a90": null,
      "a91": null,
      "a92": null,
      "a93": null,
      "a94": null,
      "a95": 195,
      "a96": null,
      "a97": null,
      "a98": null,
      "a99": 199,
      "flow_published_at": "1970-01-01T02:00:36Z",
      "id": 1
    }
  ],
  "table": "`main`.`some-schema`.many_columns"
}
[
  "applied.actionDescription",
  ""
]
[
  "connectorState",
  {
    "updated": {}
  }
]
