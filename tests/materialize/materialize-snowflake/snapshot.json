[
  "applied.actionDescription",
  "\nCREATE TABLE IF NOT EXISTS simple (\n\tid INTEGER NOT NULL,\n\tcanary TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE simple IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/simple';\nCOMMENT ON COLUMN simple.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN simple.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\nCOMMENT ON COLUMN simple.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS duplicate_keys_standard (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tint INTEGER,\n\tstr TEXT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE duplicate_keys_standard IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\nCOMMENT ON COLUMN duplicate_keys_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN duplicate_keys_standard.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN duplicate_keys_standard.int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\nCOMMENT ON COLUMN duplicate_keys_standard.str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS duplicate_keys_delta (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tint INTEGER,\n\tstr TEXT NOT NULL\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE duplicate_keys_delta IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\nCOMMENT ON COLUMN duplicate_keys_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN duplicate_keys_delta.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN duplicate_keys_delta.int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\nCOMMENT ON COLUMN duplicate_keys_delta.str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS duplicate_keys_delta_exclude_flow_doc (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tint INTEGER,\n\tstr TEXT NOT NULL\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE duplicate_keys_delta_exclude_flow_doc IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\nCOMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\nCOMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS \"duplicate keys @ with spaces\" (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tint INTEGER,\n\tstr TEXT NOT NULL\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE \"duplicate keys @ with spaces\" IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\nCOMMENT ON COLUMN \"duplicate keys @ with spaces\".id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN \"duplicate keys @ with spaces\".flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN \"duplicate keys @ with spaces\".int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\nCOMMENT ON COLUMN \"duplicate keys @ with spaces\".str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS multiple_types (\n\tid INTEGER NOT NULL,\n\tarray_int VARIANT,\n\tbinary_field TEXT,\n\tbool_field BOOLEAN,\n\tfloat_field FLOAT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tmultiple VARIANT,\n\tnested VARIANT,\n\tnullable_int INTEGER,\n\tstr_field TEXT NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE multiple_types IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/multiple-data-types';\nCOMMENT ON COLUMN multiple_types.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN multiple_types.array_int IS 'auto-generated projection of JSON at: /array_int with inferred types: [array]';\nCOMMENT ON COLUMN multiple_types.binary_field IS 'auto-generated projection of JSON at: /binary_field with inferred types: [string]';\nCOMMENT ON COLUMN multiple_types.bool_field IS 'auto-generated projection of JSON at: /bool_field with inferred types: [boolean]';\nCOMMENT ON COLUMN multiple_types.float_field IS 'auto-generated projection of JSON at: /float_field with inferred types: [number]';\nCOMMENT ON COLUMN multiple_types.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN multiple_types.multiple IS 'auto-generated projection of JSON at: /multiple with inferred types: [array boolean null number object string]';\nCOMMENT ON COLUMN multiple_types.nested IS 'auto-generated projection of JSON at: /nested with inferred types: [object]';\nCOMMENT ON COLUMN multiple_types.nullable_int IS 'auto-generated projection of JSON at: /nullable_int with inferred types: [integer null]';\nCOMMENT ON COLUMN multiple_types.str_field IS 'auto-generated projection of JSON at: /str_field with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS formatted_strings (\n\tid INTEGER NOT NULL,\n\tdate DATE,\n\tdatetime TIMESTAMP_LTZ,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tint_and_str INTEGER,\n\tint_str INTEGER,\n\tnum_and_str FLOAT,\n\tnum_str FLOAT,\n\ttime TEXT,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE formatted_strings IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/formatted-strings';\nCOMMENT ON COLUMN formatted_strings.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN formatted_strings.date IS 'auto-generated projection of JSON at: /date with inferred types: [string]';\nCOMMENT ON COLUMN formatted_strings.datetime IS 'auto-generated projection of JSON at: /datetime with inferred types: [string]';\nCOMMENT ON COLUMN formatted_strings.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN formatted_strings.int_and_str IS 'auto-generated projection of JSON at: /int_and_str with inferred types: [integer string]';\nCOMMENT ON COLUMN formatted_strings.int_str IS 'auto-generated projection of JSON at: /int_str with inferred types: [string]';\nCOMMENT ON COLUMN formatted_strings.num_and_str IS 'auto-generated projection of JSON at: /num_and_str with inferred types: [number string]';\nCOMMENT ON COLUMN formatted_strings.num_str IS 'auto-generated projection of JSON at: /num_str with inferred types: [string]';\nCOMMENT ON COLUMN formatted_strings.time IS 'auto-generated projection of JSON at: /time with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS symbols (\n\t\"testing (%s)\" TEXT NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tid TEXT,\n\n\tPRIMARY KEY (\"testing (%s)\")\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE symbols IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/symbols';\nCOMMENT ON COLUMN symbols.\"testing (%s)\" IS 'auto-generated projection of JSON at: /testing (%s) with inferred types: [string]';\nCOMMENT ON COLUMN symbols.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN symbols.id IS 'auto-generated projection of JSON at: /id with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS unsigned_bigint (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tunsigned_bigint INTEGER,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE unsigned_bigint IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/unsigned-bigint';\nCOMMENT ON COLUMN unsigned_bigint.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN unsigned_bigint.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN unsigned_bigint.unsigned_bigint IS 'auto-generated projection of JSON at: /unsigned_bigint with inferred types: [integer]';\n\n\nCREATE TABLE IF NOT EXISTS deletions (\n\tid INTEGER NOT NULL,\n\t\"_meta/op\" TEXT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE deletions IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/deletions';\nCOMMENT ON COLUMN deletions.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN deletions.\"_meta/op\" IS 'auto-generated projection of JSON at: /_meta/op with inferred types: [string]';\nCOMMENT ON COLUMN deletions.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS string_escaped_key (\n\tid TEXT NOT NULL,\n\tcounter INTEGER,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE string_escaped_key IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/string-escaped-key';\nCOMMENT ON COLUMN string_escaped_key.id IS 'auto-generated projection of JSON at: /id with inferred types: [string]';\nCOMMENT ON COLUMN string_escaped_key.counter IS 'auto-generated projection of JSON at: /counter with inferred types: [integer]';\nCOMMENT ON COLUMN string_escaped_key.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS all_key_types_part_one (\n\tid INTEGER NOT NULL,\n\tstrintkey TEXT NOT NULL,\n\tstrnumkey TEXT NOT NULL,\n\tcounter INTEGER,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tstrint INTEGER,\n\tstrnum FLOAT,\n\n\tPRIMARY KEY (id, strintkey, strnumkey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE all_key_types_part_one IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/all-key-types-part-one';\nCOMMENT ON COLUMN all_key_types_part_one.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN all_key_types_part_one.strintkey IS 'auto-generated projection of JSON at: /strintkey with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_one.strnumkey IS 'auto-generated projection of JSON at: /strnumkey with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_one.counter IS 'auto-generated projection of JSON at: /counter with inferred types: [integer]';\nCOMMENT ON COLUMN all_key_types_part_one.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_one.strint IS 'auto-generated projection of JSON at: /strint with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_one.strnum IS 'auto-generated projection of JSON at: /strnum with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS all_key_types_part_two (\n\tid INTEGER NOT NULL,\n\tdatekey TEXT NOT NULL,\n\ttimekey TEXT NOT NULL,\n\tcounter INTEGER,\n\tdate DATE,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\ttime TEXT,\n\n\tPRIMARY KEY (id, datekey, timekey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE all_key_types_part_two IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/all-key-types-part-two';\nCOMMENT ON COLUMN all_key_types_part_two.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN all_key_types_part_two.datekey IS 'auto-generated projection of JSON at: /datekey with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_two.timekey IS 'auto-generated projection of JSON at: /timekey with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_two.counter IS 'auto-generated projection of JSON at: /counter with inferred types: [integer]';\nCOMMENT ON COLUMN all_key_types_part_two.date IS 'auto-generated projection of JSON at: /date with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_two.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_two.time IS 'auto-generated projection of JSON at: /time with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS all_key_types_part_three (\n\tid INTEGER NOT NULL,\n\tdatetimekey TEXT NOT NULL,\n\tuuidkey TEXT NOT NULL,\n\tcounter INTEGER,\n\tdatetime TIMESTAMP_LTZ,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tuuid TEXT,\n\n\tPRIMARY KEY (id, datetimekey, uuidkey)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE all_key_types_part_three IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/all-key-types-part-three';\nCOMMENT ON COLUMN all_key_types_part_three.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN all_key_types_part_three.datetimekey IS 'auto-generated projection of JSON at: /datetimekey with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_three.uuidkey IS 'auto-generated projection of JSON at: /uuidkey with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_three.counter IS 'auto-generated projection of JSON at: /counter with inferred types: [integer]';\nCOMMENT ON COLUMN all_key_types_part_three.datetime IS 'auto-generated projection of JSON at: /datetime with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_three.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN all_key_types_part_three.uuid IS 'auto-generated projection of JSON at: /uuid with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS fields_with_projections (\n\tid INTEGER NOT NULL,\n\tanother_field TEXT,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\tprojected_another TEXT,\n\tprojected_field TEXT,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE fields_with_projections IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/fields-with-projections';\nCOMMENT ON COLUMN fields_with_projections.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN fields_with_projections.another_field IS 'auto-generated projection of JSON at: /another_field with inferred types: [string]';\nCOMMENT ON COLUMN fields_with_projections.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN fields_with_projections.projected_another IS 'user-provided projection of JSON at: /another_field with inferred types: [string]';\nCOMMENT ON COLUMN fields_with_projections.projected_field IS 'user-provided projection of JSON at: /original_field with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS many_columns (\n\tid INTEGER NOT NULL,\n\ta0 INTEGER,\n\ta1 INTEGER,\n\ta10 INTEGER,\n\ta11 INTEGER,\n\ta12 INTEGER,\n\ta13 INTEGER,\n\ta14 INTEGER,\n\ta15 INTEGER,\n\ta16 INTEGER,\n\ta17 INTEGER,\n\ta18 INTEGER,\n\ta19 INTEGER,\n\ta2 INTEGER,\n\ta20 INTEGER,\n\ta21 INTEGER,\n\ta22 INTEGER,\n\ta23 INTEGER,\n\ta24 INTEGER,\n\ta25 INTEGER,\n\ta26 INTEGER,\n\ta27 INTEGER,\n\ta28 INTEGER,\n\ta29 INTEGER,\n\ta3 INTEGER,\n\ta30 INTEGER,\n\ta31 INTEGER,\n\ta32 INTEGER,\n\ta33 INTEGER,\n\ta34 INTEGER,\n\ta35 INTEGER,\n\ta36 INTEGER,\n\ta37 INTEGER,\n\ta38 INTEGER,\n\ta39 INTEGER,\n\ta4 INTEGER,\n\ta40 INTEGER,\n\ta41 INTEGER,\n\ta42 INTEGER,\n\ta43 INTEGER,\n\ta44 INTEGER,\n\ta45 INTEGER,\n\ta46 INTEGER,\n\ta47 INTEGER,\n\ta48 INTEGER,\n\ta49 INTEGER,\n\ta5 INTEGER,\n\ta50 INTEGER,\n\ta51 INTEGER,\n\ta52 INTEGER,\n\ta53 INTEGER,\n\ta54 INTEGER,\n\ta55 INTEGER,\n\ta56 INTEGER,\n\ta57 INTEGER,\n\ta58 INTEGER,\n\ta59 INTEGER,\n\ta6 INTEGER,\n\ta60 INTEGER,\n\ta61 INTEGER,\n\ta62 INTEGER,\n\ta63 INTEGER,\n\ta64 INTEGER,\n\ta65 INTEGER,\n\ta66 INTEGER,\n\ta67 INTEGER,\n\ta68 INTEGER,\n\ta69 INTEGER,\n\ta7 INTEGER,\n\ta70 INTEGER,\n\ta71 INTEGER,\n\ta72 INTEGER,\n\ta73 INTEGER,\n\ta74 INTEGER,\n\ta75 INTEGER,\n\ta76 INTEGER,\n\ta77 INTEGER,\n\ta78 INTEGER,\n\ta79 INTEGER,\n\ta8 INTEGER,\n\ta80 INTEGER,\n\ta81 INTEGER,\n\ta82 INTEGER,\n\ta83 INTEGER,\n\ta84 INTEGER,\n\ta85 INTEGER,\n\ta86 INTEGER,\n\ta87 INTEGER,\n\ta88 INTEGER,\n\ta89 INTEGER,\n\ta9 INTEGER,\n\ta90 INTEGER,\n\ta91 INTEGER,\n\ta92 INTEGER,\n\ta93 INTEGER,\n\ta94 INTEGER,\n\ta95 INTEGER,\n\ta96 INTEGER,\n\ta97 INTEGER,\n\ta98 INTEGER,\n\ta99 INTEGER,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE many_columns IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/many-columns';\nCOMMENT ON COLUMN many_columns.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a0 IS 'auto-generated projection of JSON at: /a0 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a1 IS 'auto-generated projection of JSON at: /a1 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a10 IS 'auto-generated projection of JSON at: /a10 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a11 IS 'auto-generated projection of JSON at: /a11 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a12 IS 'auto-generated projection of JSON at: /a12 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a13 IS 'auto-generated projection of JSON at: /a13 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a14 IS 'auto-generated projection of JSON at: /a14 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a15 IS 'auto-generated projection of JSON at: /a15 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a16 IS 'auto-generated projection of JSON at: /a16 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a17 IS 'auto-generated projection of JSON at: /a17 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a18 IS 'auto-generated projection of JSON at: /a18 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a19 IS 'auto-generated projection of JSON at: /a19 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a2 IS 'auto-generated projection of JSON at: /a2 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a20 IS 'auto-generated projection of JSON at: /a20 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a21 IS 'auto-generated projection of JSON at: /a21 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a22 IS 'auto-generated projection of JSON at: /a22 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a23 IS 'auto-generated projection of JSON at: /a23 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a24 IS 'auto-generated projection of JSON at: /a24 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a25 IS 'auto-generated projection of JSON at: /a25 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a26 IS 'auto-generated projection of JSON at: /a26 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a27 IS 'auto-generated projection of JSON at: /a27 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a28 IS 'auto-generated projection of JSON at: /a28 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a29 IS 'auto-generated projection of JSON at: /a29 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a3 IS 'auto-generated projection of JSON at: /a3 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a30 IS 'auto-generated projection of JSON at: /a30 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a31 IS 'auto-generated projection of JSON at: /a31 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a32 IS 'auto-generated projection of JSON at: /a32 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a33 IS 'auto-generated projection of JSON at: /a33 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a34 IS 'auto-generated projection of JSON at: /a34 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a35 IS 'auto-generated projection of JSON at: /a35 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a36 IS 'auto-generated projection of JSON at: /a36 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a37 IS 'auto-generated projection of JSON at: /a37 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a38 IS 'auto-generated projection of JSON at: /a38 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a39 IS 'auto-generated projection of JSON at: /a39 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a4 IS 'auto-generated projection of JSON at: /a4 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a40 IS 'auto-generated projection of JSON at: /a40 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a41 IS 'auto-generated projection of JSON at: /a41 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a42 IS 'auto-generated projection of JSON at: /a42 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a43 IS 'auto-generated projection of JSON at: /a43 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a44 IS 'auto-generated projection of JSON at: /a44 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a45 IS 'auto-generated projection of JSON at: /a45 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a46 IS 'auto-generated projection of JSON at: /a46 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a47 IS 'auto-generated projection of JSON at: /a47 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a48 IS 'auto-generated projection of JSON at: /a48 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a49 IS 'auto-generated projection of JSON at: /a49 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a5 IS 'auto-generated projection of JSON at: /a5 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a50 IS 'auto-generated projection of JSON at: /a50 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a51 IS 'auto-generated projection of JSON at: /a51 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a52 IS 'auto-generated projection of JSON at: /a52 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a53 IS 'auto-generated projection of JSON at: /a53 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a54 IS 'auto-generated projection of JSON at: /a54 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a55 IS 'auto-generated projection of JSON at: /a55 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a56 IS 'auto-generated projection of JSON at: /a56 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a57 IS 'auto-generated projection of JSON at: /a57 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a58 IS 'auto-generated projection of JSON at: /a58 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a59 IS 'auto-generated projection of JSON at: /a59 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a6 IS 'auto-generated projection of JSON at: /a6 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a60 IS 'auto-generated projection of JSON at: /a60 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a61 IS 'auto-generated projection of JSON at: /a61 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a62 IS 'auto-generated projection of JSON at: /a62 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a63 IS 'auto-generated projection of JSON at: /a63 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a64 IS 'auto-generated projection of JSON at: /a64 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a65 IS 'auto-generated projection of JSON at: /a65 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a66 IS 'auto-generated projection of JSON at: /a66 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a67 IS 'auto-generated projection of JSON at: /a67 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a68 IS 'auto-generated projection of JSON at: /a68 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a69 IS 'auto-generated projection of JSON at: /a69 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a7 IS 'auto-generated projection of JSON at: /a7 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a70 IS 'auto-generated projection of JSON at: /a70 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a71 IS 'auto-generated projection of JSON at: /a71 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a72 IS 'auto-generated projection of JSON at: /a72 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a73 IS 'auto-generated projection of JSON at: /a73 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a74 IS 'auto-generated projection of JSON at: /a74 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a75 IS 'auto-generated projection of JSON at: /a75 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a76 IS 'auto-generated projection of JSON at: /a76 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a77 IS 'auto-generated projection of JSON at: /a77 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a78 IS 'auto-generated projection of JSON at: /a78 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a79 IS 'auto-generated projection of JSON at: /a79 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a8 IS 'auto-generated projection of JSON at: /a8 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a80 IS 'auto-generated projection of JSON at: /a80 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a81 IS 'auto-generated projection of JSON at: /a81 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a82 IS 'auto-generated projection of JSON at: /a82 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a83 IS 'auto-generated projection of JSON at: /a83 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a84 IS 'auto-generated projection of JSON at: /a84 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a85 IS 'auto-generated projection of JSON at: /a85 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a86 IS 'auto-generated projection of JSON at: /a86 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a87 IS 'auto-generated projection of JSON at: /a87 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a88 IS 'auto-generated projection of JSON at: /a88 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a89 IS 'auto-generated projection of JSON at: /a89 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a9 IS 'auto-generated projection of JSON at: /a9 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a90 IS 'auto-generated projection of JSON at: /a90 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a91 IS 'auto-generated projection of JSON at: /a91 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a92 IS 'auto-generated projection of JSON at: /a92 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a93 IS 'auto-generated projection of JSON at: /a93 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a94 IS 'auto-generated projection of JSON at: /a94 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a95 IS 'auto-generated projection of JSON at: /a95 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a96 IS 'auto-generated projection of JSON at: /a96 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a97 IS 'auto-generated projection of JSON at: /a97 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a98 IS 'auto-generated projection of JSON at: /a98 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.a99 IS 'auto-generated projection of JSON at: /a99 with inferred types: [integer]';\nCOMMENT ON COLUMN many_columns.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS timezone_datetimes_standard (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\toffset_datetime TIMESTAMP_LTZ NOT NULL,\n\tutc_datetime TIMESTAMP_LTZ NOT NULL,\n\n\tPRIMARY KEY (id)\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE timezone_datetimes_standard IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/timezone-datetimes';\nCOMMENT ON COLUMN timezone_datetimes_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN timezone_datetimes_standard.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN timezone_datetimes_standard.offset_datetime IS 'auto-generated projection of JSON at: /offset_datetime with inferred types: [string]';\nCOMMENT ON COLUMN timezone_datetimes_standard.utc_datetime IS 'auto-generated projection of JSON at: /utc_datetime with inferred types: [string]';\n\n\nCREATE TABLE IF NOT EXISTS timezone_datetimes_delta (\n\tid INTEGER NOT NULL,\n\tflow_published_at TIMESTAMP_LTZ NOT NULL,\n\toffset_datetime TIMESTAMP_LTZ NOT NULL,\n\tutc_datetime TIMESTAMP_LTZ NOT NULL\n)\nDEFAULT_DDL_COLLATION = '';\n\nCOMMENT ON TABLE timezone_datetimes_delta IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/timezone-datetimes';\nCOMMENT ON COLUMN timezone_datetimes_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\nCOMMENT ON COLUMN timezone_datetimes_delta.flow_published_at IS 'Flow Publication Time\nFlow publication date-time of this document\nauto-generated projection of JSON at: /_meta/uuid with inferred types: [string]';\nCOMMENT ON COLUMN timezone_datetimes_delta.offset_datetime IS 'auto-generated projection of JSON at: /offset_datetime with inferred types: [string]';\nCOMMENT ON COLUMN timezone_datetimes_delta.utc_datetime IS 'auto-generated projection of JSON at: /utc_datetime with inferred types: [string]';\n"
]
[
  "connectorState",
  {
    "updated": {},
    "mergePatch": true
  }
]
[
  "connectorState",
  {
    "updated": {
      "all_key_types_part_one": {
        "Table": "all_key_types_part_one",
        "Query": "\nCOPY INTO all_key_types_part_one (\n\tid, strintkey, strnumkey, counter, flow_published_at, strint, strnum\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS strintkey, $1[2] AS strnumkey, $1[3] AS counter, $1[4] AS flow_published_at, $1[5] AS strint, $1[6] AS strnum\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "all_key_types_part_three": {
        "Table": "all_key_types_part_three",
        "Query": "\nCOPY INTO all_key_types_part_three (\n\tid, datetimekey, uuidkey, counter, datetime, flow_published_at, uuid\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS datetimekey, $1[2] AS uuidkey, $1[3] AS counter, $1[4] AS datetime, $1[5] AS flow_published_at, $1[6] AS uuid\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "all_key_types_part_two": {
        "Table": "all_key_types_part_two",
        "Query": "\nCOPY INTO all_key_types_part_two (\n\tid, datekey, timekey, counter, date, flow_published_at, time\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS datekey, $1[2] AS timekey, $1[3] AS counter, $1[4] AS date, $1[5] AS flow_published_at, $1[6] AS time\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "deletions": {
        "Table": "deletions",
        "Query": "\nCOPY INTO deletions (\n\tid, \"_meta/op\", flow_published_at\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS flow_published_at\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate%20keys%20%40%20with%20spaces": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "\"duplicate keys @ with spaces\"",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "7a60ee931eb4057c:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 3610000000000,
                      "minIntValue": 3606000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "7374722035",
                      "minStrValue": "7374722031",
                      "maxLength": 5,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_delta": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "7a60ee931eb4057c:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 3610000000000,
                      "minIntValue": 3606000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "7374722035",
                      "minStrValue": "7374722031",
                      "maxLength": 5,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_delta_exclude_flow_doc": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA_EXCLUDE_FLOW_DOC",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "7a60ee931eb4057c:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 3610000000000,
                      "minIntValue": 3606000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "7374722035",
                      "minStrValue": "7374722031",
                      "maxLength": 5,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_standard": {
        "Table": "duplicate_keys_standard",
        "Query": "\nCOPY INTO duplicate_keys_standard (\n\tid, flow_published_at, int, str\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS flow_published_at, $1[2] AS int, $1[3] AS str\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "fields_with_projections": {
        "Table": "fields_with_projections",
        "Query": "\nCOPY INTO fields_with_projections (\n\tid, another_field, flow_published_at, projected_another, projected_field\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS another_field, $1[2] AS flow_published_at, $1[3] AS projected_another, $1[4] AS projected_field\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "formatted_strings": {
        "Table": "formatted_strings",
        "Query": "\nCOPY INTO formatted_strings (\n\tid, date, datetime, flow_published_at, int_and_str, int_str, num_and_str, num_str, time\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS date, $1[2] AS datetime, $1[3] AS flow_published_at, $1[4] AS int_and_str, $1[5] AS int_str, $1[6] AS num_and_str, $1[7] AS num_str, $1[8] AS time\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "many_columns": {
        "Table": "many_columns",
        "Query": "\nCOPY INTO many_columns (\n\tid, a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a6, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a7, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a8, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a9, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, flow_published_at\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS a0, $1[2] AS a1, $1[3] AS a10, $1[4] AS a11, $1[5] AS a12, $1[6] AS a13, $1[7] AS a14, $1[8] AS a15, $1[9] AS a16, $1[10] AS a17, $1[11] AS a18, $1[12] AS a19, $1[13] AS a2, $1[14] AS a20, $1[15] AS a21, $1[16] AS a22, $1[17] AS a23, $1[18] AS a24, $1[19] AS a25, $1[20] AS a26, $1[21] AS a27, $1[22] AS a28, $1[23] AS a29, $1[24] AS a3, $1[25] AS a30, $1[26] AS a31, $1[27] AS a32, $1[28] AS a33, $1[29] AS a34, $1[30] AS a35, $1[31] AS a36, $1[32] AS a37, $1[33] AS a38, $1[34] AS a39, $1[35] AS a4, $1[36] AS a40, $1[37] AS a41, $1[38] AS a42, $1[39] AS a43, $1[40] AS a44, $1[41] AS a45, $1[42] AS a46, $1[43] AS a47, $1[44] AS a48, $1[45] AS a49, $1[46] AS a5, $1[47] AS a50, $1[48] AS a51, $1[49] AS a52, $1[50] AS a53, $1[51] AS a54, $1[52] AS a55, $1[53] AS a56, $1[54] AS a57, $1[55] AS a58, $1[56] AS a59, $1[57] AS a6, $1[58] AS a60, $1[59] AS a61, $1[60] AS a62, $1[61] AS a63, $1[62] AS a64, $1[63] AS a65, $1[64] AS a66, $1[65] AS a67, $1[66] AS a68, $1[67] AS a69, $1[68] AS a7, $1[69] AS a70, $1[70] AS a71, $1[71] AS a72, $1[72] AS a73, $1[73] AS a74, $1[74] AS a75, $1[75] AS a76, $1[76] AS a77, $1[77] AS a78, $1[78] AS a79, $1[79] AS a8, $1[80] AS a80, $1[81] AS a81, $1[82] AS a82, $1[83] AS a83, $1[84] AS a84, $1[85] AS a85, $1[86] AS a86, $1[87] AS a87, $1[88] AS a88, $1[89] AS a89, $1[90] AS a9, $1[91] AS a90, $1[92] AS a91, $1[93] AS a92, $1[94] AS a93, $1[95] AS a94, $1[96] AS a95, $1[97] AS a96, $1[98] AS a97, $1[99] AS a98, $1[100] AS a99, $1[101] AS flow_published_at\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "multiple_types": {
        "Table": "multiple_types",
        "Query": "\nCOPY INTO multiple_types (\n\tid, array_int, binary_field, bool_field, float_field, flow_published_at, multiple, nested, nullable_int, str_field\n) FROM (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS array_int, $1[2] AS binary_field, $1[3] AS bool_field, $1[4] AS float_field, $1[5] AS flow_published_at, NULLIF($1[6], PARSE_JSON('null')) AS multiple, NULLIF($1[7], PARSE_JSON('null')) AS nested, $1[8] AS nullable_int, $1[9] AS str_field\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "simple": {
        "Table": "simple",
        "Query": "\nCOPY INTO simple (\n\tid, canary, flow_published_at\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS canary, $1[2] AS flow_published_at\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "string_escaped_key": {
        "Table": "string_escaped_key",
        "Query": "\nCOPY INTO string_escaped_key (\n\tid, counter, flow_published_at\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS counter, $1[2] AS flow_published_at\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "symbols": {
        "Table": "symbols",
        "Query": "\nCOPY INTO symbols (\n\t\"testing (%s)\", flow_published_at, id\n) FROM (\n\tSELECT $1[0] AS \"testing (%s)\", $1[1] AS flow_published_at, $1[2] AS id\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "timezone_datetimes_delta": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "TIMEZONE_DATETIMES_DELTA",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "7a60ee931eb4057c:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 3,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 3638000000000,
                      "minIntValue": 3636000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 3,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "OFFSET_DATETIME": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 1735689600123456789,
                      "minIntValue": -62135596800000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "UTC_DATETIME": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 1735689600123456789,
                      "minIntValue": -62167219200000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "timezone_datetimes_standard": {
        "Table": "timezone_datetimes_standard",
        "Query": "\nCOPY INTO timezone_datetimes_standard (\n\tid, flow_published_at, offset_datetime, utc_datetime\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS flow_published_at, $1[2] AS offset_datetime, $1[3] AS utc_datetime\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "unsigned_bigint": {
        "Table": "unsigned_bigint",
        "Query": "\nCOPY INTO unsigned_bigint (\n\tid, flow_published_at, unsigned_bigint\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS flow_published_at, $1[2] AS unsigned_bigint\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      }
    },
    "mergePatch": true
  }
]
[
  "connectorState",
  {
    "updated": {
      "all_key_types_part_one": {
        "Table": "all_key_types_part_one",
        "Query": "\nMERGE INTO all_key_types_part_one AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS strintkey, $1[2] AS strnumkey, $1[3] AS counter, $1[4] AS flow_published_at, $1[5] AS strint, $1[6] AS strnum, $1[7] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 1\n\tAND l.strintkey = r.strintkey AND l.strintkey >= '1' AND l.strintkey <= '1'\n\tAND l.strnumkey = r.strnumkey AND l.strnumkey >= '10.1' AND l.strnumkey <= '10.1'\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.counter = r.counter, l.flow_published_at = r.flow_published_at, l.strint = r.strint, l.strnum = r.strnum\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, strintkey, strnumkey, counter, flow_published_at, strint, strnum)\n\tVALUES (r.id, r.strintkey, r.strnumkey, r.counter, r.flow_published_at, r.strint, r.strnum);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "all_key_types_part_three": {
        "Table": "all_key_types_part_three",
        "Query": "\nMERGE INTO all_key_types_part_three AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS datetimekey, $1[2] AS uuidkey, $1[3] AS counter, $1[4] AS datetime, $1[5] AS flow_published_at, $1[6] AS uuid, $1[7] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 1\n\tAND l.datetimekey = r.datetimekey\n\tAND l.uuidkey = r.uuidkey AND l.uuidkey >= '550e8400-e29b-41d4-a716-446655440000' AND l.uuidkey <= '550e8400-e29b-41d4-a716-446655440000'\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.counter = r.counter, l.datetime = r.datetime, l.flow_published_at = r.flow_published_at, l.uuid = r.uuid\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, datetimekey, uuidkey, counter, datetime, flow_published_at, uuid)\n\tVALUES (r.id, r.datetimekey, r.uuidkey, r.counter, r.datetime, r.flow_published_at, r.uuid);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "all_key_types_part_two": {
        "Table": "all_key_types_part_two",
        "Query": "\nMERGE INTO all_key_types_part_two AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS datekey, $1[2] AS timekey, $1[3] AS counter, $1[4] AS date, $1[5] AS flow_published_at, $1[6] AS time, $1[7] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 1\n\tAND l.datekey = r.datekey AND l.datekey >= '0000-01-01' AND l.datekey <= '0000-01-01'\n\tAND l.timekey = r.timekey AND l.timekey >= '12:34:56Z' AND l.timekey <= '12:34:56Z'\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.counter = r.counter, l.date = r.date, l.flow_published_at = r.flow_published_at, l.time = r.time\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, datekey, timekey, counter, date, flow_published_at, time)\n\tVALUES (r.id, r.datekey, r.timekey, r.counter, r.date, r.flow_published_at, r.time);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "deletions": {
        "Table": "deletions",
        "Query": "\nMERGE INTO deletions AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS \"_meta/op\", $1[2] AS flow_published_at, $1[3] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 3\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.\"_meta/op\" = r.\"_meta/op\", l.flow_published_at = r.flow_published_at\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, \"_meta/op\", flow_published_at)\n\tVALUES (r.id, r.\"_meta/op\", r.flow_published_at);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "duplicate%20keys%20%40%20with%20spaces": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "\"duplicate keys @ with spaces\"",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "0c1aa08d9f287c74:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 7208000000000,
                      "minIntValue": 7204000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10,
                      "minIntValue": 6,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "7374722039",
                      "minStrValue": "737472203130",
                      "maxLength": 6,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_delta": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "0c1aa08d9f287c74:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 7208000000000,
                      "minIntValue": 7204000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10,
                      "minIntValue": 6,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "7374722039",
                      "minStrValue": "737472203130",
                      "maxLength": 6,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_delta_exclude_flow_doc": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA_EXCLUDE_FLOW_DOC",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "0c1aa08d9f287c74:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 7208000000000,
                      "minIntValue": 7204000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 5,
                      "minIntValue": 1,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10,
                      "minIntValue": 6,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "7374722039",
                      "minStrValue": "737472203130",
                      "maxLength": 6,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_standard": {
        "Table": "duplicate_keys_standard",
        "Query": "\nMERGE INTO duplicate_keys_standard AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS flow_published_at, $1[2] AS int, $1[3] AS str, $1[4] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 5\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.flow_published_at = r.flow_published_at, l.int = r.int, l.str = r.str\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, flow_published_at, int, str)\n\tVALUES (r.id, r.flow_published_at, r.int, r.str);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "fields_with_projections": {
        "Table": "fields_with_projections",
        "Query": "\nMERGE INTO fields_with_projections AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS another_field, $1[2] AS flow_published_at, $1[3] AS projected_another, $1[4] AS projected_field, $1[5] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 1\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.another_field = r.another_field, l.flow_published_at = r.flow_published_at, l.projected_another = r.projected_another, l.projected_field = r.projected_field\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, another_field, flow_published_at, projected_another, projected_field)\n\tVALUES (r.id, r.another_field, r.flow_published_at, r.projected_another, r.projected_field);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "formatted_strings": {
        "Table": "formatted_strings",
        "Query": "\nCOPY INTO formatted_strings (\n\tid, date, datetime, flow_published_at, int_and_str, int_str, num_and_str, num_str, time\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS date, $1[2] AS datetime, $1[3] AS flow_published_at, $1[4] AS int_and_str, $1[5] AS int_str, $1[6] AS num_and_str, $1[7] AS num_str, $1[8] AS time\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "many_columns": {
        "Table": "many_columns",
        "Query": "\nMERGE INTO many_columns AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS a0, $1[2] AS a1, $1[3] AS a10, $1[4] AS a11, $1[5] AS a12, $1[6] AS a13, $1[7] AS a14, $1[8] AS a15, $1[9] AS a16, $1[10] AS a17, $1[11] AS a18, $1[12] AS a19, $1[13] AS a2, $1[14] AS a20, $1[15] AS a21, $1[16] AS a22, $1[17] AS a23, $1[18] AS a24, $1[19] AS a25, $1[20] AS a26, $1[21] AS a27, $1[22] AS a28, $1[23] AS a29, $1[24] AS a3, $1[25] AS a30, $1[26] AS a31, $1[27] AS a32, $1[28] AS a33, $1[29] AS a34, $1[30] AS a35, $1[31] AS a36, $1[32] AS a37, $1[33] AS a38, $1[34] AS a39, $1[35] AS a4, $1[36] AS a40, $1[37] AS a41, $1[38] AS a42, $1[39] AS a43, $1[40] AS a44, $1[41] AS a45, $1[42] AS a46, $1[43] AS a47, $1[44] AS a48, $1[45] AS a49, $1[46] AS a5, $1[47] AS a50, $1[48] AS a51, $1[49] AS a52, $1[50] AS a53, $1[51] AS a54, $1[52] AS a55, $1[53] AS a56, $1[54] AS a57, $1[55] AS a58, $1[56] AS a59, $1[57] AS a6, $1[58] AS a60, $1[59] AS a61, $1[60] AS a62, $1[61] AS a63, $1[62] AS a64, $1[63] AS a65, $1[64] AS a66, $1[65] AS a67, $1[66] AS a68, $1[67] AS a69, $1[68] AS a7, $1[69] AS a70, $1[70] AS a71, $1[71] AS a72, $1[72] AS a73, $1[73] AS a74, $1[74] AS a75, $1[75] AS a76, $1[76] AS a77, $1[77] AS a78, $1[78] AS a79, $1[79] AS a8, $1[80] AS a80, $1[81] AS a81, $1[82] AS a82, $1[83] AS a83, $1[84] AS a84, $1[85] AS a85, $1[86] AS a86, $1[87] AS a87, $1[88] AS a88, $1[89] AS a89, $1[90] AS a9, $1[91] AS a90, $1[92] AS a91, $1[93] AS a92, $1[94] AS a93, $1[95] AS a94, $1[96] AS a95, $1[97] AS a96, $1[98] AS a97, $1[99] AS a98, $1[100] AS a99, $1[101] AS flow_published_at, $1[102] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 1\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.a0 = r.a0, l.a1 = r.a1, l.a10 = r.a10, l.a11 = r.a11, l.a12 = r.a12, l.a13 = r.a13, l.a14 = r.a14, l.a15 = r.a15, l.a16 = r.a16, l.a17 = r.a17, l.a18 = r.a18, l.a19 = r.a19, l.a2 = r.a2, l.a20 = r.a20, l.a21 = r.a21, l.a22 = r.a22, l.a23 = r.a23, l.a24 = r.a24, l.a25 = r.a25, l.a26 = r.a26, l.a27 = r.a27, l.a28 = r.a28, l.a29 = r.a29, l.a3 = r.a3, l.a30 = r.a30, l.a31 = r.a31, l.a32 = r.a32, l.a33 = r.a33, l.a34 = r.a34, l.a35 = r.a35, l.a36 = r.a36, l.a37 = r.a37, l.a38 = r.a38, l.a39 = r.a39, l.a4 = r.a4, l.a40 = r.a40, l.a41 = r.a41, l.a42 = r.a42, l.a43 = r.a43, l.a44 = r.a44, l.a45 = r.a45, l.a46 = r.a46, l.a47 = r.a47, l.a48 = r.a48, l.a49 = r.a49, l.a5 = r.a5, l.a50 = r.a50, l.a51 = r.a51, l.a52 = r.a52, l.a53 = r.a53, l.a54 = r.a54, l.a55 = r.a55, l.a56 = r.a56, l.a57 = r.a57, l.a58 = r.a58, l.a59 = r.a59, l.a6 = r.a6, l.a60 = r.a60, l.a61 = r.a61, l.a62 = r.a62, l.a63 = r.a63, l.a64 = r.a64, l.a65 = r.a65, l.a66 = r.a66, l.a67 = r.a67, l.a68 = r.a68, l.a69 = r.a69, l.a7 = r.a7, l.a70 = r.a70, l.a71 = r.a71, l.a72 = r.a72, l.a73 = r.a73, l.a74 = r.a74, l.a75 = r.a75, l.a76 = r.a76, l.a77 = r.a77, l.a78 = r.a78, l.a79 = r.a79, l.a8 = r.a8, l.a80 = r.a80, l.a81 = r.a81, l.a82 = r.a82, l.a83 = r.a83, l.a84 = r.a84, l.a85 = r.a85, l.a86 = r.a86, l.a87 = r.a87, l.a88 = r.a88, l.a89 = r.a89, l.a9 = r.a9, l.a90 = r.a90, l.a91 = r.a91, l.a92 = r.a92, l.a93 = r.a93, l.a94 = r.a94, l.a95 = r.a95, l.a96 = r.a96, l.a97 = r.a97, l.a98 = r.a98, l.a99 = r.a99, l.flow_published_at = r.flow_published_at\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a6, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a7, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a8, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, a9, a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, flow_published_at)\n\tVALUES (r.id, r.a0, r.a1, r.a10, r.a11, r.a12, r.a13, r.a14, r.a15, r.a16, r.a17, r.a18, r.a19, r.a2, r.a20, r.a21, r.a22, r.a23, r.a24, r.a25, r.a26, r.a27, r.a28, r.a29, r.a3, r.a30, r.a31, r.a32, r.a33, r.a34, r.a35, r.a36, r.a37, r.a38, r.a39, r.a4, r.a40, r.a41, r.a42, r.a43, r.a44, r.a45, r.a46, r.a47, r.a48, r.a49, r.a5, r.a50, r.a51, r.a52, r.a53, r.a54, r.a55, r.a56, r.a57, r.a58, r.a59, r.a6, r.a60, r.a61, r.a62, r.a63, r.a64, r.a65, r.a66, r.a67, r.a68, r.a69, r.a7, r.a70, r.a71, r.a72, r.a73, r.a74, r.a75, r.a76, r.a77, r.a78, r.a79, r.a8, r.a80, r.a81, r.a82, r.a83, r.a84, r.a85, r.a86, r.a87, r.a88, r.a89, r.a9, r.a90, r.a91, r.a92, r.a93, r.a94, r.a95, r.a96, r.a97, r.a98, r.a99, r.flow_published_at);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "multiple_types": {
        "Table": "multiple_types",
        "Query": "\nMERGE INTO multiple_types AS l\nUSING (\n\tSELECT $1[0] AS id, NULLIF($1[1], PARSE_JSON('null')) AS array_int, $1[2] AS binary_field, $1[3] AS bool_field, $1[4] AS float_field, $1[5] AS flow_published_at, NULLIF($1[6], PARSE_JSON('null')) AS multiple, NULLIF($1[7], PARSE_JSON('null')) AS nested, $1[8] AS nullable_int, $1[9] AS str_field, $1[10] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= 1 AND l.id <= 10\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.array_int = r.array_int, l.binary_field = r.binary_field, l.bool_field = r.bool_field, l.float_field = r.float_field, l.flow_published_at = r.flow_published_at, l.multiple = r.multiple, l.nested = r.nested, l.nullable_int = r.nullable_int, l.str_field = r.str_field\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, array_int, binary_field, bool_field, float_field, flow_published_at, multiple, nested, nullable_int, str_field)\n\tVALUES (r.id, r.array_int, r.binary_field, r.bool_field, r.float_field, r.flow_published_at, r.multiple, r.nested, r.nullable_int, r.str_field);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      },
      "simple": {
        "Table": "simple",
        "Query": "\nCOPY INTO simple (\n\tid, canary, flow_published_at\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS canary, $1[2] AS flow_published_at\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "string_escaped_key": {
        "Table": "string_escaped_key",
        "Query": "\nMERGE INTO string_escaped_key AS l\nUSING (\n\tSELECT $1[0] AS id, $1[1] AS counter, $1[2] AS flow_published_at, $1[3] AS _flow_delete\n\tFROM <uuid>\n) AS r\nON \n\tl.id = r.id AND l.id >= '\\\\he \\\\ '' \" `llo`' AND l.id <= '\\\\he \\\\ '' \" `llo`'\nWHEN MATCHED AND r._flow_delete=true THEN\n\tDELETE\nWHEN MATCHED THEN\n\tUPDATE SET l.counter = r.counter, l.flow_published_at = r.flow_published_at\nWHEN NOT MATCHED AND r._flow_delete=false THEN\n\tINSERT (id, counter, flow_published_at)\n\tVALUES (r.id, r.counter, r.flow_published_at);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": "ffffffffffffffff"
      }
    },
    "mergePatch": true
  }
]
[
  "connectorState",
  {
    "updated": {
      "duplicate%20keys%20%40%20with%20spaces": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "\"duplicate keys @ with spaces\"",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "d075ceace3972e7f:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10804000000000,
                      "minIntValue": 10800000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10,
                      "minIntValue": 6,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 15,
                      "minIntValue": 11,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "737472203135",
                      "minStrValue": "737472203131",
                      "maxLength": 6,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_delta": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "d075ceace3972e7f:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10804000000000,
                      "minIntValue": 10800000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10,
                      "minIntValue": 6,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 15,
                      "minIntValue": 11,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "737472203135",
                      "minStrValue": "737472203131",
                      "maxLength": 6,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_delta_exclude_flow_doc": {
        "Table": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "path": "<path>",
            "md5": "<md5>",
            "chunks": [
              {
                "database": "ESTUARY_DB",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA_EXCLUDE_FLOW_DOC",
                "chunk_start_offset": 0,
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "row_sequencer": 0,
                    "offset_token": "d075ceace3972e7f:0"
                  }
                ],
                "chunk_md5": "<chunk_md5>",
                "eps": {
                  "rows": 5,
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "columnId": 2,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10804000000000,
                      "minIntValue": 10800000000000,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "ID": {
                      "columnId": 1,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 10,
                      "minIntValue": 6,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "INT": {
                      "columnId": 3,
                      "nullCount": 0,
                      "maxStrValue": null,
                      "minStrValue": null,
                      "maxLength": 0,
                      "maxIntValue": 15,
                      "minIntValue": 11,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    },
                    "STR": {
                      "columnId": 4,
                      "nullCount": 0,
                      "maxStrValue": "737472203135",
                      "minStrValue": "737472203131",
                      "maxLength": 6,
                      "maxIntValue": 0,
                      "minIntValue": 0,
                      "maxRealValue": null,
                      "minRealValue": null,
                      "distinctValues": -1,
                      "collation": null,
                      "minStrNonCollated": null,
                      "maxStrNonCollated": null
                    }
                  }
                },
                "encryption_key_id": "<encryption_key_id>",
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>"
              }
            ],
            "bdec_version": 3,
            "blob_stats": {
              "flush_start_ms": "<flush_start_ms>",
              "build_duration_ms": "<build_duration_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            }
          }
        ],
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      },
      "duplicate_keys_standard": {
        "Table": "duplicate_keys_standard",
        "Query": "\nCOPY INTO duplicate_keys_standard (\n\tid, flow_published_at, int, str\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS flow_published_at, $1[2] AS int, $1[3] AS str\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "StreamBlobs": null,
        "PipeName": "",
        "PipeFiles": null,
        "Version": ""
      }
    },
    "mergePatch": true
  }
]
[
  "connectorState",
  {
    "updated": {
      "duplicate%20keys%20%40%20with%20spaces": {
        "PipeName": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "bdec_version": 3,
            "blob_stats": {
              "build_duration_ms": "<build_duration_ms>",
              "flush_start_ms": "<flush_start_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            },
            "chunks": [
              {
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "offset_token": "d075ceace3972e7f:0",
                    "row_sequencer": 0
                  }
                ],
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "chunk_md5": "<chunk_md5>",
                "chunk_start_offset": 0,
                "database": "ESTUARY_DB",
                "encryption_key_id": "<encryption_key_id>",
                "eps": {
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "collation": null,
                      "columnId": 2,
                      "distinctValues": -1,
                      "maxIntValue": 10804000000000,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 10800000000000,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "ID": {
                      "collation": null,
                      "columnId": 1,
                      "distinctValues": -1,
                      "maxIntValue": 10,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 6,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "INT": {
                      "collation": null,
                      "columnId": 3,
                      "distinctValues": -1,
                      "maxIntValue": 15,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 11,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "STR": {
                      "collation": null,
                      "columnId": 4,
                      "distinctValues": -1,
                      "maxIntValue": 0,
                      "maxLength": 6,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": "737472203135",
                      "minIntValue": 0,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": "737472203131",
                      "nullCount": 0
                    }
                  },
                  "rows": 5
                },
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>",
                "schema": "ESTUARY_SCHEMA",
                "table": "\"duplicate keys @ with spaces\""
              }
            ],
            "md5": "<md5>",
            "path": "<path>"
          }
        ],
        "Table": "",
        "Version": ""
      },
      "duplicate_keys_delta": {
        "PipeName": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "bdec_version": 3,
            "blob_stats": {
              "build_duration_ms": "<build_duration_ms>",
              "flush_start_ms": "<flush_start_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            },
            "chunks": [
              {
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "offset_token": "d075ceace3972e7f:0",
                    "row_sequencer": 0
                  }
                ],
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "chunk_md5": "<chunk_md5>",
                "chunk_start_offset": 0,
                "database": "ESTUARY_DB",
                "encryption_key_id": "<encryption_key_id>",
                "eps": {
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "collation": null,
                      "columnId": 2,
                      "distinctValues": -1,
                      "maxIntValue": 10804000000000,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 10800000000000,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "ID": {
                      "collation": null,
                      "columnId": 1,
                      "distinctValues": -1,
                      "maxIntValue": 10,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 6,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "INT": {
                      "collation": null,
                      "columnId": 3,
                      "distinctValues": -1,
                      "maxIntValue": 15,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 11,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "STR": {
                      "collation": null,
                      "columnId": 4,
                      "distinctValues": -1,
                      "maxIntValue": 0,
                      "maxLength": 6,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": "737472203135",
                      "minIntValue": 0,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": "737472203131",
                      "nullCount": 0
                    }
                  },
                  "rows": 5
                },
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA"
              }
            ],
            "md5": "<md5>",
            "path": "<path>"
          }
        ],
        "Table": "",
        "Version": ""
      },
      "duplicate_keys_delta_exclude_flow_doc": {
        "PipeName": "",
        "Query": "",
        "StagedDir": "",
        "StreamBlobs": [
          {
            "bdec_version": 3,
            "blob_stats": {
              "build_duration_ms": "<build_duration_ms>",
              "flush_start_ms": "<flush_start_ms>",
              "upload_duration_ms": "<upload_duration_ms>"
            },
            "chunks": [
              {
                "channels": [
                  {
                    "channel_name": "TESTS_MATERIALIZE_SNOWFLAKE_MATE_99A06F45B5F50222_00000000",
                    "client_sequencer": 0,
                    "offset_token": "d075ceace3972e7f:0",
                    "row_sequencer": 0
                  }
                ],
                "chunk_length": "<chunk_length>",
                "chunk_length_uncompressed": "<chunk_length_uncompressed>",
                "chunk_md5": "<chunk_md5>",
                "chunk_start_offset": 0,
                "database": "ESTUARY_DB",
                "encryption_key_id": "<encryption_key_id>",
                "eps": {
                  "columns": {
                    "FLOW_PUBLISHED_AT": {
                      "collation": null,
                      "columnId": 2,
                      "distinctValues": -1,
                      "maxIntValue": 10804000000000,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 10800000000000,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "ID": {
                      "collation": null,
                      "columnId": 1,
                      "distinctValues": -1,
                      "maxIntValue": 10,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 6,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "INT": {
                      "collation": null,
                      "columnId": 3,
                      "distinctValues": -1,
                      "maxIntValue": 15,
                      "maxLength": 0,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": null,
                      "minIntValue": 11,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": null,
                      "nullCount": 0
                    },
                    "STR": {
                      "collation": null,
                      "columnId": 4,
                      "distinctValues": -1,
                      "maxIntValue": 0,
                      "maxLength": 6,
                      "maxRealValue": null,
                      "maxStrNonCollated": null,
                      "maxStrValue": "737472203135",
                      "minIntValue": 0,
                      "minRealValue": null,
                      "minStrNonCollated": null,
                      "minStrValue": "737472203131",
                      "nullCount": 0
                    }
                  },
                  "rows": 5
                },
                "first_insert_time_in_ms": "<first_insert_time_in_ms>",
                "last_insert_time_in_ms": "<last_insert_time_in_ms>",
                "schema": "ESTUARY_SCHEMA",
                "table": "DUPLICATE_KEYS_DELTA_EXCLUDE_FLOW_DOC"
              }
            ],
            "md5": "<md5>",
            "path": "<path>"
          }
        ],
        "Table": "",
        "Version": ""
      },
      "duplicate_keys_standard": {
        "PipeName": "",
        "Query": "\nCOPY INTO duplicate_keys_standard (\n\tid, flow_published_at, int, str\n) FROM (\n\tSELECT $1[0] AS id, $1[1] AS flow_published_at, $1[2] AS int, $1[3] AS str\n\tFROM <uuid>\n);\n",
        "StagedDir": "<uuid>",
        "Table": "duplicate_keys_standard",
        "Version": ""
      }
    }
  }
]
{
  "_table": "simple",
  "rows": [
    {
      "CANARY": "amputation's",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:00Z",
      "ID": "1"
    },
    {
      "CANARY": "armament's",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:01Z",
      "ID": "2"
    },
    {
      "CANARY": "splatters",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:02Z",
      "ID": "3"
    },
    {
      "CANARY": "strengthen",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:03Z",
      "ID": "4"
    },
    {
      "CANARY": "Kringle's",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:04Z",
      "ID": "5"
    },
    {
      "CANARY": "grosbeak's",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:05Z",
      "ID": "6"
    },
    {
      "CANARY": "pieced",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:00Z",
      "ID": "7"
    },
    {
      "CANARY": "roaches",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:01Z",
      "ID": "8"
    },
    {
      "CANARY": "devilish",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:02Z",
      "ID": "9"
    },
    {
      "CANARY": "glucose's",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:03Z",
      "ID": "10"
    }
  ]
}
{
  "_table": "duplicate_keys_standard",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:04Z",
      "ID": "1",
      "INT": "7",
      "STR": "str 6"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:05Z",
      "ID": "2",
      "INT": "9",
      "STR": "str 7"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:06Z",
      "ID": "3",
      "INT": "11",
      "STR": "str 8"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:07Z",
      "ID": "4",
      "INT": "13",
      "STR": "str 9"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:08Z",
      "ID": "5",
      "INT": "15",
      "STR": "str 10"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:00Z",
      "ID": "6",
      "INT": "11",
      "STR": "str 11"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:01Z",
      "ID": "7",
      "INT": "12",
      "STR": "str 12"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:02Z",
      "ID": "8",
      "INT": "13",
      "STR": "str 13"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:03Z",
      "ID": "9",
      "INT": "14",
      "STR": "str 14"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:04Z",
      "ID": "10",
      "INT": "15",
      "STR": "str 15"
    }
  ]
}
{
  "_table": "duplicate_keys_delta",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:06Z",
      "ID": "1",
      "INT": "1",
      "STR": "str 1"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:04Z",
      "ID": "1",
      "INT": "6",
      "STR": "str 6"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:07Z",
      "ID": "2",
      "INT": "2",
      "STR": "str 2"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:05Z",
      "ID": "2",
      "INT": "7",
      "STR": "str 7"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:08Z",
      "ID": "3",
      "INT": "3",
      "STR": "str 3"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:06Z",
      "ID": "3",
      "INT": "8",
      "STR": "str 8"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:09Z",
      "ID": "4",
      "INT": "4",
      "STR": "str 4"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:07Z",
      "ID": "4",
      "INT": "9",
      "STR": "str 9"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:10Z",
      "ID": "5",
      "INT": "5",
      "STR": "str 5"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:08Z",
      "ID": "5",
      "INT": "10",
      "STR": "str 10"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:00Z",
      "ID": "6",
      "INT": "11",
      "STR": "str 11"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:01Z",
      "ID": "7",
      "INT": "12",
      "STR": "str 12"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:02Z",
      "ID": "8",
      "INT": "13",
      "STR": "str 13"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:03Z",
      "ID": "9",
      "INT": "14",
      "STR": "str 14"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:04Z",
      "ID": "10",
      "INT": "15",
      "STR": "str 15"
    }
  ]
}
{
  "_table": "duplicate_keys_delta_exclude_flow_doc",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:06Z",
      "ID": "1",
      "INT": "1",
      "STR": "str 1"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:04Z",
      "ID": "1",
      "INT": "6",
      "STR": "str 6"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:07Z",
      "ID": "2",
      "INT": "2",
      "STR": "str 2"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:05Z",
      "ID": "2",
      "INT": "7",
      "STR": "str 7"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:08Z",
      "ID": "3",
      "INT": "3",
      "STR": "str 3"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:06Z",
      "ID": "3",
      "INT": "8",
      "STR": "str 8"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:09Z",
      "ID": "4",
      "INT": "4",
      "STR": "str 4"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:07Z",
      "ID": "4",
      "INT": "9",
      "STR": "str 9"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:10Z",
      "ID": "5",
      "INT": "5",
      "STR": "str 5"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:08Z",
      "ID": "5",
      "INT": "10",
      "STR": "str 10"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:00Z",
      "ID": "6",
      "INT": "11",
      "STR": "str 11"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:01Z",
      "ID": "7",
      "INT": "12",
      "STR": "str 12"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:02Z",
      "ID": "8",
      "INT": "13",
      "STR": "str 13"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:03Z",
      "ID": "9",
      "INT": "14",
      "STR": "str 14"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:04Z",
      "ID": "10",
      "INT": "15",
      "STR": "str 15"
    }
  ]
}
{
  "_table": "duplicate keys @ with spaces",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:06Z",
      "ID": "1",
      "INT": "1",
      "STR": "str 1"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:04Z",
      "ID": "1",
      "INT": "6",
      "STR": "str 6"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:07Z",
      "ID": "2",
      "INT": "2",
      "STR": "str 2"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:05Z",
      "ID": "2",
      "INT": "7",
      "STR": "str 7"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:08Z",
      "ID": "3",
      "INT": "3",
      "STR": "str 3"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:06Z",
      "ID": "3",
      "INT": "8",
      "STR": "str 8"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:09Z",
      "ID": "4",
      "INT": "4",
      "STR": "str 4"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:07Z",
      "ID": "4",
      "INT": "9",
      "STR": "str 9"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:10Z",
      "ID": "5",
      "INT": "5",
      "STR": "str 5"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:08Z",
      "ID": "5",
      "INT": "10",
      "STR": "str 10"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:00Z",
      "ID": "6",
      "INT": "11",
      "STR": "str 11"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:01Z",
      "ID": "7",
      "INT": "12",
      "STR": "str 12"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:02Z",
      "ID": "8",
      "INT": "13",
      "STR": "str 13"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:03Z",
      "ID": "9",
      "INT": "14",
      "STR": "str 14"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T03:00:04Z",
      "ID": "10",
      "INT": "15",
      "STR": "str 15"
    }
  ]
}
{
  "_table": "multiple_types",
  "rows": [
    {
      "ARRAY_INT": "[\n  11,\n  12\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": false,
      "FLOAT_FIELD": 1.1,
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:13Z",
      "ID": "1",
      "MULTIPLE": "1",
      "NESTED": "{\n  \"id\": \"i1\"\n}",
      "NULLABLE_INT": null,
      "STR_FIELD": "str1"
    },
    {
      "ARRAY_INT": "[\n  21,\n  22\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": true,
      "FLOAT_FIELD": 2.2,
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:14Z",
      "ID": "2",
      "MULTIPLE": "2.2",
      "NESTED": "{\n  \"id\": \"i2\"\n}",
      "NULLABLE_INT": "2",
      "STR_FIELD": "str2"
    },
    {
      "ARRAY_INT": "[\n  31,\n  32\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": false,
      "FLOAT_FIELD": 3.3,
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:15Z",
      "ID": "3",
      "MULTIPLE": "true",
      "NESTED": "{\n  \"id\": \"i3\"\n}",
      "NULLABLE_INT": null,
      "STR_FIELD": "str3"
    },
    {
      "ARRAY_INT": "[\n  41,\n  42\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": true,
      "FLOAT_FIELD": 4.4,
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:16Z",
      "ID": "4",
      "MULTIPLE": "false",
      "NESTED": "{\n  \"id\": \"i4\"\n}",
      "NULLABLE_INT": "4",
      "STR_FIELD": "str4"
    },
    {
      "ARRAY_INT": "[\n  51,\n  52\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": false,
      "FLOAT_FIELD": 5.5,
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:17Z",
      "ID": "5",
      "MULTIPLE": "\"string five\"",
      "NESTED": "{\n  \"id\": \"i5\"\n}",
      "NULLABLE_INT": null,
      "STR_FIELD": "str5"
    },
    {
      "ARRAY_INT": "[\n  61,\n  62\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": true,
      "FLOAT_FIELD": 66.66,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:19Z",
      "ID": "6",
      "MULTIPLE": "[\n  \"one\",\n  2,\n  true\n]",
      "NESTED": "{\n  \"id\": \"i6\"\n}",
      "NULLABLE_INT": "6",
      "STR_FIELD": "str6 v2"
    },
    {
      "ARRAY_INT": "[\n  71,\n  72\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": false,
      "FLOAT_FIELD": 77.77,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:20Z",
      "ID": "7",
      "MULTIPLE": "{\n  \"object\": \"seven\"\n}",
      "NESTED": "{\n  \"id\": \"i7\"\n}",
      "NULLABLE_INT": null,
      "STR_FIELD": "str7 v2"
    },
    {
      "ARRAY_INT": "[\n  81,\n  82\n]",
      "BINARY_FIELD": null,
      "BOOL_FIELD": true,
      "FLOAT_FIELD": 88.88,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:21Z",
      "ID": "8",
      "MULTIPLE": null,
      "NESTED": "{\n  \"id\": \"i8\"\n}",
      "NULLABLE_INT": "8",
      "STR_FIELD": "str8 v2"
    },
    {
      "ARRAY_INT": "[\n  91,\n  92\n]",
      "BINARY_FIELD": "YWxvaGEK",
      "BOOL_FIELD": false,
      "FLOAT_FIELD": 99.99,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:22Z",
      "ID": "9",
      "MULTIPLE": null,
      "NESTED": "{\n  \"id\": \"i9\"\n}",
      "NULLABLE_INT": null,
      "STR_FIELD": "str9 v2"
    },
    {
      "ARRAY_INT": "[\n  1,\n  2\n]",
      "BINARY_FIELD": "c2F5xY1uYXJhCg==",
      "BOOL_FIELD": true,
      "FLOAT_FIELD": 1010.101,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:23Z",
      "ID": "10",
      "MULTIPLE": null,
      "NESTED": "{\n  \"id\": \"i10\"\n}",
      "NULLABLE_INT": "10",
      "STR_FIELD": "str10 v2"
    }
  ]
}
{
  "_table": "formatted_strings",
  "rows": [
    {
      "DATE": "0000-01-01T00:00:00Z",
      "DATETIME": "0000-01-01T00:00:00Z",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:13Z",
      "ID": "1",
      "INT_AND_STR": "1",
      "INT_STR": "10",
      "NUM_AND_STR": 1.1,
      "NUM_STR": 10.1,
      "TIME": "00:00:00Z"
    },
    {
      "DATE": "1999-02-02T00:00:00Z",
      "DATETIME": "1999-02-02T14:20:12.33Z",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:14Z",
      "ID": "2",
      "INT_AND_STR": "2",
      "INT_STR": "20",
      "NUM_AND_STR": 2.1,
      "NUM_STR": 20.1,
      "TIME": "14:20:12.33Z"
    },
    {
      "DATE": "1000-03-03T00:00:00Z",
      "DATETIME": "1000-03-03T23:59:38.1Z",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:11Z",
      "ID": "3",
      "INT_AND_STR": "3",
      "INT_STR": "30",
      "NUM_AND_STR": 3.1,
      "NUM_STR": 30.1,
      "TIME": "23:59:38.10Z"
    },
    {
      "DATE": "2023-08-29T00:00:00Z",
      "DATETIME": "2023-08-29T23:59:38Z",
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:12Z",
      "ID": "4",
      "INT_AND_STR": "4",
      "INT_STR": "40",
      "NUM_AND_STR": 4.1,
      "NUM_STR": 40.1,
      "TIME": "23:59:38Z"
    },
    {
      "DATE": "9999-12-31T00:00:00Z",
      "DATETIME": "9999-12-31T23:59:59Z",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:15Z",
      "ID": "5",
      "INT_AND_STR": "5",
      "INT_STR": "50",
      "NUM_AND_STR": 5.1,
      "NUM_STR": 50.1,
      "TIME": "23:59:59Z"
    },
    {
      "DATE": null,
      "DATETIME": null,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:16Z",
      "ID": "8",
      "INT_AND_STR": null,
      "INT_STR": null,
      "NUM_AND_STR": null,
      "NUM_STR": "NaN",
      "TIME": null
    },
    {
      "DATE": null,
      "DATETIME": null,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:17Z",
      "ID": "9",
      "INT_AND_STR": null,
      "INT_STR": null,
      "NUM_AND_STR": null,
      "NUM_STR": "Infinity",
      "TIME": null
    },
    {
      "DATE": null,
      "DATETIME": null,
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:18Z",
      "ID": "10",
      "INT_AND_STR": null,
      "INT_STR": null,
      "NUM_AND_STR": null,
      "NUM_STR": "-Infinity",
      "TIME": null
    }
  ]
}
{
  "_table": "symbols",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:27Z",
      "ID": "test",
      "testing (%s)": "test"
    }
  ]
}
{
  "_table": "unsigned_bigint",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:28Z",
      "ID": "1",
      "UNSIGNED_BIGINT": "18446744073709551615"
    }
  ]
}
{
  "_table": "deletions",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:26Z",
      "ID": "2",
      "_meta/op": "u"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:27Z",
      "ID": "3",
      "_meta/op": "c"
    }
  ]
}
{
  "_table": "string_escaped_key",
  "rows": [
    {
      "COUNTER": "3",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:31Z",
      "ID": "\\he \\ ' \" `llo`"
    }
  ]
}
{
  "_table": "all_key_types_part_one",
  "rows": [
    {
      "COUNTER": "2",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:32Z",
      "ID": "1",
      "STRINT": "1",
      "STRINTKEY": "1",
      "STRNUM": 10.1,
      "STRNUMKEY": "10.1"
    }
  ]
}
{
  "_table": "all_key_types_part_two",
  "rows": [
    {
      "COUNTER": "2",
      "DATE": "0001-01-01T00:00:00Z",
      "DATEKEY": "0000-01-01",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:33Z",
      "ID": "1",
      "TIME": "12:34:56Z",
      "TIMEKEY": "12:34:56Z"
    }
  ]
}
{
  "_table": "all_key_types_part_three",
  "rows": [
    {
      "COUNTER": "2",
      "DATETIME": "0000-01-01T12:34:56Z",
      "DATETIMEKEY": "0000-01-01T12:34:56Z",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:34Z",
      "ID": "1",
      "UUID": "550e8400-e29b-41d4-a716-446655440000",
      "UUIDKEY": "550e8400-e29b-41d4-a716-446655440000"
    }
  ]
}
{
  "_table": "fields_with_projections",
  "rows": [
    {
      "ANOTHER_FIELD": "another_updated",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:35Z",
      "ID": "1",
      "PROJECTED_ANOTHER": "another_updated",
      "PROJECTED_FIELD": "updated_value"
    }
  ]
}
{
  "_table": "many_columns",
  "rows": [
    {
      "A0": "100",
      "A1": "101",
      "A10": null,
      "A11": null,
      "A12": null,
      "A13": null,
      "A14": null,
      "A15": "115",
      "A16": null,
      "A17": null,
      "A18": null,
      "A19": null,
      "A2": null,
      "A20": null,
      "A21": null,
      "A22": null,
      "A23": null,
      "A24": null,
      "A25": "125",
      "A26": null,
      "A27": null,
      "A28": null,
      "A29": null,
      "A3": null,
      "A30": null,
      "A31": null,
      "A32": null,
      "A33": null,
      "A34": null,
      "A35": "135",
      "A36": null,
      "A37": null,
      "A38": null,
      "A39": null,
      "A4": null,
      "A40": null,
      "A41": null,
      "A42": null,
      "A43": null,
      "A44": null,
      "A45": "145",
      "A46": null,
      "A47": null,
      "A48": null,
      "A49": null,
      "A5": null,
      "A50": null,
      "A51": null,
      "A52": null,
      "A53": null,
      "A54": null,
      "A55": "155",
      "A56": null,
      "A57": null,
      "A58": null,
      "A59": null,
      "A6": null,
      "A60": null,
      "A61": null,
      "A62": null,
      "A63": null,
      "A64": null,
      "A65": "165",
      "A66": null,
      "A67": null,
      "A68": null,
      "A69": null,
      "A7": null,
      "A70": null,
      "A71": null,
      "A72": null,
      "A73": null,
      "A74": null,
      "A75": "175",
      "A76": null,
      "A77": null,
      "A78": null,
      "A79": null,
      "A8": null,
      "A80": null,
      "A81": null,
      "A82": null,
      "A83": null,
      "A84": null,
      "A85": "185",
      "A86": null,
      "A87": null,
      "A88": null,
      "A89": null,
      "A9": null,
      "A90": null,
      "A91": null,
      "A92": null,
      "A93": null,
      "A94": null,
      "A95": "195",
      "A96": null,
      "A97": null,
      "A98": null,
      "A99": "199",
      "FLOW_PUBLISHED_AT": "1970-01-01T02:00:36Z",
      "ID": "1"
    }
  ]
}
{
  "_table": "timezone_datetimes_standard",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:36Z",
      "ID": "1",
      "OFFSET_DATETIME": "2024-01-15T15:30:00Z",
      "UTC_DATETIME": "2024-01-15T15:30:00Z"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:37Z",
      "ID": "2",
      "OFFSET_DATETIME": "0001-01-01T00:00:00Z",
      "UTC_DATETIME": "0000-01-01T00:00:00Z"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:38Z",
      "ID": "3",
      "OFFSET_DATETIME": "2025-01-01T00:00:00.123456789Z",
      "UTC_DATETIME": "2025-01-01T00:00:00.123456789Z"
    }
  ]
}
{
  "_table": "timezone_datetimes_delta",
  "rows": [
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:36Z",
      "ID": "1",
      "OFFSET_DATETIME": "2024-01-15T15:30:00Z",
      "UTC_DATETIME": "2024-01-15T15:30:00Z"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:37Z",
      "ID": "2",
      "OFFSET_DATETIME": "0001-01-01T00:00:00Z",
      "UTC_DATETIME": "0000-01-01T00:00:00Z"
    },
    {
      "FLOW_PUBLISHED_AT": "1970-01-01T01:00:38Z",
      "ID": "3",
      "OFFSET_DATETIME": "2025-01-01T00:00:00.123456789Z",
      "UTC_DATETIME": "2025-01-01T00:00:00.123456789Z"
    }
  ]
}
[
  "applied.actionDescription",
  ""
]
[
  "connectorState",
  {
    "updated": {}
  }
]
