{
  "applied": {
    "actionDescription": "\n  CREATE TABLE IF NOT EXISTS flow_materializations_v2 (\n    materialization STRING NOT NULL,\n    version STRING NOT NULL,\n    spec STRING NOT NULL,\n\n    PRIMARY KEY (materialization)\n  );\n\n  COMMENT ON TABLE flow_materializations_v2 IS 'This table is the source of truth for all materializations into this system.';\n  COMMENT ON COLUMN flow_materializations_v2.materialization IS 'The name of the materialization.';\n  COMMENT ON COLUMN flow_materializations_v2.version IS 'Version of the materialization.';\n  COMMENT ON COLUMN flow_materializations_v2.spec IS 'Specification of the materialization, encoded as base64 protobuf.';\n  \n\n  CREATE TABLE IF NOT EXISTS flow_checkpoints_v1 (\n    materialization STRING NOT NULL,\n    key_begin INTEGER NOT NULL,\n    key_end INTEGER NOT NULL,\n    fence INTEGER NOT NULL,\n    checkpoint STRING NOT NULL,\n\n    PRIMARY KEY (materialization, key_begin, key_end)\n  );\n\n  COMMENT ON TABLE flow_checkpoints_v1 IS 'This table holds Flow processing checkpoints used for exactly-once processing of materializations';\n  COMMENT ON COLUMN flow_checkpoints_v1.materialization IS 'The name of the materialization.';\n  COMMENT ON COLUMN flow_checkpoints_v1.key_begin IS 'The inclusive lower-bound key hash covered by this checkpoint.';\n  COMMENT ON COLUMN flow_checkpoints_v1.key_end IS 'The inclusive upper-bound key hash covered by this checkpoint.';\n  COMMENT ON COLUMN flow_checkpoints_v1.fence IS 'This nonce is used to uniquely identify unique process assignments of a shard and prevent them from conflicting.';\n  COMMENT ON COLUMN flow_checkpoints_v1.checkpoint IS 'Checkpoint of the Flow consumer shard, encoded as base64 protobuf.';\n  \n\n  CREATE TABLE IF NOT EXISTS Simple (\n    id INTEGER NOT NULL,\n    canary STRING NOT NULL,\n    flow_document VARIANT NOT NULL,\n\n    PRIMARY KEY (id)\n  );\n\n  COMMENT ON TABLE Simple IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/simple';\n  COMMENT ON COLUMN Simple.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\n  COMMENT ON COLUMN Simple.canary IS 'auto-generated projection of JSON at: /canary with inferred types: [string]';\n  COMMENT ON COLUMN Simple.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n  \n\n  CREATE TABLE IF NOT EXISTS duplicate_keys_standard (\n    id INTEGER NOT NULL,\n    int INTEGER,\n    str STRING,\n    flow_document VARIANT NOT NULL,\n\n    PRIMARY KEY (id)\n  );\n\n  COMMENT ON TABLE duplicate_keys_standard IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\n  COMMENT ON COLUMN duplicate_keys_standard.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\n  COMMENT ON COLUMN duplicate_keys_standard.int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\n  COMMENT ON COLUMN duplicate_keys_standard.str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n  COMMENT ON COLUMN duplicate_keys_standard.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n  \n\n  CREATE TABLE IF NOT EXISTS duplicate_keys_delta (\n    id INTEGER NOT NULL,\n    int INTEGER,\n    str STRING,\n    flow_document VARIANT NOT NULL\n  );\n\n  COMMENT ON TABLE duplicate_keys_delta IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\n  COMMENT ON COLUMN duplicate_keys_delta.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\n  COMMENT ON COLUMN duplicate_keys_delta.int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\n  COMMENT ON COLUMN duplicate_keys_delta.str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n  COMMENT ON COLUMN duplicate_keys_delta.flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n  \n\n  CREATE TABLE IF NOT EXISTS duplicate_keys_delta_exclude_flow_doc (\n    id INTEGER NOT NULL,\n    int INTEGER,\n    str STRING\n  );\n\n  COMMENT ON TABLE duplicate_keys_delta_exclude_flow_doc IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/duplicated-keys';\n  COMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\n  COMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.int IS 'auto-generated projection of JSON at: /int with inferred types: [integer]';\n  COMMENT ON COLUMN duplicate_keys_delta_exclude_flow_doc.str IS 'auto-generated projection of JSON at: /str with inferred types: [string]';\n  \n\n  CREATE TABLE IF NOT EXISTS \"Multiple Types\" (\n    id INTEGER NOT NULL,\n    array_int VARIANT,\n    bool_field BOOLEAN,\n    float_field DOUBLE,\n    nested VARIANT,\n    nullable_int INTEGER,\n    str_field STRING,\n    flow_document VARIANT NOT NULL,\n\n    PRIMARY KEY (id)\n  );\n\n  COMMENT ON TABLE \"Multiple Types\" IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/multiple-data-types';\n  COMMENT ON COLUMN \"Multiple Types\".id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\n  COMMENT ON COLUMN \"Multiple Types\".array_int IS 'auto-generated projection of JSON at: /array_int with inferred types: [array]';\n  COMMENT ON COLUMN \"Multiple Types\".bool_field IS 'auto-generated projection of JSON at: /bool_field with inferred types: [boolean]';\n  COMMENT ON COLUMN \"Multiple Types\".float_field IS 'auto-generated projection of JSON at: /float_field with inferred types: [number]';\n  COMMENT ON COLUMN \"Multiple Types\".nested IS 'auto-generated projection of JSON at: /nested with inferred types: [object]';\n  COMMENT ON COLUMN \"Multiple Types\".nullable_int IS 'auto-generated projection of JSON at: /nullable_int with inferred types: [integer null]';\n  COMMENT ON COLUMN \"Multiple Types\".str_field IS 'auto-generated projection of JSON at: /str_field with inferred types: [string]';\n  COMMENT ON COLUMN \"Multiple Types\".flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n  \n\n  CREATE TABLE IF NOT EXISTS \"Formatted Strings\" (\n    id INTEGER NOT NULL,\n    int_and_str INTEGER,\n    int_str INTEGER,\n    num_and_str DOUBLE,\n    num_str DOUBLE,\n    flow_document VARIANT NOT NULL,\n\n    PRIMARY KEY (id)\n  );\n\n  COMMENT ON TABLE \"Formatted Strings\" IS 'Generated for materialization tests/materialize-snowflake/materialize of collection tests/formatted-strings';\n  COMMENT ON COLUMN \"Formatted Strings\".id IS 'auto-generated projection of JSON at: /id with inferred types: [integer]';\n  COMMENT ON COLUMN \"Formatted Strings\".int_and_str IS 'auto-generated projection of JSON at: /int_and_str with inferred types: [integer string]';\n  COMMENT ON COLUMN \"Formatted Strings\".int_str IS 'auto-generated projection of JSON at: /int_str with inferred types: [string]';\n  COMMENT ON COLUMN \"Formatted Strings\".num_and_str IS 'auto-generated projection of JSON at: /num_and_str with inferred types: [number string]';\n  COMMENT ON COLUMN \"Formatted Strings\".num_str IS 'auto-generated projection of JSON at: /num_str with inferred types: [string]';\n  COMMENT ON COLUMN \"Formatted Strings\".flow_document IS 'auto-generated projection of JSON at:  with inferred types: [object]';\n  \nINSERT INTO flow_materializations_v2 (version, spec, materialization) VALUES ('test', '(a-base64-encoded-value)', 'tests/materialize-snowflake/materialize');"
  }
}
{
  "opened": {
    "runtimeCheckpoint": {}
  }
}
{
  "acknowledged": {}
}
{
  "flushed": {}
}
{
  "startedCommit": {}
}
{
  "acknowledged": {}
}
{
  "loaded": {
    "binding": 1,
    "doc": {
      "id": 1,
      "int": 1,
      "str": "str 1"
    }
  }
}
{
  "loaded": {
    "binding": 1,
    "doc": {
      "id": 2,
      "int": 2,
      "str": "str 2"
    }
  }
}
{
  "loaded": {
    "binding": 1,
    "doc": {
      "id": 3,
      "int": 3,
      "str": "str 3"
    }
  }
}
{
  "loaded": {
    "binding": 1,
    "doc": {
      "id": 4,
      "int": 4,
      "str": "str 4"
    }
  }
}
{
  "loaded": {
    "binding": 1,
    "doc": {
      "id": 5,
      "int": 5,
      "str": "str 5"
    }
  }
}
{
  "loaded": {
    "binding": 4,
    "doc": {
      "array_int": [
        1,
        2
      ],
      "bool_field": true,
      "float_field": 10.1,
      "id": 10,
      "nested": {
        "id": "i10"
      },
      "nullable_int": 10,
      "str_field": "str10"
    }
  }
}
{
  "loaded": {
    "binding": 4,
    "doc": {
      "array_int": [
        61,
        62
      ],
      "bool_field": true,
      "float_field": 6.6,
      "id": 6,
      "nested": {
        "id": "i6"
      },
      "nullable_int": 6,
      "str_field": "str6"
    }
  }
}
{
  "loaded": {
    "binding": 4,
    "doc": {
      "array_int": [
        71,
        72
      ],
      "bool_field": false,
      "float_field": 7.7,
      "id": 7,
      "nested": {
        "id": "i7"
      },
      "nullable_int": null,
      "str_field": "str7"
    }
  }
}
{
  "loaded": {
    "binding": 4,
    "doc": {
      "array_int": [
        81,
        82
      ],
      "bool_field": true,
      "float_field": 8.8,
      "id": 8,
      "nested": {
        "id": "i8"
      },
      "nullable_int": 8,
      "str_field": "str8"
    }
  }
}
{
  "loaded": {
    "binding": 4,
    "doc": {
      "array_int": [
        91,
        92
      ],
      "bool_field": false,
      "float_field": 9.9,
      "id": 9,
      "nested": {
        "id": "i9"
      },
      "nullable_int": null,
      "str_field": "str9"
    }
  }
}
{
  "flushed": {}
}
{
  "startedCommit": {}
}
{
  "acknowledged": {}
}
[
  "1",
  "amputation's",
  "{\n  \"canary\": \"amputation's\",\n  \"id\": 1\n}"
]
[
  "2",
  "armament's",
  "{\n  \"canary\": \"armament's\",\n  \"id\": 2\n}"
]
[
  "3",
  "splatters",
  "{\n  \"canary\": \"splatters\",\n  \"id\": 3\n}"
]
[
  "4",
  "strengthen",
  "{\n  \"canary\": \"strengthen\",\n  \"id\": 4\n}"
]
[
  "5",
  "Kringle's",
  "{\n  \"canary\": \"Kringle's\",\n  \"id\": 5\n}"
]
[
  "6",
  "grosbeak's",
  "{\n  \"canary\": \"grosbeak's\",\n  \"id\": 6\n}"
]
[
  "7",
  "pieced",
  "{\n  \"canary\": \"pieced\",\n  \"id\": 7\n}"
]
[
  "8",
  "roaches",
  "{\n  \"canary\": \"roaches\",\n  \"id\": 8\n}"
]
[
  "9",
  "devilish",
  "{\n  \"canary\": \"devilish\",\n  \"id\": 9\n}"
]
[
  "10",
  "glucose's",
  "{\n  \"canary\": \"glucose's\",\n  \"id\": 10\n}"
]
[
  "1",
  "6",
  "str 6",
  "{\n  \"id\": 1,\n  \"int\": 6,\n  \"str\": \"str 6\"\n}"
]
[
  "2",
  "7",
  "str 7",
  "{\n  \"id\": 2,\n  \"int\": 7,\n  \"str\": \"str 7\"\n}"
]
[
  "3",
  "8",
  "str 8",
  "{\n  \"id\": 3,\n  \"int\": 8,\n  \"str\": \"str 8\"\n}"
]
[
  "4",
  "9",
  "str 9",
  "{\n  \"id\": 4,\n  \"int\": 9,\n  \"str\": \"str 9\"\n}"
]
[
  "5",
  "10",
  "str 10",
  "{\n  \"id\": 5,\n  \"int\": 10,\n  \"str\": \"str 10\"\n}"
]
[
  "1",
  "1",
  "str 1",
  "{\n  \"id\": 1,\n  \"int\": 1,\n  \"str\": \"str 1\"\n}"
]
[
  "1",
  "6",
  "str 6",
  "{\n  \"id\": 1,\n  \"int\": 6,\n  \"str\": \"str 6\"\n}"
]
[
  "2",
  "2",
  "str 2",
  "{\n  \"id\": 2,\n  \"int\": 2,\n  \"str\": \"str 2\"\n}"
]
[
  "2",
  "7",
  "str 7",
  "{\n  \"id\": 2,\n  \"int\": 7,\n  \"str\": \"str 7\"\n}"
]
[
  "3",
  "3",
  "str 3",
  "{\n  \"id\": 3,\n  \"int\": 3,\n  \"str\": \"str 3\"\n}"
]
[
  "3",
  "8",
  "str 8",
  "{\n  \"id\": 3,\n  \"int\": 8,\n  \"str\": \"str 8\"\n}"
]
[
  "4",
  "4",
  "str 4",
  "{\n  \"id\": 4,\n  \"int\": 4,\n  \"str\": \"str 4\"\n}"
]
[
  "4",
  "9",
  "str 9",
  "{\n  \"id\": 4,\n  \"int\": 9,\n  \"str\": \"str 9\"\n}"
]
[
  "5",
  "5",
  "str 5",
  "{\n  \"id\": 5,\n  \"int\": 5,\n  \"str\": \"str 5\"\n}"
]
[
  "5",
  "10",
  "str 10",
  "{\n  \"id\": 5,\n  \"int\": 10,\n  \"str\": \"str 10\"\n}"
]
[
  "1",
  "1",
  "str 1"
]
[
  "1",
  "6",
  "str 6"
]
[
  "2",
  "2",
  "str 2"
]
[
  "2",
  "7",
  "str 7"
]
[
  "3",
  "3",
  "str 3"
]
[
  "3",
  "8",
  "str 8"
]
[
  "4",
  "4",
  "str 4"
]
[
  "4",
  "9",
  "str 9"
]
[
  "5",
  "5",
  "str 5"
]
[
  "5",
  "10",
  "str 10"
]
[
  "1",
  "[\n  11,\n  12\n]",
  false,
  1.1,
  "{\n  \"id\": \"i1\"\n}",
  null,
  "str1",
  "{\n  \"array_int\": [\n    11,\n    12\n  ],\n  \"bool_field\": false,\n  \"float_field\": 1.1,\n  \"id\": 1,\n  \"nested\": {\n    \"id\": \"i1\"\n  },\n  \"nullable_int\": null,\n  \"str_field\": \"str1\"\n}"
]
[
  "2",
  "[\n  21,\n  22\n]",
  true,
  2.2,
  "{\n  \"id\": \"i2\"\n}",
  "2",
  "str2",
  "{\n  \"array_int\": [\n    21,\n    22\n  ],\n  \"bool_field\": true,\n  \"float_field\": 2.2,\n  \"id\": 2,\n  \"nested\": {\n    \"id\": \"i2\"\n  },\n  \"nullable_int\": 2,\n  \"str_field\": \"str2\"\n}"
]
[
  "3",
  "[\n  31,\n  32\n]",
  false,
  3.3,
  "{\n  \"id\": \"i3\"\n}",
  null,
  "str3",
  "{\n  \"array_int\": [\n    31,\n    32\n  ],\n  \"bool_field\": false,\n  \"float_field\": 3.3,\n  \"id\": 3,\n  \"nested\": {\n    \"id\": \"i3\"\n  },\n  \"nullable_int\": null,\n  \"str_field\": \"str3\"\n}"
]
[
  "4",
  "[\n  41,\n  42\n]",
  true,
  4.4,
  "{\n  \"id\": \"i4\"\n}",
  "4",
  "str4",
  "{\n  \"array_int\": [\n    41,\n    42\n  ],\n  \"bool_field\": true,\n  \"float_field\": 4.4,\n  \"id\": 4,\n  \"nested\": {\n    \"id\": \"i4\"\n  },\n  \"nullable_int\": 4,\n  \"str_field\": \"str4\"\n}"
]
[
  "5",
  "[\n  51,\n  52\n]",
  false,
  5.5,
  "{\n  \"id\": \"i5\"\n}",
  null,
  "str5",
  "{\n  \"array_int\": [\n    51,\n    52\n  ],\n  \"bool_field\": false,\n  \"float_field\": 5.5,\n  \"id\": 5,\n  \"nested\": {\n    \"id\": \"i5\"\n  },\n  \"nullable_int\": null,\n  \"str_field\": \"str5\"\n}"
]
[
  "6",
  "[\n  61,\n  62\n]",
  true,
  66.66,
  "{\n  \"id\": \"i6\"\n}",
  "6",
  "str6 v2",
  "{\n  \"array_int\": [\n    61,\n    62\n  ],\n  \"bool_field\": true,\n  \"float_field\": 66.66,\n  \"id\": 6,\n  \"nested\": {\n    \"id\": \"i6\"\n  },\n  \"nullable_int\": 6,\n  \"str_field\": \"str6 v2\"\n}"
]
[
  "7",
  "[\n  71,\n  72\n]",
  false,
  77.77,
  "{\n  \"id\": \"i7\"\n}",
  null,
  "str7 v2",
  "{\n  \"array_int\": [\n    71,\n    72\n  ],\n  \"bool_field\": false,\n  \"float_field\": 77.77,\n  \"id\": 7,\n  \"nested\": {\n    \"id\": \"i7\"\n  },\n  \"nullable_int\": null,\n  \"str_field\": \"str7 v2\"\n}"
]
[
  "8",
  "[\n  81,\n  82\n]",
  true,
  88.88,
  "{\n  \"id\": \"i8\"\n}",
  "8",
  "str8 v2",
  "{\n  \"array_int\": [\n    81,\n    82\n  ],\n  \"bool_field\": true,\n  \"float_field\": 88.88,\n  \"id\": 8,\n  \"nested\": {\n    \"id\": \"i8\"\n  },\n  \"nullable_int\": 8,\n  \"str_field\": \"str8 v2\"\n}"
]
[
  "9",
  "[\n  91,\n  92\n]",
  false,
  99.99,
  "{\n  \"id\": \"i9\"\n}",
  null,
  "str9 v2",
  "{\n  \"array_int\": [\n    91,\n    92\n  ],\n  \"bool_field\": false,\n  \"float_field\": 99.99,\n  \"id\": 9,\n  \"nested\": {\n    \"id\": \"i9\"\n  },\n  \"nullable_int\": null,\n  \"str_field\": \"str9 v2\"\n}"
]
[
  "10",
  "[\n  1,\n  2\n]",
  true,
  1010.101,
  "{\n  \"id\": \"i10\"\n}",
  "10",
  "str10 v2",
  "{\n  \"array_int\": [\n    1,\n    2\n  ],\n  \"bool_field\": true,\n  \"float_field\": 1010.101,\n  \"id\": 10,\n  \"nested\": {\n    \"id\": \"i10\"\n  },\n  \"nullable_int\": 10,\n  \"str_field\": \"str10 v2\"\n}"
]
[
  "1",
  "1",
  "10",
  1.1,
  10.1,
  "{\n  \"id\": 1,\n  \"int_and_str\": 1,\n  \"int_str\": \"10\",\n  \"num_and_str\": 1.1,\n  \"num_str\": \"10.1\"\n}"
]
[
  "2",
  "2",
  "20",
  2.1,
  20.1,
  "{\n  \"id\": 2,\n  \"int_and_str\": 2,\n  \"int_str\": \"20\",\n  \"num_and_str\": 2.1,\n  \"num_str\": \"20.1\"\n}"
]
[
  "3",
  "3",
  "30",
  3.1,
  30.1,
  "{\n  \"id\": 3,\n  \"int_and_str\": 3,\n  \"int_str\": \"30\",\n  \"num_and_str\": 3.1,\n  \"num_str\": \"30.1\"\n}"
]
[
  "4",
  "4",
  "40",
  4.1,
  40.1,
  "{\n  \"id\": 4,\n  \"int_and_str\": \"4\",\n  \"int_str\": \"40\",\n  \"num_and_str\": \"4.1\",\n  \"num_str\": \"40.1\"\n}"
]
[
  "5",
  "5",
  "50",
  5.1,
  50.1,
  "{\n  \"id\": 5,\n  \"int_and_str\": \"5\",\n  \"int_str\": \"50\",\n  \"num_and_str\": \"5.1\",\n  \"num_str\": \"50.1\"\n}"
]
{
  "applied": {
    "actionDescription": "\n  CREATE TABLE IF NOT EXISTS flow_materializations_v2 (\n    materialization STRING NOT NULL,\n    version STRING NOT NULL,\n    spec STRING NOT NULL,\n\n    PRIMARY KEY (materialization)\n  );\n\n  COMMENT ON TABLE flow_materializations_v2 IS 'This table is the source of truth for all materializations into this system.';\n  COMMENT ON COLUMN flow_materializations_v2.materialization IS 'The name of the materialization.';\n  COMMENT ON COLUMN flow_materializations_v2.version IS 'Version of the materialization.';\n  COMMENT ON COLUMN flow_materializations_v2.spec IS 'Specification of the materialization, encoded as base64 protobuf.';\n  \n\n  CREATE TABLE IF NOT EXISTS flow_checkpoints_v1 (\n    materialization STRING NOT NULL,\n    key_begin INTEGER NOT NULL,\n    key_end INTEGER NOT NULL,\n    fence INTEGER NOT NULL,\n    checkpoint STRING NOT NULL,\n\n    PRIMARY KEY (materialization, key_begin, key_end)\n  );\n\n  COMMENT ON TABLE flow_checkpoints_v1 IS 'This table holds Flow processing checkpoints used for exactly-once processing of materializations';\n  COMMENT ON COLUMN flow_checkpoints_v1.materialization IS 'The name of the materialization.';\n  COMMENT ON COLUMN flow_checkpoints_v1.key_begin IS 'The inclusive lower-bound key hash covered by this checkpoint.';\n  COMMENT ON COLUMN flow_checkpoints_v1.key_end IS 'The inclusive upper-bound key hash covered by this checkpoint.';\n  COMMENT ON COLUMN flow_checkpoints_v1.fence IS 'This nonce is used to uniquely identify unique process assignments of a shard and prevent them from conflicting.';\n  COMMENT ON COLUMN flow_checkpoints_v1.checkpoint IS 'Checkpoint of the Flow consumer shard, encoded as base64 protobuf.';\n  \nUPDATE flow_materializations_v2 SET version = 'test', spec = '(a-base64-encoded-value)' WHERE materialization = 'tests/materialize-snowflake/materialize';"
  }
}
{
  "opened": {
    "runtimeCheckpoint": {
      "sources": {
        "a/read/journal;suffix": {
          "readThrough": "1"
        }
      }
    }
  }
}
{
  "acknowledged": {}
}
